
w25qx_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000124c  08009c58  08009c58  00019c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea4  0800aea4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800aea4  0800aea4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aea4  0800aea4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aea4  0800aea4  0001aea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea8  0800aea8  0001aea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aeac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  200001e8  0800b094  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  0800b094  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a263  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3f  00000000  00000000  0002a474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002cc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017da3  00000000  00000000  0002d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c620  00000000  00000000  000453b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085918  00000000  00000000  000519d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d72eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c4  00000000  00000000  000d733c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c3c 	.word	0x08009c3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009c3c 	.word	0x08009c3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2iz>:
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30f      	bcc.n	8001002 <__aeabi_f2iz+0x2a>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d90d      	bls.n	8001008 <__aeabi_f2iz+0x30>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	bf18      	it	ne
 8000ffe:	4240      	negne	r0, r0
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2iz+0x3a>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d105      	bne.n	800101e <__aeabi_f2iz+0x46>
 8001012:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001016:	bf08      	it	eq
 8001018:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fd77 	bl	8000b24 <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff faed 	bl	8000640 <__aeabi_dmul>
 8001066:	f7ff fdc3 	bl	8000bf0 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff fa6e 	bl	800054c <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fae4 	bl	8000640 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f926 	bl	80002d0 <__aeabi_dsub>
 8001084:	f7ff fdb4 	bl	8000bf0 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes

void W25Q_Delay(uint32_t time)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fb43 	bl	8002728 <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <csLOW>:

void csLOW (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b6:	4802      	ldr	r0, [pc, #8]	; (80010c0 <csLOW+0x14>)
 80010b8:	f001 fdc2 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <csHIGH>:

void csHIGH (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <csHIGH+0x14>)
 80010d0:	f001 fdb6 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010c00 	.word	0x40010c00

080010dc <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_Write+0x24>)
 80010f4:	f003 fc00 	bl	80048f8 <HAL_SPI_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000274 	.word	0x20000274

08001104 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	f241 3388 	movw	r3, #5000	; 0x1388
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <SPI_Read+0x24>)
 800111a:	f003 fd31 	bl	8004b80 <HAL_SPI_Receive>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000274 	.word	0x20000274

0800112c <W25Q_Reset>:

/**************************************************************************************************/

void W25Q_Reset (void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;  // enable Reset
 8001132:	2366      	movs	r3, #102	; 0x66
 8001134:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;  // Reset
 8001136:	2399      	movs	r3, #153	; 0x99
 8001138:	717b      	strb	r3, [r7, #5]
	csLOW();
 800113a:	f7ff ffb7 	bl	80010ac <csLOW>
	SPI_Write(tData, 2);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffca 	bl	80010dc <SPI_Write>
	csHIGH();
 8001148:	f7ff ffbc 	bl	80010c4 <csHIGH>
	W25Q_Delay(100);
 800114c:	2064      	movs	r0, #100	; 0x64
 800114e:	f7ff ffa1 	bl	8001094 <W25Q_Delay>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <W25Q_ReadID>:

uint32_t W25Q_ReadID (void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
	uint8_t tData = 0x9F;  // Read JEDEC ID
 8001160:	239f      	movs	r3, #159	; 0x9f
 8001162:	71fb      	strb	r3, [r7, #7]
	uint8_t rData[3];
	csLOW();
 8001164:	f7ff ffa2 	bl	80010ac <csLOW>
	SPI_Write(&tData, 1);
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb5 	bl	80010dc <SPI_Write>
	SPI_Read(rData, 3);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2103      	movs	r1, #3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffc4 	bl	8001104 <SPI_Read>
	csHIGH();
 800117c:	f7ff ffa2 	bl	80010c4 <csHIGH>
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 8001180:	793b      	ldrb	r3, [r7, #4]
 8001182:	041a      	lsls	r2, r3, #16
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4313      	orrs	r3, r2
 800118a:	79ba      	ldrb	r2, [r7, #6]
 800118c:	4313      	orrs	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <W25Q_Read>:

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	460b      	mov	r3, r1
 80011a4:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	021a      	lsls	r2, r3, #8
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	4413      	add	r3, r2
 80011ae:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 80011b0:	2303      	movs	r3, #3
 80011b2:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 80011ca:	f7ff ff6f 	bl	80010ac <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2104      	movs	r1, #4
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff81 	bl	80010dc <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f7ff ff91 	bl	8001104 <SPI_Read>
	csHIGH();  // pull the CS High
 80011e2:	f7ff ff6f 	bl	80010c4 <csHIGH>
}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b088      	sub	sp, #32
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	460b      	mov	r3, r1
 80011fc:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	4413      	add	r3, r2
 8001206:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8001208:	230b      	movs	r3, #11
 800120a:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b2db      	uxtb	r3, r3
 800121a:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 8001222:	2300      	movs	r3, #0
 8001224:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 8001226:	f7ff ff41 	bl	80010ac <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2105      	movs	r1, #5
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff53 	bl	80010dc <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	6838      	ldr	r0, [r7, #0]
 800123a:	f7ff ff63 	bl	8001104 <SPI_Read>
	csHIGH();  // pull the CS High
 800123e:	f7ff ff41 	bl	80010c4 <csHIGH>
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <write_enable>:

void write_enable (void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8001250:	2306      	movs	r3, #6
 8001252:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001254:	f7ff ff2a 	bl	80010ac <csLOW>
	SPI_Write(&tData, 1);
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff3d 	bl	80010dc <SPI_Write>
	csHIGH();
 8001262:	f7ff ff2f 	bl	80010c4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001266:	2005      	movs	r0, #5
 8001268:	f7ff ff14 	bl	8001094 <W25Q_Delay>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <write_disable>:

void write_disable(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 800127a:	2304      	movs	r3, #4
 800127c:	71fb      	strb	r3, [r7, #7]
	csLOW();
 800127e:	f7ff ff15 	bl	80010ac <csLOW>
	SPI_Write(&tData, 1);
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff28 	bl	80010dc <SPI_Write>
	csHIGH();
 800128c:	f7ff ff1a 	bl	80010c4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001290:	2005      	movs	r0, #5
 8001292:	f7ff feff 	bl	8001094 <W25Q_Delay>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	2bff      	cmp	r3, #255	; 0xff
 80012b2:	d801      	bhi.n	80012b8 <bytestowrite+0x1a>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	e002      	b.n	80012be <bytestowrite+0x20>
	else return 256-offset;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012de:	d201      	bcs.n	80012e4 <bytestomodify+0x1c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	e002      	b.n	80012ea <bytestomodify+0x22>
	else return 4096-offset;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	031b      	lsls	r3, r3, #12
 8001302:	617b      	str	r3, [r7, #20]

	write_enable();
 8001304:	f7ff ffa1 	bl	800124a <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 8001308:	2320      	movs	r3, #32
 800130a:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	b2db      	uxtb	r3, r3
 8001312:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8001322:	f7ff fec3 	bl	80010ac <csLOW>
		SPI_Write(tData, 4);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2104      	movs	r1, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fed5 	bl	80010dc <SPI_Write>
		csHIGH();
 8001332:	f7ff fec7 	bl	80010c4 <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8001336:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800133a:	f7ff feab 	bl	8001094 <W25Q_Delay>

	write_disable();
 800133e:	f7ff ff99 	bl	8001274 <write_disable>

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 800134a:	b590      	push	{r4, r7, lr}
 800134c:	b0d3      	sub	sp, #332	; 0x14c
 800134e:	af00      	add	r7, sp, #0
 8001350:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8001354:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001358:	6020      	str	r0, [r4, #0]
 800135a:	4608      	mov	r0, r1
 800135c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001360:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001364:	600a      	str	r2, [r1, #0]
 8001366:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800136a:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001374:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001378:	4602      	mov	r2, r0
 800137a:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 800137c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001380:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 800138a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800138e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001392:	881a      	ldrh	r2, [r3, #0]
 8001394:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001398:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	3b01      	subs	r3, #1
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013a8:	4413      	add	r3, r2
 80013aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint32_t numPages = endPage-startPage+1;
 80013ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint16_t startSector  = startPage/16;
 80013be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	uint16_t endSector  = endPage/16;
 80013c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	uint16_t numSectors = endSector-startSector+1;
 80013d2:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 80013d6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	for (uint16_t i=0; i<numSectors; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 80013ea:	e00c      	b.n	8001406 <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 80013ec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	f8a7 2142 	strh.w	r2, [r7, #322]	; 0x142
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff7c 	bl	80012f4 <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 80013fc:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 8001400:	3301      	adds	r3, #1
 8001402:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8001406:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800140a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800140e:	429a      	cmp	r2, r3
 8001410:	d3ec      	bcc.n	80013ec <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800141e:	e0c0      	b.n	80015a2 <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8001420:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800142a:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	4413      	add	r3, r2
 8001432:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		uint16_t bytesremaining  = bytestowrite(size, offset);
 8001436:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800143a:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800143e:	881a      	ldrh	r2, [r3, #0]
 8001440:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001444:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001448:	4611      	mov	r1, r2
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f7ff ff27 	bl	800129e <bytestowrite>
 8001450:	4603      	mov	r3, r0
 8001452:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
		uint32_t indx = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		write_enable();
 800145c:	f7ff fef5 	bl	800124a <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8001460:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001464:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800146c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	b2da      	uxtb	r2, r3
 8001474:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001478:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800147c:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 800147e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b2da      	uxtb	r2, r3
 8001486:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800148a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800148e:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001490:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001494:	b2da      	uxtb	r2, r3
 8001496:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800149a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800149e:	70da      	strb	r2, [r3, #3]

			indx = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 80014a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80014b0:	4413      	add	r3, r2
 80014b2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 80014bc:	e01a      	b.n	80014f4 <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 80014be:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80014c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014c6:	4413      	add	r3, r2
 80014c8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80014cc:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	441a      	add	r2, r3
 80014d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014d8:	1c59      	adds	r1, r3, #1
 80014da:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80014de:	7811      	ldrb	r1, [r2, #0]
 80014e0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80014e4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80014e8:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 80014ea:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80014ee:	3301      	adds	r3, #1
 80014f0:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 80014f4:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80014f8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3de      	bcc.n	80014be <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 8001500:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001504:	2bfa      	cmp	r3, #250	; 0xfa
 8001506:	d916      	bls.n	8001536 <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 8001508:	f7ff fdd0 	bl	80010ac <csLOW>
			SPI_Write(tData, 100);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	2164      	movs	r1, #100	; 0x64
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fde2 	bl	80010dc <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	3364      	adds	r3, #100	; 0x64
 800151e:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	3a64      	subs	r2, #100	; 0x64
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fdd6 	bl	80010dc <SPI_Write>
			csHIGH();
 8001530:	f7ff fdc8 	bl	80010c4 <csHIGH>
 8001534:	e00c      	b.n	8001550 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 8001536:	f7ff fdb9 	bl	80010ac <csLOW>
			SPI_Write(tData, bytestosend);
 800153a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800153e:	b2da      	uxtb	r2, r3
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fdc8 	bl	80010dc <SPI_Write>
			csHIGH();
 800154c:	f7ff fdba 	bl	80010c4 <csHIGH>
		}


		startPage++;
 8001550:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001554:	3301      	adds	r3, #1
 8001556:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		offset = 0;
 800155a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800155e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8001566:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800156a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800156e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001572:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001576:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800157a:	6809      	ldr	r1, [r1, #0]
 800157c:	1a8a      	subs	r2, r1, r2
 800157e:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 8001580:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001584:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001588:	4413      	add	r3, r2
 800158a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		W25Q_Delay(5);
 800158e:	2005      	movs	r0, #5
 8001590:	f7ff fd80 	bl	8001094 <W25Q_Delay>
		write_disable();
 8001594:	f7ff fe6e 	bl	8001274 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 8001598:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800159c:	3301      	adds	r3, #1
 800159e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80015a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80015a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015aa:	429a      	cmp	r2, r3
 80015ac:	f4ff af38 	bcc.w	8001420 <W25Q_Write_Clean+0xd6>

	}
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80015ca:	f844 0c24 	str.w	r0, [r4, #-36]
 80015ce:	4608      	mov	r0, r1
 80015d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80015d4:	f841 2c2c 	str.w	r2, [r1, #-44]
 80015d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015dc:	f842 3c30 	str.w	r3, [r2, #-48]
 80015e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e4:	4602      	mov	r2, r0
 80015e6:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 80015ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ee:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80015f8:	f102 020e 	add.w	r2, r2, #14
 80015fc:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 80015fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001602:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 8001606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800160e:	4413      	add	r3, r2
 8001610:	3b01      	subs	r3, #1
 8001612:	0a1a      	lsrs	r2, r3, #8
 8001614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001618:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800161c:	4413      	add	r3, r2
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001624:	f102 021e 	add.w	r2, r2, #30
 8001628:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 800162a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800162e:	f103 031e 	add.w	r3, r3, #30
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001638:	f103 030e 	add.w	r3, r3, #14
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001648:	f102 021c 	add.w	r2, r2, #28
 800164c:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 800164e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001652:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	021a      	lsls	r2, r3, #8
 800165c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001660:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 8001664:	4413      	add	r3, r2
 8001666:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800166a:	f102 0208 	add.w	r2, r2, #8
 800166e:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001676:	f102 0204 	add.w	r2, r2, #4
 800167a:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001682:	f102 0202 	add.w	r2, r2, #2
 8001686:	8013      	strh	r3, [r2, #0]
 8001688:	e0a5      	b.n	80017d6 <W25Q_Write+0x21a>
	{
		uint32_t startPage = startSector*16;
 800168a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800168e:	f103 030e 	add.w	r3, r3, #14
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800169a:	f102 0218 	add.w	r2, r2, #24
 800169e:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 80016a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a4:	3b1c      	subs	r3, #28
 80016a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016aa:	2100      	movs	r1, #0
 80016ac:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 80016b0:	f100 0018 	add.w	r0, r0, #24
 80016b4:	6800      	ldr	r0, [r0, #0]
 80016b6:	f7ff fd9a 	bl	80011ee <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 80016ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016be:	f103 0308 	add.w	r3, r3, #8
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80016ca:	4619      	mov	r1, r3
 80016cc:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 80016d0:	f7ff fdfa 	bl	80012c8 <bytestomodify>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80016da:	f102 0216 	add.w	r2, r2, #22
 80016de:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80016e6:	8013      	strh	r3, [r2, #0]
 80016e8:	e023      	b.n	8001732 <W25Q_Write+0x176>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 80016ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016f4:	f103 0304 	add.w	r3, r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001700:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8001704:	441a      	add	r2, r3
 8001706:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800170a:	8819      	ldrh	r1, [r3, #0]
 800170c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001710:	f103 0308 	add.w	r3, r3, #8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	440b      	add	r3, r1
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800171e:	440b      	add	r3, r1
 8001720:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8001724:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001730:	8013      	strh	r3, [r2, #0]
 8001732:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800173c:	f103 0316 	add.w	r3, r3, #22
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3d1      	bcc.n	80016ea <W25Q_Write+0x12e>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 8001746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174a:	3b1c      	subs	r3, #28
 800174c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001750:	2100      	movs	r1, #0
 8001752:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001756:	f100 0018 	add.w	r0, r0, #24
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f7ff fdf5 	bl	800134a <W25Q_Write_Clean>

		startSector++;
 8001760:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001764:	f103 030e 	add.w	r3, r3, #14
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001770:	f102 020e 	add.w	r2, r2, #14
 8001774:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800177c:	f102 0208 	add.w	r2, r2, #8
 8001780:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 8001782:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001786:	f103 0316 	add.w	r3, r3, #22
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001790:	f102 0204 	add.w	r2, r2, #4
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4413      	add	r3, r2
 8001798:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800179c:	f102 0204 	add.w	r2, r2, #4
 80017a0:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 80017a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017a6:	f103 0316 	add.w	r3, r3, #22
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017b0:	4611      	mov	r1, r2
 80017b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017b6:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 80017c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80017c4:	f103 0302 	add.w	r3, r3, #2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80017d0:	f102 0202 	add.w	r2, r2, #2
 80017d4:	8013      	strh	r3, [r2, #0]
 80017d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80017da:	f103 0302 	add.w	r3, r3, #2
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017e4:	f103 031c 	add.w	r3, r3, #28
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	f4ff af4d 	bcc.w	800168a <W25Q_Write+0xce>
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <float2Bytes>:
}

uint8_t tempBytes[4];

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e00b      	b.n	800182a <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	440b      	add	r3, r1
 800181a:	3210      	adds	r2, #16
 800181c:	443a      	add	r2, r7
 800181e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001822:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d9f0      	bls.n	8001812 <float2Bytes+0x14>
    }

}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	75fb      	strb	r3, [r7, #23]
 8001848:	e00b      	b.n	8001862 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	441a      	add	r2, r3
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	3318      	adds	r3, #24
 8001856:	443b      	add	r3, r7
 8001858:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	3301      	adds	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9f0      	bls.n	800184a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	613b      	str	r3, [r7, #16]
   return float_variable;
 800186c:	693b      	ldr	r3, [r7, #16]
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <W25Q_Write_NUM>:

void W25Q_Write_NUM (uint32_t page, uint16_t offset, float data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	460b      	mov	r3, r1
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	817b      	strh	r3, [r7, #10]
	float2Bytes(tempBytes, data);
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <W25Q_Write_NUM+0x2c>)
 800188a:	f7ff ffb8 	bl	80017fe <float2Bytes>
//	{
//		W25Q_Write_Byte(i+Addr, tempBytes[i]);
//	}

	/* Write using sector update function */
	W25Q_Write(page, offset, 4, tempBytes);
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <W25Q_Write_NUM+0x2c>)
 8001892:	2204      	movs	r2, #4
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fe91 	bl	80015bc <W25Q_Write>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000204 	.word	0x20000204

080018a8 <W25Q_Read_NUM>:

float W25Q_Read_NUM (uint32_t page, uint16_t offset)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
	uint8_t rData[4];
	W25Q_Read(page, offset, 4, rData);
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	b2d9      	uxtb	r1, r3
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2204      	movs	r2, #4
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fc69 	bl	8001196 <W25Q_Read>
	return (Bytes2float(rData));
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffb7 	bl	800183c <Bytes2float>
 80018ce:	4603      	mov	r3, r0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0a4      	sub	sp, #144	; 0x90
 80018dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 fec1 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f927 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e6:	f000 f9cf 	bl	8001c88 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018ea:	f000 f997 	bl	8001c1c <MX_SPI1_Init>
  MX_I2C2_Init();
 80018ee:	f000 f967 	bl	8001bc0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  W25Q_Reset();
 80018f2:	f7ff fc1b 	bl	800112c <W25Q_Reset>
  ID = W25Q_ReadID();
 80018f6:	f7ff fc30 	bl	800115a <W25Q_ReadID>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a81      	ldr	r2, [pc, #516]	; (8001b04 <main+0x22c>)
 80018fe:	6013      	str	r3, [r2, #0]

  if (ssd1306_Init(&hi2c2) != 0) {
 8001900:	4881      	ldr	r0, [pc, #516]	; (8001b08 <main+0x230>)
 8001902:	f000 fa29 	bl	8001d58 <ssd1306_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <main+0x38>
      Error_Handler();
 800190c:	f000 fa08 	bl	8001d20 <Error_Handler>
    }

  HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001914:	f000 ff08 	bl	8002728 <HAL_Delay>
  for (int i = 0; i <= 110; i+= 18) {
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800191e:	e011      	b.n	8001944 <main+0x6c>
	 ssd1306_SetCursor(0, i);
 8001920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	2000      	movs	r0, #0
 800192a:	f000 fca3 	bl	8002274 <ssd1306_SetCursor>
	 ssd1306_WriteString("abcdefgh", Font_11x18, White);
 800192e:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <main+0x234>)
 8001930:	2301      	movs	r3, #1
 8001932:	ca06      	ldmia	r2, {r1, r2}
 8001934:	4876      	ldr	r0, [pc, #472]	; (8001b10 <main+0x238>)
 8001936:	f000 fc77 	bl	8002228 <ssd1306_WriteString>
  for (int i = 0; i <= 110; i+= 18) {
 800193a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800193e:	3312      	adds	r3, #18
 8001940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001948:	2b6e      	cmp	r3, #110	; 0x6e
 800194a:	dde9      	ble.n	8001920 <main+0x48>
  }


    ssd1306_UpdateScreen(&hi2c2);
 800194c:	486e      	ldr	r0, [pc, #440]	; (8001b08 <main+0x230>)
 800194e:	f000 fb45 	bl	8001fdc <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i< 4; i++){
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001958:	e06e      	b.n	8001a38 <main+0x160>
	  			ADSwrite[0] = 0x01;
 800195a:	4b6e      	ldr	r3, [pc, #440]	; (8001b14 <main+0x23c>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]

	  			switch(i){
 8001960:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001964:	2b03      	cmp	r3, #3
 8001966:	d81b      	bhi.n	80019a0 <main+0xc8>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <main+0x98>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	08001989 	.word	0x08001989
 8001978:	08001991 	.word	0x08001991
 800197c:	08001999 	.word	0x08001999
	  				case(0):
	  					ADSwrite[1] = 0xC1; //11000001
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <main+0x23c>)
 8001982:	22c1      	movs	r2, #193	; 0xc1
 8001984:	705a      	strb	r2, [r3, #1]
	  				break;
 8001986:	e00b      	b.n	80019a0 <main+0xc8>
	  				case(1):
	  					ADSwrite[1] = 0xD1; //11010001
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <main+0x23c>)
 800198a:	22d1      	movs	r2, #209	; 0xd1
 800198c:	705a      	strb	r2, [r3, #1]
	  				break;
 800198e:	e007      	b.n	80019a0 <main+0xc8>
	  				case(2):
	  					ADSwrite[1] = 0xE1;
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <main+0x23c>)
 8001992:	22e1      	movs	r2, #225	; 0xe1
 8001994:	705a      	strb	r2, [r3, #1]
	  				break;
 8001996:	e003      	b.n	80019a0 <main+0xc8>
	  				case(3):
	  					ADSwrite[1] = 0xF1;
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <main+0x23c>)
 800199a:	22f1      	movs	r2, #241	; 0xf1
 800199c:	705a      	strb	r2, [r3, #1]
	  				break;
 800199e:	bf00      	nop
	  			}

	  			ADSwrite[2] = 0x83; //10000011 LSB
 80019a0:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <main+0x23c>)
 80019a2:	2283      	movs	r2, #131	; 0x83
 80019a4:	709a      	strb	r2, [r3, #2]

	  			HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2303      	movs	r3, #3
 80019ac:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <main+0x23c>)
 80019ae:	2190      	movs	r1, #144	; 0x90
 80019b0:	4855      	ldr	r0, [pc, #340]	; (8001b08 <main+0x230>)
 80019b2:	f001 faa1 	bl	8002ef8 <HAL_I2C_Master_Transmit>
	  			ADSwrite[0] = 0x00;
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <main+0x23c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	  			HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <main+0x23c>)
 80019c4:	2190      	movs	r1, #144	; 0x90
 80019c6:	4850      	ldr	r0, [pc, #320]	; (8001b08 <main+0x230>)
 80019c8:	f001 fa96 	bl	8002ef8 <HAL_I2C_Master_Transmit>
	  			HAL_Delay(20);
 80019cc:	2014      	movs	r0, #20
 80019ce:	f000 feab 	bl	8002728 <HAL_Delay>

	  			HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80019d2:	2364      	movs	r3, #100	; 0x64
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2302      	movs	r3, #2
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <main+0x23c>)
 80019da:	2190      	movs	r1, #144	; 0x90
 80019dc:	484a      	ldr	r0, [pc, #296]	; (8001b08 <main+0x230>)
 80019de:	f001 fb89 	bl	80030f4 <HAL_I2C_Master_Receive>
	  			reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80019e2:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <main+0x23c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <main+0x23c>)
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <main+0x240>)
 80019f6:	801a      	strh	r2, [r3, #0]
	  			if(reading < 0) {
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <main+0x240>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da02      	bge.n	8001a08 <main+0x130>
	  				reading = 0;
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <main+0x240>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]
	  			}
	  			voltage[i] = reading * voltageConv;
 8001a08:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <main+0x240>)
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa18 	bl	8000e44 <__aeabi_i2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <main+0x244>)
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fba0 	bl	8000160 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <main+0x248>)
 8001a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i=0; i< 4; i++){
 8001a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a32:	3301      	adds	r3, #1
 8001a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	dd8c      	ble.n	800195a <main+0x82>

	  		}


	  W25Q_Write_NUM(0, 10, voltage[1]);
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <main+0x248>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	461a      	mov	r2, r3
 8001a46:	210a      	movs	r1, #10
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ff15 	bl	8001878 <W25Q_Write_NUM>
	  float rNum1 = W25Q_Read_NUM(0, 10);
 8001a4e:	210a      	movs	r1, #10
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff ff29 	bl	80018a8 <W25Q_Read_NUM>
 8001a56:	67f8      	str	r0, [r7, #124]	; 0x7c
	  char *tmpSign = (rNum1 < 0) ? "-" : "+";
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a5e:	f7ff fa93 	bl	8000f88 <__aeabi_fcmplt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <main+0x194>
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <main+0x24c>)
 8001a6a:	e000      	b.n	8001a6e <main+0x196>
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <main+0x250>)
 8001a6e:	67bb      	str	r3, [r7, #120]	; 0x78
	  float tmpVal = (rNum1 < 0) ? -rNum1 : rNum1;
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a76:	f7ff fa87 	bl	8000f88 <__aeabi_fcmplt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <main+0x1b0>
 8001a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a86:	e000      	b.n	8001a8a <main+0x1b2>
 8001a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8a:	677b      	str	r3, [r7, #116]	; 0x74
	  int tmpInt1 = tmpVal;                  // Get the integer
 8001a8c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a8e:	f7ff faa3 	bl	8000fd8 <__aeabi_f2iz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	673b      	str	r3, [r7, #112]	; 0x70
	  float tmpFrac = tmpVal - tmpInt1;      // Get fraction
 8001a96:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001a98:	f7ff f9d4 	bl	8000e44 <__aeabi_i2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001aa2:	f7ff f919 	bl	8000cd8 <__aeabi_fsub>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer
 8001aaa:	4920      	ldr	r1, [pc, #128]	; (8001b2c <main+0x254>)
 8001aac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001aae:	f7fe fb57 	bl	8000160 <__aeabi_fmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd6b 	bl	8000590 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f008 f88b 	bl	8009bdc <trunc>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f867 	bl	8000ba0 <__aeabi_d2iz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	66bb      	str	r3, [r7, #104]	; 0x68
	  sprintf(str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
 8001ad6:	1d38      	adds	r0, r7, #4
 8001ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <main+0x258>)
 8001ae2:	f004 fabf 	bl	8006064 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 fbc3 	bl	8002274 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, White);
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <main+0x234>)
 8001af0:	1d38      	adds	r0, r7, #4
 8001af2:	2301      	movs	r3, #1
 8001af4:	ca06      	ldmia	r2, {r1, r2}
 8001af6:	f000 fb97 	bl	8002228 <ssd1306_WriteString>
	  ssd1306_UpdateScreen(&hi2c2);
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <main+0x230>)
 8001afc:	f000 fa6e 	bl	8001fdc <ssd1306_UpdateScreen>
  {
 8001b00:	e727      	b.n	8001952 <main+0x7a>
 8001b02:	bf00      	nop
 8001b04:	200002cc 	.word	0x200002cc
 8001b08:	20000220 	.word	0x20000220
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	08009c58 	.word	0x08009c58
 8001b14:	20000208 	.word	0x20000208
 8001b18:	2000020e 	.word	0x2000020e
 8001b1c:	3943a5e3 	.word	0x3943a5e3
 8001b20:	20000210 	.word	0x20000210
 8001b24:	08009c64 	.word	0x08009c64
 8001b28:	08009c68 	.word	0x08009c68
 8001b2c:	461c4000 	.word	0x461c4000
 8001b30:	08009c6c 	.word	0x08009c6c

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fc14 	bl	8005370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fa3b 	bl	8003ff8 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b88:	f000 f8ca 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	2302      	movs	r3, #2
 8001b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fca8 	bl	80044fc <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bb2:	f000 f8b5 	bl	8001d20 <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3740      	adds	r7, #64	; 0x40
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <MX_I2C2_Init+0x54>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_I2C2_Init+0x58>)
 8001bce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_I2C2_Init+0x50>)
 8001bfe:	f001 f837 	bl	8002c70 <HAL_I2C_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c08:	f000 f88a 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000220 	.word	0x20000220
 8001c14:	40005800 	.word	0x40005800
 8001c18:	000186a0 	.word	0x000186a0

08001c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <MX_SPI1_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c50:	2220      	movs	r2, #32
 8001c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_SPI1_Init+0x64>)
 8001c6e:	f002 fdbf 	bl	80047f0 <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c78:	f000 f852 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000274 	.word	0x20000274
 8001c84:	40013000 	.word	0x40013000

08001c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_GPIO_Init+0x90>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <MX_GPIO_Init+0x94>)
 8001cec:	f000 ffa8 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_GPIO_Init+0x94>)
 8001d0a:	f000 fe15 	bl	8002938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010c00 	.word	0x40010c00

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>

08001d2a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af04      	add	r7, sp, #16
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001d36:	230a      	movs	r3, #10
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	1cfb      	adds	r3, r7, #3
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	2200      	movs	r2, #0
 8001d46:	2178      	movs	r1, #120	; 0x78
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 fc3f 	bl	80035cc <HAL_I2C_Mem_Write>
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	f000 fce1 	bl	8002728 <HAL_Delay>
    int status = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001d6a:	21ae      	movs	r1, #174	; 0xae
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffdc 	bl	8001d2a <ssd1306_WriteCommand>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffd3 	bl	8001d2a <ssd1306_WriteCommand>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d8e:	2110      	movs	r1, #16
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ffca 	bl	8001d2a <ssd1306_WriteCommand>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001da0:	21b0      	movs	r1, #176	; 0xb0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffc1 	bl	8001d2a <ssd1306_WriteCommand>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC0);   // Set COM Output Scan Direction
 8001db2:	21c0      	movs	r1, #192	; 0xc0
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffb8 	bl	8001d2a <ssd1306_WriteCommand>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffaf 	bl	8001d2a <ssd1306_WriteCommand>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffa6 	bl	8001d2a <ssd1306_WriteCommand>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001de8:	2140      	movs	r1, #64	; 0x40
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff9d 	bl	8001d2a <ssd1306_WriteCommand>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001dfa:	2181      	movs	r1, #129	; 0x81
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff94 	bl	8001d2a <ssd1306_WriteCommand>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001e0c:	21ff      	movs	r1, #255	; 0xff
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff8b 	bl	8001d2a <ssd1306_WriteCommand>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001e1e:	21a1      	movs	r1, #161	; 0xa1
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff82 	bl	8001d2a <ssd1306_WriteCommand>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001e30:	21a6      	movs	r1, #166	; 0xa6
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff79 	bl	8001d2a <ssd1306_WriteCommand>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001e42:	21a8      	movs	r1, #168	; 0xa8
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff70 	bl	8001d2a <ssd1306_WriteCommand>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001e54:	217f      	movs	r1, #127	; 0x7f
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff67 	bl	8001d2a <ssd1306_WriteCommand>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e66:	21a4      	movs	r1, #164	; 0xa4
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff5e 	bl	8001d2a <ssd1306_WriteCommand>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001e78:	21d3      	movs	r1, #211	; 0xd3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff55 	bl	8001d2a <ssd1306_WriteCommand>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff4c 	bl	8001d2a <ssd1306_WriteCommand>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001e9c:	21d5      	movs	r1, #213	; 0xd5
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff43 	bl	8001d2a <ssd1306_WriteCommand>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001eae:	21f0      	movs	r1, #240	; 0xf0
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff3a 	bl	8001d2a <ssd1306_WriteCommand>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001ec0:	21d9      	movs	r1, #217	; 0xd9
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff31 	bl	8001d2a <ssd1306_WriteCommand>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001ed2:	2122      	movs	r1, #34	; 0x22
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff28 	bl	8001d2a <ssd1306_WriteCommand>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001ee4:	21da      	movs	r1, #218	; 0xda
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff1f 	bl	8001d2a <ssd1306_WriteCommand>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001ef6:	2112      	movs	r1, #18
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff16 	bl	8001d2a <ssd1306_WriteCommand>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001f08:	21db      	movs	r1, #219	; 0xdb
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff0d 	bl	8001d2a <ssd1306_WriteCommand>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff04 	bl	8001d2a <ssd1306_WriteCommand>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001f2c:	218d      	movs	r1, #141	; 0x8d
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fefb 	bl	8001d2a <ssd1306_WriteCommand>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001f3e:	2114      	movs	r1, #20
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fef2 	bl	8001d2a <ssd1306_WriteCommand>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001f50:	21af      	movs	r1, #175	; 0xaf
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fee9 	bl	8001d2a <ssd1306_WriteCommand>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <ssd1306_Init+0x214>
        return 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00f      	b.n	8001f8c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 f813 	bl	8001f98 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f832 	bl	8001fdc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <ssd1306_Init+0x23c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <ssd1306_Init+0x23c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <ssd1306_Init+0x23c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	715a      	strb	r2, [r3, #5]

    return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000ad0 	.word	0x20000ad0

08001f98 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e00d      	b.n	8001fc4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <ssd1306_Fill+0x1a>
 8001fae:	2100      	movs	r1, #0
 8001fb0:	e000      	b.n	8001fb4 <ssd1306_Fill+0x1c>
 8001fb2:	21ff      	movs	r1, #255	; 0xff
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <ssd1306_Fill+0x40>)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	460a      	mov	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fca:	d3ed      	bcc.n	8001fa8 <ssd1306_Fill+0x10>
    }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	200002d0 	.word	0x200002d0

08001fdc <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e020      	b.n	800202c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	3b50      	subs	r3, #80	; 0x50
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fe99 	bl	8001d2a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fe95 	bl	8001d2a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8002000:	2110      	movs	r1, #16
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fe91 	bl	8001d2a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <ssd1306_UpdateScreen+0x60>)
 800200e:	4413      	add	r3, r2
 8002010:	2264      	movs	r2, #100	; 0x64
 8002012:	9202      	str	r2, [sp, #8]
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2301      	movs	r3, #1
 800201c:	2240      	movs	r2, #64	; 0x40
 800201e:	2178      	movs	r1, #120	; 0x78
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 fad3 	bl	80035cc <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d9db      	bls.n	8001fea <ssd1306_UpdateScreen+0xe>
    }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200002d0 	.word	0x200002d0

08002040 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	460b      	mov	r3, r1
 800204c:	71bb      	strb	r3, [r7, #6]
 800204e:	4613      	mov	r3, r2
 8002050:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db49      	blt.n	80020ee <ssd1306_DrawPixel+0xae>
 800205a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db45      	blt.n	80020ee <ssd1306_DrawPixel+0xae>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <ssd1306_DrawPixel+0xb8>)
 8002064:	791b      	ldrb	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <ssd1306_DrawPixel+0x38>
    {
        color = (SSD1306_COLOR)!color;
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d11a      	bne.n	80020b4 <ssd1306_DrawPixel+0x74>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	b2d8      	uxtb	r0, r3
 8002086:	4603      	mov	r3, r0
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	4413      	add	r3, r2
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <ssd1306_DrawPixel+0xbc>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	b25a      	sxtb	r2, r3
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b259      	sxtb	r1, r3
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	4603      	mov	r3, r0
 80020a8:	01db      	lsls	r3, r3, #7
 80020aa:	4413      	add	r3, r2
 80020ac:	b2c9      	uxtb	r1, r1
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <ssd1306_DrawPixel+0xbc>)
 80020b0:	54d1      	strb	r1, [r2, r3]
 80020b2:	e01d      	b.n	80020f0 <ssd1306_DrawPixel+0xb0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	b2d8      	uxtb	r0, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	4413      	add	r3, r2
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <ssd1306_DrawPixel+0xbc>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	b25a      	sxtb	r2, r3
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4013      	ands	r3, r2
 80020dc:	b259      	sxtb	r1, r3
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	4603      	mov	r3, r0
 80020e2:	01db      	lsls	r3, r3, #7
 80020e4:	4413      	add	r3, r2
 80020e6:	b2c9      	uxtb	r1, r1
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <ssd1306_DrawPixel+0xbc>)
 80020ea:	54d1      	strb	r1, [r2, r3]
 80020ec:	e000      	b.n	80020f0 <ssd1306_DrawPixel+0xb0>
        return;
 80020ee:	bf00      	nop
    }
}
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000ad0 	.word	0x20000ad0
 80020fc:	200002d0 	.word	0x200002d0

08002100 <ssd1306_DrawPixelRot>:

void ssd1306_DrawPixelRot(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	460b      	mov	r3, r1
 800210c:	71bb      	strb	r3, [r7, #6]
 800210e:	4613      	mov	r3, r2
 8002110:	717b      	strb	r3, [r7, #5]
	ssd1306_DrawPixel(y, x, color);
 8002112:	797a      	ldrb	r2, [r7, #5]
 8002114:	79f9      	ldrb	r1, [r7, #7]
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff91 	bl	8002040 <ssd1306_DrawPixel>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	4604      	mov	r4, r0
 8002130:	1d38      	adds	r0, r7, #4
 8002132:	e880 0006 	stmia.w	r0, {r1, r2}
 8002136:	461a      	mov	r2, r3
 8002138:	4623      	mov	r3, r4
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	4613      	mov	r3, r2
 800213e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <ssd1306_WriteChar+0xfc>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	793b      	ldrb	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	2b7f      	cmp	r3, #127	; 0x7f
 800214c:	dc06      	bgt.n	800215c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <ssd1306_WriteChar+0xfc>)
 8002150:	885b      	ldrh	r3, [r3, #2]
 8002152:	461a      	mov	r2, r3
 8002154:	797b      	ldrb	r3, [r7, #5]
 8002156:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002158:	2b7f      	cmp	r3, #127	; 0x7f
 800215a:	dd01      	ble.n	8002160 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800215c:	2300      	movs	r3, #0
 800215e:	e05d      	b.n	800221c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	e04c      	b.n	8002200 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3b20      	subs	r3, #32
 800216c:	7979      	ldrb	r1, [r7, #5]
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4619      	mov	r1, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	440b      	add	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e034      	b.n	80021f0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixelRot(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <ssd1306_WriteChar+0xfc>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	b2d8      	uxtb	r0, r3
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <ssd1306_WriteChar+0xfc>)
 80021a6:	885b      	ldrh	r3, [r3, #2]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	7bba      	ldrb	r2, [r7, #14]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7ff ffa3 	bl	8002100 <ssd1306_DrawPixelRot>
 80021ba:	e016      	b.n	80021ea <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixelRot(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <ssd1306_WriteChar+0xfc>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	b2d8      	uxtb	r0, r3
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <ssd1306_WriteChar+0xfc>)
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b2d9      	uxtb	r1, r3
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff ff8b 	bl	8002100 <ssd1306_DrawPixelRot>
        for (j = 0; j < Font.FontWidth; j++)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	793b      	ldrb	r3, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d3c5      	bcc.n	8002186 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	461a      	mov	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4293      	cmp	r3, r2
 8002208:	d3ad      	bcc.n	8002166 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <ssd1306_WriteChar+0xfc>)
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	793b      	ldrb	r3, [r7, #4]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4413      	add	r3, r2
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <ssd1306_WriteChar+0xfc>)
 8002218:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3724      	adds	r7, #36	; 0x24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	20000ad0 	.word	0x20000ad0

08002228 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	1d38      	adds	r0, r7, #4
 8002232:	e880 0006 	stmia.w	r0, {r1, r2}
 8002236:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002238:	e012      	b.n	8002260 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	7818      	ldrb	r0, [r3, #0]
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	1d3a      	adds	r2, r7, #4
 8002242:	ca06      	ldmia	r2, {r1, r2}
 8002244:	f7ff ff70 	bl	8002128 <ssd1306_WriteChar>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d002      	beq.n	800225a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	e008      	b.n	800226c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e8      	bne.n	800223a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	781b      	ldrb	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <ssd1306_SetCursor+0x2c>)
 800228a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <ssd1306_SetCursor+0x2c>)
 8002292:	805a      	strh	r2, [r3, #2]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000ad0 	.word	0x20000ad0

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_MspInit+0x5c>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_MspInit+0x5c>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6193      	str	r3, [r2, #24]
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_MspInit+0x5c>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_MspInit+0x5c>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_MspInit+0x5c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_MspInit+0x5c>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_MspInit+0x60>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_MspInit+0x60>)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000

08002308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a16      	ldr	r2, [pc, #88]	; (800237c <HAL_I2C_MspInit+0x74>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d124      	bne.n	8002372 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_I2C_MspInit+0x78>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_I2C_MspInit+0x78>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_I2C_MspInit+0x78>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002346:	2312      	movs	r3, #18
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <HAL_I2C_MspInit+0x7c>)
 8002356:	f000 faef 	bl	8002938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_I2C_MspInit+0x78>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_I2C_MspInit+0x78>)
 8002360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_I2C_MspInit+0x78>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40005800 	.word	0x40005800
 8002380:	40021000 	.word	0x40021000
 8002384:	40010c00 	.word	0x40010c00

08002388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_SPI_MspInit+0xa4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d13d      	bne.n	8002424 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a20      	ldr	r2, [pc, #128]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_SPI_MspInit+0xa8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80023d8:	2328      	movs	r3, #40	; 0x28
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <HAL_SPI_MspInit+0xac>)
 80023ec:	f000 faa4 	bl	8002938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f0:	2310      	movs	r3, #16
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	480c      	ldr	r0, [pc, #48]	; (8002434 <HAL_SPI_MspInit+0xac>)
 8002404:	f000 fa98 	bl	8002938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_SPI_MspInit+0xb0>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_SPI_MspInit+0xb0>)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013000 	.word	0x40013000
 8002430:	40021000 	.word	0x40021000
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40010000 	.word	0x40010000

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 f935 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}

0800248a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  return 1;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <_kill>:

int _kill(int pid, int sig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a2:	f002 ff3b 	bl	800531c <__errno>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2216      	movs	r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
  return -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_exit>:

void _exit (int status)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffe7 	bl	8002498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ca:	e7fe      	b.n	80024ca <_exit+0x12>

080024cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
  }

  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e009      	b.n	800252c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	dbf1      	blt.n	8002518 <_write+0x12>
  }
  return len;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_close>:

int _close(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002564:	605a      	str	r2, [r3, #4]
  return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <_isatty>:

int _isatty(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
	...

080025a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <_sbrk+0x5c>)
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <_sbrk+0x60>)
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <_sbrk+0x64>)
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <_sbrk+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d0:	f002 fea4 	bl	800531c <__errno>
 80025d4:	4603      	mov	r3, r0
 80025d6:	220c      	movs	r2, #12
 80025d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e009      	b.n	80025f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <_sbrk+0x64>)
 80025f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20005000 	.word	0x20005000
 8002600:	00000400 	.word	0x00000400
 8002604:	20000ad8 	.word	0x20000ad8
 8002608:	20000af0 	.word	0x20000af0

0800260c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002618:	f7ff fff8 	bl	800260c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800261e:	490c      	ldr	r1, [pc, #48]	; (8002650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002634:	4c09      	ldr	r4, [pc, #36]	; (800265c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002642:	f002 fe71 	bl	8005328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002646:	f7ff f947 	bl	80018d8 <main>
  bx lr
 800264a:	4770      	bx	lr
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002654:	0800aeac 	.word	0x0800aeac
  ldr r2, =_sbss
 8002658:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800265c:	20000af0 	.word	0x20000af0

08002660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_2_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_Init+0x28>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_Init+0x28>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f92b 	bl	80028d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200f      	movs	r0, #15
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fe10 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f935 	bl	800291e <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 f90b 	bl	80028e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000010 	.word	0x20000010
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x1c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x20>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_IncTick+0x20>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000010 	.word	0x20000010
 8002710:	20000adc 	.word	0x20000adc

08002714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_GetTick+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000adc 	.word	0x20000adc

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fff0 	bl	8002714 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffe0 	bl	8002714 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000010 	.word	0x20000010

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289c:	d301      	bcc.n	80028a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289e:	2301      	movs	r3, #1
 80028a0:	e00f      	b.n	80028c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <SysTick_Config+0x40>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028aa:	210f      	movs	r1, #15
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f7ff ff90 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <SysTick_Config+0x40>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <SysTick_Config+0x40>)
 80028bc:	2207      	movs	r2, #7
 80028be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010

080028d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff49 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f8:	f7ff ff5e 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 80028fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f7ff ff90 	bl	8002828 <NVIC_EncodePriority>
 8002908:	4602      	mov	r2, r0
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff5f 	bl	80027d4 <__NVIC_SetPriority>
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffb0 	bl	800288c <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b08b      	sub	sp, #44	; 0x2c
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294a:	e169      	b.n	8002c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800294c:	2201      	movs	r2, #1
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8158 	bne.w	8002c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a9a      	ldr	r2, [pc, #616]	; (8002bd8 <HAL_GPIO_Init+0x2a0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d05e      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002974:	4a98      	ldr	r2, [pc, #608]	; (8002bd8 <HAL_GPIO_Init+0x2a0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d875      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 800297a:	4a98      	ldr	r2, [pc, #608]	; (8002bdc <HAL_GPIO_Init+0x2a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d058      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002980:	4a96      	ldr	r2, [pc, #600]	; (8002bdc <HAL_GPIO_Init+0x2a4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d86f      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 8002986:	4a96      	ldr	r2, [pc, #600]	; (8002be0 <HAL_GPIO_Init+0x2a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d052      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 800298c:	4a94      	ldr	r2, [pc, #592]	; (8002be0 <HAL_GPIO_Init+0x2a8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d869      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 8002992:	4a94      	ldr	r2, [pc, #592]	; (8002be4 <HAL_GPIO_Init+0x2ac>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04c      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 8002998:	4a92      	ldr	r2, [pc, #584]	; (8002be4 <HAL_GPIO_Init+0x2ac>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d863      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 800299e:	4a92      	ldr	r2, [pc, #584]	; (8002be8 <HAL_GPIO_Init+0x2b0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d046      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
 80029a4:	4a90      	ldr	r2, [pc, #576]	; (8002be8 <HAL_GPIO_Init+0x2b0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d85d      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d82a      	bhi.n	8002a04 <HAL_GPIO_Init+0xcc>
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d859      	bhi.n	8002a66 <HAL_GPIO_Init+0x12e>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_GPIO_Init+0x80>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002a33 	.word	0x08002a33
 80029bc:	08002a0d 	.word	0x08002a0d
 80029c0:	08002a1f 	.word	0x08002a1f
 80029c4:	08002a61 	.word	0x08002a61
 80029c8:	08002a67 	.word	0x08002a67
 80029cc:	08002a67 	.word	0x08002a67
 80029d0:	08002a67 	.word	0x08002a67
 80029d4:	08002a67 	.word	0x08002a67
 80029d8:	08002a67 	.word	0x08002a67
 80029dc:	08002a67 	.word	0x08002a67
 80029e0:	08002a67 	.word	0x08002a67
 80029e4:	08002a67 	.word	0x08002a67
 80029e8:	08002a67 	.word	0x08002a67
 80029ec:	08002a67 	.word	0x08002a67
 80029f0:	08002a67 	.word	0x08002a67
 80029f4:	08002a67 	.word	0x08002a67
 80029f8:	08002a67 	.word	0x08002a67
 80029fc:	08002a15 	.word	0x08002a15
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	4a79      	ldr	r2, [pc, #484]	; (8002bec <HAL_GPIO_Init+0x2b4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a0a:	e02c      	b.n	8002a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	623b      	str	r3, [r7, #32]
          break;
 8002a12:	e029      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e024      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	3308      	adds	r3, #8
 8002a24:	623b      	str	r3, [r7, #32]
          break;
 8002a26:	e01f      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	623b      	str	r3, [r7, #32]
          break;
 8002a30:	e01a      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	623b      	str	r3, [r7, #32]
          break;
 8002a3e:	e013      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a48:	2308      	movs	r3, #8
 8002a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	611a      	str	r2, [r3, #16]
          break;
 8002a52:	e009      	b.n	8002a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a54:	2308      	movs	r3, #8
 8002a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	615a      	str	r2, [r3, #20]
          break;
 8002a5e:	e003      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
          break;
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x130>
          break;
 8002a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	d801      	bhi.n	8002a72 <HAL_GPIO_Init+0x13a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	e001      	b.n	8002a76 <HAL_GPIO_Init+0x13e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d802      	bhi.n	8002a84 <HAL_GPIO_Init+0x14c>
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_Init+0x152>
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	3b08      	subs	r3, #8
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	210f      	movs	r1, #15
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	6a39      	ldr	r1, [r7, #32]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80b1 	beq.w	8002c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad0:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_GPIO_Init+0x2bc>)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <HAL_GPIO_Init+0x2c0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x1ec>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_GPIO_Init+0x2c4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_GPIO_Init+0x1e8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <HAL_GPIO_Init+0x2c8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x1e4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3d      	ldr	r2, [pc, #244]	; (8002c04 <HAL_GPIO_Init+0x2cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_GPIO_Init+0x1e0>
 8002b14:	2303      	movs	r3, #3
 8002b16:	e006      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e004      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e002      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_GPIO_Init+0x1ee>
 8002b24:	2300      	movs	r3, #0
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	f002 0203 	and.w	r2, r2, #3
 8002b2c:	0092      	lsls	r2, r2, #2
 8002b2e:	4093      	lsls	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b36:	492f      	ldr	r1, [pc, #188]	; (8002bf4 <HAL_GPIO_Init+0x2bc>)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	492c      	ldr	r1, [pc, #176]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4928      	ldr	r1, [pc, #160]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	491e      	ldr	r1, [pc, #120]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4918      	ldr	r1, [pc, #96]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	4914      	ldr	r1, [pc, #80]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_GPIO_Init+0x2d0>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
 8002bd4:	e021      	b.n	8002c1a <HAL_GPIO_Init+0x2e2>
 8002bd6:	bf00      	nop
 8002bd8:	10320000 	.word	0x10320000
 8002bdc:	10310000 	.word	0x10310000
 8002be0:	10220000 	.word	0x10220000
 8002be4:	10210000 	.word	0x10210000
 8002be8:	10120000 	.word	0x10120000
 8002bec:	10110000 	.word	0x10110000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40011400 	.word	0x40011400
 8002c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	4909      	ldr	r1, [pc, #36]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f47f ae8e 	bne.w	800294c <HAL_GPIO_Init+0x14>
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	372c      	adds	r7, #44	; 0x2c
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e12b      	b.n	8002eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fb36 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f001 fd5a 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a81      	ldr	r2, [pc, #516]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d807      	bhi.n	8002cf4 <HAL_I2C_Init+0x84>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_I2C_Init+0x278>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e006      	b.n	8002d02 <HAL_I2C_Init+0x92>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a7d      	ldr	r2, [pc, #500]	; (8002eec <HAL_I2C_Init+0x27c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0e7      	b.n	8002eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	; (8002ef0 <HAL_I2C_Init+0x280>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d802      	bhi.n	8002d44 <HAL_I2C_Init+0xd4>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e009      	b.n	8002d58 <HAL_I2C_Init+0xe8>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <HAL_I2C_Init+0x284>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	3301      	adds	r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	495c      	ldr	r1, [pc, #368]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d819      	bhi.n	8002dac <HAL_I2C_Init+0x13c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e59      	subs	r1, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_I2C_Init+0x138>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e59      	subs	r1, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	e051      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002da8:	2304      	movs	r3, #4
 8002daa:	e04f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <HAL_I2C_Init+0x168>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e012      	b.n	8002dfe <HAL_I2C_Init+0x18e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	0099      	lsls	r1, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x196>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e022      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10e      	bne.n	8002e2c <HAL_I2C_Init+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e58      	subs	r0, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	440b      	add	r3, r1
 8002e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	e00f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6809      	ldr	r1, [r1, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6911      	ldr	r1, [r2, #16]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	000186a0 	.word	0x000186a0
 8002ee8:	001e847f 	.word	0x001e847f
 8002eec:	003d08ff 	.word	0x003d08ff
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	10624dd3 	.word	0x10624dd3

08002ef8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	461a      	mov	r2, r3
 8002f04:	460b      	mov	r3, r1
 8002f06:	817b      	strh	r3, [r7, #10]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fc02 	bl	8002714 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	f040 80e0 	bne.w	80030e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	4970      	ldr	r1, [pc, #448]	; (80030ec <HAL_I2C_Master_Transmit+0x1f4>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fe2e 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0d3      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2C_Master_Transmit+0x50>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e0cc      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d007      	beq.n	8002f6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a50      	ldr	r2, [pc, #320]	; (80030f0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fc02 	bl	80037c0 <I2C_MasterRequestWrite>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e08d      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fdc:	e066      	b.n	80030ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 feec 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d107      	bne.n	8003006 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06b      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d11b      	bne.n	8003080 <HAL_I2C_Master_Transmit+0x188>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	6a39      	ldr	r1, [r7, #32]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fee3 	bl	8003e50 <I2C_WaitOnBTFFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e01a      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d194      	bne.n	8002fde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	00100002 	.word	0x00100002
 80030f0:	ffff0000 	.word	0xffff0000

080030f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	460b      	mov	r3, r1
 8003102:	817b      	strh	r3, [r7, #10]
 8003104:	4613      	mov	r3, r2
 8003106:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff fb02 	bl	8002714 <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 824b 	bne.w	80035b6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	497f      	ldr	r1, [pc, #508]	; (8003328 <HAL_I2C_Master_Receive+0x234>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fd2e 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	e23e      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_I2C_Master_Receive+0x54>
 8003144:	2302      	movs	r3, #2
 8003146:	e237      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d007      	beq.n	800316e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2222      	movs	r2, #34	; 0x22
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2210      	movs	r2, #16
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	893a      	ldrh	r2, [r7, #8]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a5f      	ldr	r2, [pc, #380]	; (800332c <HAL_I2C_Master_Receive+0x238>)
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fb84 	bl	80038c4 <I2C_MasterRequestRead>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e1f8      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e1cc      	b.n	8003590 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d11e      	bne.n	800323c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800320e:	b672      	cpsid	i
}
 8003210:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003238:	b662      	cpsie	i
}
 800323a:	e035      	b.n	80032a8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11e      	bne.n	8003282 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003252:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800327e:	b662      	cpsie	i
}
 8003280:	e012      	b.n	80032a8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80032a8:	e172      	b.n	8003590 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	f200 811f 	bhi.w	80034f2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d123      	bne.n	8003304 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fe0d 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e173      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003302:	e145      	b.n	8003590 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b02      	cmp	r3, #2
 800330a:	d152      	bne.n	80033b2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_I2C_Master_Receive+0x23c>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fc38 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e148      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
 8003326:	bf00      	nop
 8003328:	00100002 	.word	0x00100002
 800332c:	ffff0000 	.word	0xffff0000
 8003330:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003334:	b672      	cpsid	i
}
 8003336:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800337a:	b662      	cpsie	i
}
 800337c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033b0:	e0ee      	b.n	8003590 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2200      	movs	r2, #0
 80033ba:	4981      	ldr	r1, [pc, #516]	; (80035c0 <HAL_I2C_Master_Receive+0x4cc>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fbe5 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0f5      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033dc:	b672      	cpsid	i
}
 80033de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_I2C_Master_Receive+0x4d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	4a6b      	ldr	r2, [pc, #428]	; (80035c8 <HAL_I2C_Master_Receive+0x4d4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0a1a      	lsrs	r2, r3, #8
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00da      	lsls	r2, r3, #3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	3b01      	subs	r3, #1
 8003430:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d118      	bne.n	800346a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800345a:	b662      	cpsie	i
}
 800345c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0a6      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d1d9      	bne.n	800342c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034ba:	b662      	cpsie	i
}
 80034bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f0:	e04e      	b.n	8003590 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fcf2 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e058      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d124      	bne.n	8003590 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f ae88 	bne.w	80032aa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	00010004 	.word	0x00010004
 80035c4:	20000008 	.word	0x20000008
 80035c8:	14f8b589 	.word	0x14f8b589

080035cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	817b      	strh	r3, [r7, #10]
 80035de:	460b      	mov	r3, r1
 80035e0:	813b      	strh	r3, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e6:	f7ff f895 	bl	8002714 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	f040 80d9 	bne.w	80037ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2319      	movs	r3, #25
 8003600:	2201      	movs	r2, #1
 8003602:	496d      	ldr	r1, [pc, #436]	; (80037b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fac1 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	e0cc      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Mem_Write+0x56>
 800361e:	2302      	movs	r3, #2
 8003620:	e0c5      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d007      	beq.n	8003648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a4d      	ldr	r2, [pc, #308]	; (80037bc <HAL_I2C_Mem_Write+0x1f0>)
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368a:	88f8      	ldrh	r0, [r7, #6]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f9e0 	bl	8003a60 <I2C_RequestMemoryWrite>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d052      	beq.n	800374c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e081      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fb86 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06b      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_I2C_Mem_Write+0x180>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1aa      	bne.n	80036aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb79 	bl	8003e50 <I2C_WaitOnBTFFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e016      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	00100002 	.word	0x00100002
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d006      	beq.n	80037ea <I2C_MasterRequestWrite+0x2a>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d003      	beq.n	80037ea <I2C_MasterRequestWrite+0x2a>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e8:	d108      	bne.n	80037fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00b      	b.n	8003814 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2b12      	cmp	r3, #18
 8003802:	d107      	bne.n	8003814 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f9b3 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383a:	d103      	bne.n	8003844 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e035      	b.n	80038b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d108      	bne.n	8003864 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	e01b      	b.n	800389c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003864:	897b      	ldrh	r3, [r7, #10]
 8003866:	11db      	asrs	r3, r3, #7
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0306 	and.w	r3, r3, #6
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f063 030f 	orn	r3, r3, #15
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	490e      	ldr	r1, [pc, #56]	; (80038bc <I2C_MasterRequestWrite+0xfc>)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f9fc 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e010      	b.n	80038b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <I2C_MasterRequestWrite+0x100>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f9ec 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	00010008 	.word	0x00010008
 80038c0:	00010002 	.word	0x00010002

080038c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	460b      	mov	r3, r1
 80038d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d006      	beq.n	80038fe <I2C_MasterRequestRead+0x3a>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d003      	beq.n	80038fe <I2C_MasterRequestRead+0x3a>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038fc:	d108      	bne.n	8003910 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b11      	cmp	r3, #17
 8003916:	d107      	bne.n	8003928 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f929 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394e:	d103      	bne.n	8003958 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e079      	b.n	8003a50 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003964:	d108      	bne.n	8003978 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]
 8003976:	e05f      	b.n	8003a38 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003978:	897b      	ldrh	r3, [r7, #10]
 800397a:	11db      	asrs	r3, r3, #7
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f063 030f 	orn	r3, r3, #15
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4930      	ldr	r1, [pc, #192]	; (8003a58 <I2C_MasterRequestRead+0x194>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f972 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e054      	b.n	8003a50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4929      	ldr	r1, [pc, #164]	; (8003a5c <I2C_MasterRequestRead+0x198>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f962 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e044      	b.n	8003a50 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8c7 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d103      	bne.n	8003a1c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e017      	b.n	8003a50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	11db      	asrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f063 030e 	orn	r3, r3, #14
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4907      	ldr	r1, [pc, #28]	; (8003a5c <I2C_MasterRequestRead+0x198>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f91e 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	00010008 	.word	0x00010008
 8003a5c:	00010002 	.word	0x00010002

08003a60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f878 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab0:	d103      	bne.n	8003aba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e05f      	b.n	8003b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	492d      	ldr	r1, [pc, #180]	; (8003b88 <I2C_RequestMemoryWrite+0x128>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8d3 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04c      	b.n	8003b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	6a39      	ldr	r1, [r7, #32]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f95e 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d107      	bne.n	8003b22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e02b      	b.n	8003b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2c:	893b      	ldrh	r3, [r7, #8]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]
 8003b36:	e021      	b.n	8003b7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b38:	893b      	ldrh	r3, [r7, #8]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f938 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d107      	bne.n	8003b6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e005      	b.n	8003b7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b72:	893b      	ldrh	r3, [r7, #8]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	00010002 	.word	0x00010002

08003b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9c:	e048      	b.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d044      	beq.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fe fdb5 	bl	8002714 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d139      	bne.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10d      	bne.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	e00c      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d116      	bne.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e023      	b.n	8003c78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10d      	bne.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	e00c      	b.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d093      	beq.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8e:	e071      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d123      	bne.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e067      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d041      	beq.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7fe fd10 	bl	8002714 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d136      	bne.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e00b      	b.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e021      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d10c      	bne.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e00b      	b.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf14      	ite	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	2300      	moveq	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f af6d 	bne.w	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dcc:	e034      	b.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f8e3 	bl	8003f9a <I2C_IsAcknowledgeFailed>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e034      	b.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d028      	beq.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fc95 	bl	8002714 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11d      	bne.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b80      	cmp	r3, #128	; 0x80
 8003e08:	d016      	beq.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e007      	b.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d1c3      	bne.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5c:	e034      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f89b 	bl	8003f9a <I2C_IsAcknowledgeFailed>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e034      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d028      	beq.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fe fc4d 	bl	8002714 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d016      	beq.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e007      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d1c3      	bne.n	8003e5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eec:	e049      	b.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d119      	bne.n	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e030      	b.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7fe fbf0 	bl	8002714 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11d      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d016      	beq.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0220 	orr.w	r2, r3, #32
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e007      	b.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d1ae      	bne.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d11b      	bne.n	8003fea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e272      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8087 	beq.w	8004126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004018:	4b92      	ldr	r3, [pc, #584]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b04      	cmp	r3, #4
 8004022:	d00c      	beq.n	800403e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004024:	4b8f      	ldr	r3, [pc, #572]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b08      	cmp	r3, #8
 800402e:	d112      	bne.n	8004056 <HAL_RCC_OscConfig+0x5e>
 8004030:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d10b      	bne.n	8004056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403e:	4b89      	ldr	r3, [pc, #548]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06c      	beq.n	8004124 <HAL_RCC_OscConfig+0x12c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d168      	bne.n	8004124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e24c      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x76>
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e02e      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b78      	ldr	r3, [pc, #480]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a77      	ldr	r2, [pc, #476]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e01d      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0xbc>
 800409a:	4b72      	ldr	r3, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a71      	ldr	r2, [pc, #452]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6e      	ldr	r2, [pc, #440]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 80040b4:	4b6b      	ldr	r3, [pc, #428]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a67      	ldr	r2, [pc, #412]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe fb1e 	bl	8002714 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fb1a 	bl	8002714 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e200      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0xe4>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fb0a 	bl	8002714 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fb06 	bl	8002714 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1ec      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x10c>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d063      	beq.n	80041fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x18c>
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1c0      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4939      	ldr	r1, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	e03a      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b36      	ldr	r3, [pc, #216]	; (8004268 <HAL_RCC_OscConfig+0x270>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fabf 	bl	8002714 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419a:	f7fe fabb 	bl	8002714 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1a1      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4927      	ldr	r1, [pc, #156]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <HAL_RCC_OscConfig+0x270>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fa9e 	bl	8002714 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fe fa9a 	bl	8002714 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e180      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03a      	beq.n	800427c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_RCC_OscConfig+0x274>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004214:	f7fe fa7e 	bl	8002714 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fa7a 	bl	8002714 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e160      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 faba 	bl	80047b4 <RCC_Delay>
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_RCC_OscConfig+0x274>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fe fa64 	bl	8002714 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004250:	f7fe fa60 	bl	8002714 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d908      	bls.n	8004270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e146      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	42420000 	.word	0x42420000
 800426c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e9      	bne.n	8004250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a6 	beq.w	80043d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428e:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a87      	ldr	r2, [pc, #540]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	61d3      	str	r3, [r2, #28]
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d118      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	4b7f      	ldr	r3, [pc, #508]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7e      	ldr	r2, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fa21 	bl	8002714 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7fe fa1d 	bl	8002714 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b64      	cmp	r3, #100	; 0x64
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e103      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x312>
 80042fc:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6213      	str	r3, [r2, #32]
 8004308:	e02d      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x334>
 8004312:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6213      	str	r3, [r2, #32]
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	6213      	str	r3, [r2, #32]
 800432a:	e01c      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x356>
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4a60      	ldr	r2, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6213      	str	r3, [r2, #32]
 8004340:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4b58      	ldr	r3, [pc, #352]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a57      	ldr	r2, [pc, #348]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe f9d1 	bl	8002714 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fe f9cd 	bl	8002714 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0b1      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ee      	beq.n	8004376 <HAL_RCC_OscConfig+0x37e>
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fe f9bb 	bl	8002714 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe f9b7 	bl	8002714 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e09b      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ee      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ca:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8087 	beq.w	80044ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d061      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d146      	bne.n	8004482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fe f98b 	bl	8002714 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fe f987 	bl	8002714 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e06d      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f0      	bne.n	8004402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d108      	bne.n	800443c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4921      	ldr	r1, [pc, #132]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a19      	ldr	r1, [r3, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	430b      	orrs	r3, r1
 800444e:	491b      	ldr	r1, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fe f95b 	bl	8002714 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe f957 	bl	8002714 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e03d      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x46a>
 8004480:	e035      	b.n	80044ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fe f944 	bl	8002714 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fe f940 	bl	8002714 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e026      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x498>
 80044ae:	e01e      	b.n	80044ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e019      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_OscConfig+0x500>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0d0      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d910      	bls.n	8004540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	4965      	ldr	r1, [pc, #404]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800457a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d040      	beq.n	800461c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d115      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e073      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06b      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4936      	ldr	r1, [pc, #216]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe f892 	bl	8002714 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fe f88e 	bl	8002714 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e053      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d210      	bcs.n	800464c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	4922      	ldr	r1, [pc, #136]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x1c8>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1cc>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1d0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd fff0 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800a9d4 	.word	0x0800a9d4
 80046c8:	20000008 	.word	0x20000008
 80046cc:	2000000c 	.word	0x2000000c

080046d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x30>
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x36>
 80046fe:	e027      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004702:	613b      	str	r3, [r7, #16]
      break;
 8004704:	e027      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0c9b      	lsrs	r3, r3, #18
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	0c5b      	lsrs	r3, r3, #17
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_RCC_GetSysClockFreq+0xa0>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004732:	fb03 f202 	mul.w	r2, r3, r2
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e004      	b.n	800474a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	613b      	str	r3, [r7, #16]
      break;
 800474e:	e002      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004752:	613b      	str	r3, [r7, #16]
      break;
 8004754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004756:	693b      	ldr	r3, [r7, #16]
}
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	007a1200 	.word	0x007a1200
 800476c:	0800a9ec 	.word	0x0800a9ec
 8004770:	0800a9fc 	.word	0x0800a9fc
 8004774:	003d0900 	.word	0x003d0900

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b02      	ldr	r3, [pc, #8]	; (8004788 <HAL_RCC_GetHCLKFreq+0x10>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	20000008 	.word	0x20000008

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004790:	f7ff fff2 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	0800a9e4 	.word	0x0800a9e4

080047b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <RCC_Delay+0x34>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <RCC_Delay+0x38>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047d0:	bf00      	nop
  }
  while (Delay --);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f9      	bne.n	80047d0 <RCC_Delay+0x1c>
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000008 	.word	0x20000008
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e076      	b.n	80048f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d009      	beq.n	8004828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
 800481a:	e005      	b.n	8004828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fda0 	bl	8002388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	ea42 0103 	orr.w	r1, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	0c1a      	lsrs	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f002 0204 	and.w	r2, r2, #4
 80048ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004908:	f7fd ff04 	bl	8002714 <HAL_GetTick>
 800490c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
 8004920:	e12a      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x36>
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e122      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_SPI_Transmit+0x48>
 800493c:	2302      	movs	r3, #2
 800493e:	e11b      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2203      	movs	r2, #3
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	88fa      	ldrh	r2, [r7, #6]
 8004966:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	d10f      	bne.n	80049b0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d007      	beq.n	80049ce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d6:	d152      	bne.n	8004a7e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Transmit+0xee>
 80049e0:	8b7b      	ldrh	r3, [r7, #26]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d145      	bne.n	8004a72 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a0a:	e032      	b.n	8004a72 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d112      	bne.n	8004a40 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a3e:	e018      	b.n	8004a72 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a40:	f7fd fe68 	bl	8002714 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d803      	bhi.n	8004a58 <HAL_SPI_Transmit+0x160>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d102      	bne.n	8004a5e <HAL_SPI_Transmit+0x166>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e082      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1c7      	bne.n	8004a0c <HAL_SPI_Transmit+0x114>
 8004a7c:	e053      	b.n	8004b26 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x194>
 8004a86:	8b7b      	ldrh	r3, [r7, #26]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d147      	bne.n	8004b1c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ab2:	e033      	b.n	8004b1c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d113      	bne.n	8004aea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ae8:	e018      	b.n	8004b1c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aea:	f7fd fe13 	bl	8002714 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d803      	bhi.n	8004b02 <HAL_SPI_Transmit+0x20a>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_Transmit+0x210>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e02d      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1c6      	bne.n	8004ab4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fbc4 	bl	80052b8 <SPI_EndRxTxTransaction>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e104      	b.n	8004daa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba8:	d112      	bne.n	8004bd0 <HAL_SPI_Receive+0x50>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f8f3 	bl	8004db2 <HAL_SPI_TransmitReceive>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e0ec      	b.n	8004daa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd0:	f7fd fda0 	bl	8002714 <HAL_GetTick>
 8004bd4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_SPI_Receive+0x62>
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0e1      	b.n	8004daa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_SPI_Receive+0x74>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0da      	b.n	8004daa <HAL_SPI_Receive+0x22a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	d10f      	bne.n	8004c64 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d007      	beq.n	8004c82 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d170      	bne.n	8004d6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c8a:	e035      	b.n	8004cf8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d115      	bne.n	8004cc6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f103 020c 	add.w	r2, r3, #12
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc4:	e018      	b.n	8004cf8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc6:	f7fd fd25 	bl	8002714 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d803      	bhi.n	8004cde <HAL_SPI_Receive+0x15e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d102      	bne.n	8004ce4 <HAL_SPI_Receive+0x164>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e058      	b.n	8004daa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c4      	bne.n	8004c8c <HAL_SPI_Receive+0x10c>
 8004d02:	e038      	b.n	8004d76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d113      	bne.n	8004d3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d38:	e018      	b.n	8004d6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3a:	f7fd fceb 	bl	8002714 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d803      	bhi.n	8004d52 <HAL_SPI_Receive+0x1d2>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x1d8>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e01e      	b.n	8004daa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1c6      	bne.n	8004d04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fa4a 	bl	8005214 <SPI_EndRxTransaction>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08a      	sub	sp, #40	; 0x28
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc4:	f7fd fca6 	bl	8002714 <HAL_GetTick>
 8004dc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ddc:	7ffb      	ldrb	r3, [r7, #31]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d00c      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x4a>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x46>
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d001      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e17f      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x5c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x5c>
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e174      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x6e>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e16d      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d003      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2205      	movs	r2, #5
 8004e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	887a      	ldrh	r2, [r7, #2]
 8004e5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d007      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e98:	d17e      	bne.n	8004f98 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0xf6>
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d16c      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ecc:	e059      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d11b      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x162>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x162>
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d113      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x1a4>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d014      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	b292      	uxth	r2, r2
 8004f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f56:	f7fd fbdd 	bl	8002714 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d80d      	bhi.n	8004f82 <HAL_SPI_TransmitReceive+0x1d0>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d009      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0bc      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a0      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x11c>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d19b      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x11c>
 8004f96:	e082      	b.n	800509e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_SPI_TransmitReceive+0x1f4>
 8004fa0:	8afb      	ldrh	r3, [r7, #22]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d171      	bne.n	800508a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fcc:	e05d      	b.n	800508a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d11c      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x264>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x264>
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d114      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d119      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x2a6>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d014      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005054:	2301      	movs	r3, #1
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005058:	f7fd fb5c 	bl	8002714 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	429a      	cmp	r2, r3
 8005066:	d803      	bhi.n	8005070 <HAL_SPI_TransmitReceive+0x2be>
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d102      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x2c4>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e038      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d19c      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x21c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d197      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f908 	bl	80052b8 <SPI_EndRxTxTransaction>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e01d      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005114:	f7fd fafe 	bl	8002714 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4413      	add	r3, r2
 8005122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005124:	f7fd faf6 	bl	8002714 <HAL_GetTick>
 8005128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800512a:	4b39      	ldr	r3, [pc, #228]	; (8005210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	015b      	lsls	r3, r3, #5
 8005130:	0d1b      	lsrs	r3, r3, #20
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800513a:	e054      	b.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d050      	beq.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005144:	f7fd fae6 	bl	8002714 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	429a      	cmp	r2, r3
 8005152:	d902      	bls.n	800515a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d13d      	bne.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005172:	d111      	bne.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517c:	d004      	beq.n	8005188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005186:	d107      	bne.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d10f      	bne.n	80051c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e017      	b.n	8005206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	429a      	cmp	r2, r3
 8005202:	d19b      	bne.n	800513c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000008 	.word	0x20000008

08005214 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005228:	d111      	bne.n	800524e <SPI_EndRxTransaction+0x3a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005232:	d004      	beq.n	800523e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d107      	bne.n	800524e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005256:	d117      	bne.n	8005288 <SPI_EndRxTransaction+0x74>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005260:	d112      	bne.n	8005288 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2200      	movs	r2, #0
 800526a:	2101      	movs	r1, #1
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff ff49 	bl	8005104 <SPI_WaitFlagStateUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e013      	b.n	80052b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff ff36 	bl	8005104 <SPI_WaitFlagStateUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e000      	b.n	80052b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2201      	movs	r2, #1
 80052cc:	2102      	movs	r1, #2
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff ff18 	bl	8005104 <SPI_WaitFlagStateUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e013      	b.n	8005312 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ff05 	bl	8005104 <SPI_WaitFlagStateUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e000      	b.n	8005312 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <__errno>:
 800531c:	4b01      	ldr	r3, [pc, #4]	; (8005324 <__errno+0x8>)
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000014 	.word	0x20000014

08005328 <__libc_init_array>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	2600      	movs	r6, #0
 800532c:	4d0c      	ldr	r5, [pc, #48]	; (8005360 <__libc_init_array+0x38>)
 800532e:	4c0d      	ldr	r4, [pc, #52]	; (8005364 <__libc_init_array+0x3c>)
 8005330:	1b64      	subs	r4, r4, r5
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	42a6      	cmp	r6, r4
 8005336:	d109      	bne.n	800534c <__libc_init_array+0x24>
 8005338:	f004 fc80 	bl	8009c3c <_init>
 800533c:	2600      	movs	r6, #0
 800533e:	4d0a      	ldr	r5, [pc, #40]	; (8005368 <__libc_init_array+0x40>)
 8005340:	4c0a      	ldr	r4, [pc, #40]	; (800536c <__libc_init_array+0x44>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	42a6      	cmp	r6, r4
 8005348:	d105      	bne.n	8005356 <__libc_init_array+0x2e>
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005350:	4798      	blx	r3
 8005352:	3601      	adds	r6, #1
 8005354:	e7ee      	b.n	8005334 <__libc_init_array+0xc>
 8005356:	f855 3b04 	ldr.w	r3, [r5], #4
 800535a:	4798      	blx	r3
 800535c:	3601      	adds	r6, #1
 800535e:	e7f2      	b.n	8005346 <__libc_init_array+0x1e>
 8005360:	0800aea4 	.word	0x0800aea4
 8005364:	0800aea4 	.word	0x0800aea4
 8005368:	0800aea4 	.word	0x0800aea4
 800536c:	0800aea8 	.word	0x0800aea8

08005370 <memset>:
 8005370:	4603      	mov	r3, r0
 8005372:	4402      	add	r2, r0
 8005374:	4293      	cmp	r3, r2
 8005376:	d100      	bne.n	800537a <memset+0xa>
 8005378:	4770      	bx	lr
 800537a:	f803 1b01 	strb.w	r1, [r3], #1
 800537e:	e7f9      	b.n	8005374 <memset+0x4>

08005380 <__cvt>:
 8005380:	2b00      	cmp	r3, #0
 8005382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005386:	461f      	mov	r7, r3
 8005388:	bfbb      	ittet	lt
 800538a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800538e:	461f      	movlt	r7, r3
 8005390:	2300      	movge	r3, #0
 8005392:	232d      	movlt	r3, #45	; 0x2d
 8005394:	b088      	sub	sp, #32
 8005396:	4614      	mov	r4, r2
 8005398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800539a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800539c:	7013      	strb	r3, [r2, #0]
 800539e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80053a4:	f023 0820 	bic.w	r8, r3, #32
 80053a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053ac:	d005      	beq.n	80053ba <__cvt+0x3a>
 80053ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053b2:	d100      	bne.n	80053b6 <__cvt+0x36>
 80053b4:	3501      	adds	r5, #1
 80053b6:	2302      	movs	r3, #2
 80053b8:	e000      	b.n	80053bc <__cvt+0x3c>
 80053ba:	2303      	movs	r3, #3
 80053bc:	aa07      	add	r2, sp, #28
 80053be:	9204      	str	r2, [sp, #16]
 80053c0:	aa06      	add	r2, sp, #24
 80053c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80053c6:	e9cd 3500 	strd	r3, r5, [sp]
 80053ca:	4622      	mov	r2, r4
 80053cc:	463b      	mov	r3, r7
 80053ce:	f001 fd83 	bl	8006ed8 <_dtoa_r>
 80053d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053d6:	4606      	mov	r6, r0
 80053d8:	d102      	bne.n	80053e0 <__cvt+0x60>
 80053da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053dc:	07db      	lsls	r3, r3, #31
 80053de:	d522      	bpl.n	8005426 <__cvt+0xa6>
 80053e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053e4:	eb06 0905 	add.w	r9, r6, r5
 80053e8:	d110      	bne.n	800540c <__cvt+0x8c>
 80053ea:	7833      	ldrb	r3, [r6, #0]
 80053ec:	2b30      	cmp	r3, #48	; 0x30
 80053ee:	d10a      	bne.n	8005406 <__cvt+0x86>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4620      	mov	r0, r4
 80053f6:	4639      	mov	r1, r7
 80053f8:	f7fb fb8a 	bl	8000b10 <__aeabi_dcmpeq>
 80053fc:	b918      	cbnz	r0, 8005406 <__cvt+0x86>
 80053fe:	f1c5 0501 	rsb	r5, r5, #1
 8005402:	f8ca 5000 	str.w	r5, [sl]
 8005406:	f8da 3000 	ldr.w	r3, [sl]
 800540a:	4499      	add	r9, r3
 800540c:	2200      	movs	r2, #0
 800540e:	2300      	movs	r3, #0
 8005410:	4620      	mov	r0, r4
 8005412:	4639      	mov	r1, r7
 8005414:	f7fb fb7c 	bl	8000b10 <__aeabi_dcmpeq>
 8005418:	b108      	cbz	r0, 800541e <__cvt+0x9e>
 800541a:	f8cd 901c 	str.w	r9, [sp, #28]
 800541e:	2230      	movs	r2, #48	; 0x30
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	454b      	cmp	r3, r9
 8005424:	d307      	bcc.n	8005436 <__cvt+0xb6>
 8005426:	4630      	mov	r0, r6
 8005428:	9b07      	ldr	r3, [sp, #28]
 800542a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800542c:	1b9b      	subs	r3, r3, r6
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	b008      	add	sp, #32
 8005432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	9107      	str	r1, [sp, #28]
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e7f0      	b.n	8005420 <__cvt+0xa0>

0800543e <__exponent>:
 800543e:	4603      	mov	r3, r0
 8005440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005442:	2900      	cmp	r1, #0
 8005444:	f803 2b02 	strb.w	r2, [r3], #2
 8005448:	bfb6      	itet	lt
 800544a:	222d      	movlt	r2, #45	; 0x2d
 800544c:	222b      	movge	r2, #43	; 0x2b
 800544e:	4249      	neglt	r1, r1
 8005450:	2909      	cmp	r1, #9
 8005452:	7042      	strb	r2, [r0, #1]
 8005454:	dd2b      	ble.n	80054ae <__exponent+0x70>
 8005456:	f10d 0407 	add.w	r4, sp, #7
 800545a:	46a4      	mov	ip, r4
 800545c:	270a      	movs	r7, #10
 800545e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005462:	460a      	mov	r2, r1
 8005464:	46a6      	mov	lr, r4
 8005466:	fb07 1516 	mls	r5, r7, r6, r1
 800546a:	2a63      	cmp	r2, #99	; 0x63
 800546c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005470:	4631      	mov	r1, r6
 8005472:	f104 34ff 	add.w	r4, r4, #4294967295
 8005476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800547a:	dcf0      	bgt.n	800545e <__exponent+0x20>
 800547c:	3130      	adds	r1, #48	; 0x30
 800547e:	f1ae 0502 	sub.w	r5, lr, #2
 8005482:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005486:	4629      	mov	r1, r5
 8005488:	1c44      	adds	r4, r0, #1
 800548a:	4561      	cmp	r1, ip
 800548c:	d30a      	bcc.n	80054a4 <__exponent+0x66>
 800548e:	f10d 0209 	add.w	r2, sp, #9
 8005492:	eba2 020e 	sub.w	r2, r2, lr
 8005496:	4565      	cmp	r5, ip
 8005498:	bf88      	it	hi
 800549a:	2200      	movhi	r2, #0
 800549c:	4413      	add	r3, r2
 800549e:	1a18      	subs	r0, r3, r0
 80054a0:	b003      	add	sp, #12
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054ac:	e7ed      	b.n	800548a <__exponent+0x4c>
 80054ae:	2330      	movs	r3, #48	; 0x30
 80054b0:	3130      	adds	r1, #48	; 0x30
 80054b2:	7083      	strb	r3, [r0, #2]
 80054b4:	70c1      	strb	r1, [r0, #3]
 80054b6:	1d03      	adds	r3, r0, #4
 80054b8:	e7f1      	b.n	800549e <__exponent+0x60>
	...

080054bc <_printf_float>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	b091      	sub	sp, #68	; 0x44
 80054c2:	460c      	mov	r4, r1
 80054c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80054c8:	4616      	mov	r6, r2
 80054ca:	461f      	mov	r7, r3
 80054cc:	4605      	mov	r5, r0
 80054ce:	f002 fe57 	bl	8008180 <_localeconv_r>
 80054d2:	6803      	ldr	r3, [r0, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	9309      	str	r3, [sp, #36]	; 0x24
 80054d8:	f7fa fe3a 	bl	8000150 <strlen>
 80054dc:	2300      	movs	r3, #0
 80054de:	930e      	str	r3, [sp, #56]	; 0x38
 80054e0:	f8d8 3000 	ldr.w	r3, [r8]
 80054e4:	900a      	str	r0, [sp, #40]	; 0x28
 80054e6:	3307      	adds	r3, #7
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	f103 0208 	add.w	r2, r3, #8
 80054f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054f4:	f8d4 b000 	ldr.w	fp, [r4]
 80054f8:	f8c8 2000 	str.w	r2, [r8]
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005504:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005508:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800550c:	930b      	str	r3, [sp, #44]	; 0x2c
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	4640      	mov	r0, r8
 8005514:	4b9c      	ldr	r3, [pc, #624]	; (8005788 <_printf_float+0x2cc>)
 8005516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005518:	f7fb fb2c 	bl	8000b74 <__aeabi_dcmpun>
 800551c:	bb70      	cbnz	r0, 800557c <_printf_float+0xc0>
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	4640      	mov	r0, r8
 8005524:	4b98      	ldr	r3, [pc, #608]	; (8005788 <_printf_float+0x2cc>)
 8005526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005528:	f7fb fb06 	bl	8000b38 <__aeabi_dcmple>
 800552c:	bb30      	cbnz	r0, 800557c <_printf_float+0xc0>
 800552e:	2200      	movs	r2, #0
 8005530:	2300      	movs	r3, #0
 8005532:	4640      	mov	r0, r8
 8005534:	4651      	mov	r1, sl
 8005536:	f7fb faf5 	bl	8000b24 <__aeabi_dcmplt>
 800553a:	b110      	cbz	r0, 8005542 <_printf_float+0x86>
 800553c:	232d      	movs	r3, #45	; 0x2d
 800553e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005542:	4b92      	ldr	r3, [pc, #584]	; (800578c <_printf_float+0x2d0>)
 8005544:	4892      	ldr	r0, [pc, #584]	; (8005790 <_printf_float+0x2d4>)
 8005546:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800554a:	bf94      	ite	ls
 800554c:	4698      	movls	r8, r3
 800554e:	4680      	movhi	r8, r0
 8005550:	2303      	movs	r3, #3
 8005552:	f04f 0a00 	mov.w	sl, #0
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	f02b 0304 	bic.w	r3, fp, #4
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	4633      	mov	r3, r6
 8005560:	4621      	mov	r1, r4
 8005562:	4628      	mov	r0, r5
 8005564:	9700      	str	r7, [sp, #0]
 8005566:	aa0f      	add	r2, sp, #60	; 0x3c
 8005568:	f000 f9d4 	bl	8005914 <_printf_common>
 800556c:	3001      	adds	r0, #1
 800556e:	f040 8090 	bne.w	8005692 <_printf_float+0x1d6>
 8005572:	f04f 30ff 	mov.w	r0, #4294967295
 8005576:	b011      	add	sp, #68	; 0x44
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	4642      	mov	r2, r8
 800557e:	4653      	mov	r3, sl
 8005580:	4640      	mov	r0, r8
 8005582:	4651      	mov	r1, sl
 8005584:	f7fb faf6 	bl	8000b74 <__aeabi_dcmpun>
 8005588:	b148      	cbz	r0, 800559e <_printf_float+0xe2>
 800558a:	f1ba 0f00 	cmp.w	sl, #0
 800558e:	bfb8      	it	lt
 8005590:	232d      	movlt	r3, #45	; 0x2d
 8005592:	4880      	ldr	r0, [pc, #512]	; (8005794 <_printf_float+0x2d8>)
 8005594:	bfb8      	it	lt
 8005596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800559a:	4b7f      	ldr	r3, [pc, #508]	; (8005798 <_printf_float+0x2dc>)
 800559c:	e7d3      	b.n	8005546 <_printf_float+0x8a>
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	d142      	bne.n	800562e <_printf_float+0x172>
 80055a8:	2306      	movs	r3, #6
 80055aa:	6063      	str	r3, [r4, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	9206      	str	r2, [sp, #24]
 80055b0:	aa0e      	add	r2, sp, #56	; 0x38
 80055b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80055b6:	aa0d      	add	r2, sp, #52	; 0x34
 80055b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80055bc:	9203      	str	r2, [sp, #12]
 80055be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80055c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	4642      	mov	r2, r8
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4628      	mov	r0, r5
 80055d0:	4653      	mov	r3, sl
 80055d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80055d4:	f7ff fed4 	bl	8005380 <__cvt>
 80055d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055da:	4680      	mov	r8, r0
 80055dc:	2947      	cmp	r1, #71	; 0x47
 80055de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055e0:	d108      	bne.n	80055f4 <_printf_float+0x138>
 80055e2:	1cc8      	adds	r0, r1, #3
 80055e4:	db02      	blt.n	80055ec <_printf_float+0x130>
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	4299      	cmp	r1, r3
 80055ea:	dd40      	ble.n	800566e <_printf_float+0x1b2>
 80055ec:	f1a9 0902 	sub.w	r9, r9, #2
 80055f0:	fa5f f989 	uxtb.w	r9, r9
 80055f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055f8:	d81f      	bhi.n	800563a <_printf_float+0x17e>
 80055fa:	464a      	mov	r2, r9
 80055fc:	3901      	subs	r1, #1
 80055fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005602:	910d      	str	r1, [sp, #52]	; 0x34
 8005604:	f7ff ff1b 	bl	800543e <__exponent>
 8005608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800560a:	4682      	mov	sl, r0
 800560c:	1813      	adds	r3, r2, r0
 800560e:	2a01      	cmp	r2, #1
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	dc02      	bgt.n	800561a <_printf_float+0x15e>
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	07d2      	lsls	r2, r2, #31
 8005618:	d501      	bpl.n	800561e <_printf_float+0x162>
 800561a:	3301      	adds	r3, #1
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005622:	2b00      	cmp	r3, #0
 8005624:	d09b      	beq.n	800555e <_printf_float+0xa2>
 8005626:	232d      	movs	r3, #45	; 0x2d
 8005628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800562c:	e797      	b.n	800555e <_printf_float+0xa2>
 800562e:	2947      	cmp	r1, #71	; 0x47
 8005630:	d1bc      	bne.n	80055ac <_printf_float+0xf0>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ba      	bne.n	80055ac <_printf_float+0xf0>
 8005636:	2301      	movs	r3, #1
 8005638:	e7b7      	b.n	80055aa <_printf_float+0xee>
 800563a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800563e:	d118      	bne.n	8005672 <_printf_float+0x1b6>
 8005640:	2900      	cmp	r1, #0
 8005642:	6863      	ldr	r3, [r4, #4]
 8005644:	dd0b      	ble.n	800565e <_printf_float+0x1a2>
 8005646:	6121      	str	r1, [r4, #16]
 8005648:	b913      	cbnz	r3, 8005650 <_printf_float+0x194>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	07d0      	lsls	r0, r2, #31
 800564e:	d502      	bpl.n	8005656 <_printf_float+0x19a>
 8005650:	3301      	adds	r3, #1
 8005652:	440b      	add	r3, r1
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	f04f 0a00 	mov.w	sl, #0
 800565a:	65a1      	str	r1, [r4, #88]	; 0x58
 800565c:	e7df      	b.n	800561e <_printf_float+0x162>
 800565e:	b913      	cbnz	r3, 8005666 <_printf_float+0x1aa>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	07d2      	lsls	r2, r2, #31
 8005664:	d501      	bpl.n	800566a <_printf_float+0x1ae>
 8005666:	3302      	adds	r3, #2
 8005668:	e7f4      	b.n	8005654 <_printf_float+0x198>
 800566a:	2301      	movs	r3, #1
 800566c:	e7f2      	b.n	8005654 <_printf_float+0x198>
 800566e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005674:	4299      	cmp	r1, r3
 8005676:	db05      	blt.n	8005684 <_printf_float+0x1c8>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	6121      	str	r1, [r4, #16]
 800567c:	07d8      	lsls	r0, r3, #31
 800567e:	d5ea      	bpl.n	8005656 <_printf_float+0x19a>
 8005680:	1c4b      	adds	r3, r1, #1
 8005682:	e7e7      	b.n	8005654 <_printf_float+0x198>
 8005684:	2900      	cmp	r1, #0
 8005686:	bfcc      	ite	gt
 8005688:	2201      	movgt	r2, #1
 800568a:	f1c1 0202 	rsble	r2, r1, #2
 800568e:	4413      	add	r3, r2
 8005690:	e7e0      	b.n	8005654 <_printf_float+0x198>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	055a      	lsls	r2, r3, #21
 8005696:	d407      	bmi.n	80056a8 <_printf_float+0x1ec>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	4642      	mov	r2, r8
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	d12b      	bne.n	80056fe <_printf_float+0x242>
 80056a6:	e764      	b.n	8005572 <_printf_float+0xb6>
 80056a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056ac:	f240 80dd 	bls.w	800586a <_printf_float+0x3ae>
 80056b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056b4:	2200      	movs	r2, #0
 80056b6:	2300      	movs	r3, #0
 80056b8:	f7fb fa2a 	bl	8000b10 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d033      	beq.n	8005728 <_printf_float+0x26c>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	4a35      	ldr	r2, [pc, #212]	; (800579c <_printf_float+0x2e0>)
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f af51 	beq.w	8005572 <_printf_float+0xb6>
 80056d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056d4:	429a      	cmp	r2, r3
 80056d6:	db02      	blt.n	80056de <_printf_float+0x222>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07d8      	lsls	r0, r3, #31
 80056dc:	d50f      	bpl.n	80056fe <_printf_float+0x242>
 80056de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f af42 	beq.w	8005572 <_printf_float+0xb6>
 80056ee:	f04f 0800 	mov.w	r8, #0
 80056f2:	f104 091a 	add.w	r9, r4, #26
 80056f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f8:	3b01      	subs	r3, #1
 80056fa:	4543      	cmp	r3, r8
 80056fc:	dc09      	bgt.n	8005712 <_printf_float+0x256>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	079b      	lsls	r3, r3, #30
 8005702:	f100 8102 	bmi.w	800590a <_printf_float+0x44e>
 8005706:	68e0      	ldr	r0, [r4, #12]
 8005708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800570a:	4298      	cmp	r0, r3
 800570c:	bfb8      	it	lt
 800570e:	4618      	movlt	r0, r3
 8005710:	e731      	b.n	8005576 <_printf_float+0xba>
 8005712:	2301      	movs	r3, #1
 8005714:	464a      	mov	r2, r9
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f af28 	beq.w	8005572 <_printf_float+0xb6>
 8005722:	f108 0801 	add.w	r8, r8, #1
 8005726:	e7e6      	b.n	80056f6 <_printf_float+0x23a>
 8005728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	dc38      	bgt.n	80057a0 <_printf_float+0x2e4>
 800572e:	2301      	movs	r3, #1
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <_printf_float+0x2e0>)
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	f43f af1a 	beq.w	8005572 <_printf_float+0xb6>
 800573e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005742:	4313      	orrs	r3, r2
 8005744:	d102      	bne.n	800574c <_printf_float+0x290>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	07d9      	lsls	r1, r3, #31
 800574a:	d5d8      	bpl.n	80056fe <_printf_float+0x242>
 800574c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f af0b 	beq.w	8005572 <_printf_float+0xb6>
 800575c:	f04f 0900 	mov.w	r9, #0
 8005760:	f104 0a1a 	add.w	sl, r4, #26
 8005764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005766:	425b      	negs	r3, r3
 8005768:	454b      	cmp	r3, r9
 800576a:	dc01      	bgt.n	8005770 <_printf_float+0x2b4>
 800576c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576e:	e794      	b.n	800569a <_printf_float+0x1de>
 8005770:	2301      	movs	r3, #1
 8005772:	4652      	mov	r2, sl
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f aef9 	beq.w	8005572 <_printf_float+0xb6>
 8005780:	f109 0901 	add.w	r9, r9, #1
 8005784:	e7ee      	b.n	8005764 <_printf_float+0x2a8>
 8005786:	bf00      	nop
 8005788:	7fefffff 	.word	0x7fefffff
 800578c:	0800aa04 	.word	0x0800aa04
 8005790:	0800aa08 	.word	0x0800aa08
 8005794:	0800aa10 	.word	0x0800aa10
 8005798:	0800aa0c 	.word	0x0800aa0c
 800579c:	0800aa14 	.word	0x0800aa14
 80057a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a4:	429a      	cmp	r2, r3
 80057a6:	bfa8      	it	ge
 80057a8:	461a      	movge	r2, r3
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	4691      	mov	r9, r2
 80057ae:	dc37      	bgt.n	8005820 <_printf_float+0x364>
 80057b0:	f04f 0b00 	mov.w	fp, #0
 80057b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b8:	f104 021a 	add.w	r2, r4, #26
 80057bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057c0:	ebaa 0309 	sub.w	r3, sl, r9
 80057c4:	455b      	cmp	r3, fp
 80057c6:	dc33      	bgt.n	8005830 <_printf_float+0x374>
 80057c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057cc:	429a      	cmp	r2, r3
 80057ce:	db3b      	blt.n	8005848 <_printf_float+0x38c>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07da      	lsls	r2, r3, #31
 80057d4:	d438      	bmi.n	8005848 <_printf_float+0x38c>
 80057d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057da:	eba3 020a 	sub.w	r2, r3, sl
 80057de:	eba3 0901 	sub.w	r9, r3, r1
 80057e2:	4591      	cmp	r9, r2
 80057e4:	bfa8      	it	ge
 80057e6:	4691      	movge	r9, r2
 80057e8:	f1b9 0f00 	cmp.w	r9, #0
 80057ec:	dc34      	bgt.n	8005858 <_printf_float+0x39c>
 80057ee:	f04f 0800 	mov.w	r8, #0
 80057f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f6:	f104 0a1a 	add.w	sl, r4, #26
 80057fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	eba3 0309 	sub.w	r3, r3, r9
 8005804:	4543      	cmp	r3, r8
 8005806:	f77f af7a 	ble.w	80056fe <_printf_float+0x242>
 800580a:	2301      	movs	r3, #1
 800580c:	4652      	mov	r2, sl
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f aeac 	beq.w	8005572 <_printf_float+0xb6>
 800581a:	f108 0801 	add.w	r8, r8, #1
 800581e:	e7ec      	b.n	80057fa <_printf_float+0x33e>
 8005820:	4613      	mov	r3, r2
 8005822:	4631      	mov	r1, r6
 8005824:	4642      	mov	r2, r8
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1c0      	bne.n	80057b0 <_printf_float+0x2f4>
 800582e:	e6a0      	b.n	8005572 <_printf_float+0xb6>
 8005830:	2301      	movs	r3, #1
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	920b      	str	r2, [sp, #44]	; 0x2c
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f ae99 	beq.w	8005572 <_printf_float+0xb6>
 8005840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005842:	f10b 0b01 	add.w	fp, fp, #1
 8005846:	e7b9      	b.n	80057bc <_printf_float+0x300>
 8005848:	4631      	mov	r1, r6
 800584a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	d1bf      	bne.n	80057d6 <_printf_float+0x31a>
 8005856:	e68c      	b.n	8005572 <_printf_float+0xb6>
 8005858:	464b      	mov	r3, r9
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	eb08 020a 	add.w	r2, r8, sl
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d1c2      	bne.n	80057ee <_printf_float+0x332>
 8005868:	e683      	b.n	8005572 <_printf_float+0xb6>
 800586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800586c:	2a01      	cmp	r2, #1
 800586e:	dc01      	bgt.n	8005874 <_printf_float+0x3b8>
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d537      	bpl.n	80058e4 <_printf_float+0x428>
 8005874:	2301      	movs	r3, #1
 8005876:	4642      	mov	r2, r8
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f ae77 	beq.w	8005572 <_printf_float+0xb6>
 8005884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f ae6f 	beq.w	8005572 <_printf_float+0xb6>
 8005894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	f7fb f938 	bl	8000b10 <__aeabi_dcmpeq>
 80058a0:	b9d8      	cbnz	r0, 80058da <_printf_float+0x41e>
 80058a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a4:	f108 0201 	add.w	r2, r8, #1
 80058a8:	3b01      	subs	r3, #1
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d10e      	bne.n	80058d2 <_printf_float+0x416>
 80058b4:	e65d      	b.n	8005572 <_printf_float+0xb6>
 80058b6:	2301      	movs	r3, #1
 80058b8:	464a      	mov	r2, r9
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae56 	beq.w	8005572 <_printf_float+0xb6>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058cc:	3b01      	subs	r3, #1
 80058ce:	4543      	cmp	r3, r8
 80058d0:	dcf1      	bgt.n	80058b6 <_printf_float+0x3fa>
 80058d2:	4653      	mov	r3, sl
 80058d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058d8:	e6e0      	b.n	800569c <_printf_float+0x1e0>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	f104 091a 	add.w	r9, r4, #26
 80058e2:	e7f2      	b.n	80058ca <_printf_float+0x40e>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4642      	mov	r2, r8
 80058e8:	e7df      	b.n	80058aa <_printf_float+0x3ee>
 80058ea:	2301      	movs	r3, #1
 80058ec:	464a      	mov	r2, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f ae3c 	beq.w	8005572 <_printf_float+0xb6>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	4543      	cmp	r3, r8
 8005906:	dcf0      	bgt.n	80058ea <_printf_float+0x42e>
 8005908:	e6fd      	b.n	8005706 <_printf_float+0x24a>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f104 0919 	add.w	r9, r4, #25
 8005912:	e7f4      	b.n	80058fe <_printf_float+0x442>

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	4607      	mov	r7, r0
 8005922:	4293      	cmp	r3, r2
 8005924:	bfb8      	it	lt
 8005926:	4613      	movlt	r3, r2
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800592e:	460c      	mov	r4, r1
 8005930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc28      	bgt.n	80059ae <_printf_common+0x9a>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42d      	bmi.n	80059c8 <_printf_common+0xb4>
 800596c:	4649      	mov	r1, r9
 800596e:	4638      	mov	r0, r7
 8005970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d020      	beq.n	80059bc <_printf_common+0xa8>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	f003 0306 	and.w	r3, r3, #6
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf18      	it	ne
 8005986:	2500      	movne	r5, #0
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	f04f 0600 	mov.w	r6, #0
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	bf08      	it	eq
 8005992:	1aad      	subeq	r5, r5, r2
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	bf08      	it	eq
 8005998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800599c:	4293      	cmp	r3, r2
 800599e:	bfc4      	itt	gt
 80059a0:	1a9b      	subgt	r3, r3, r2
 80059a2:	18ed      	addgt	r5, r5, r3
 80059a4:	341a      	adds	r4, #26
 80059a6:	42b5      	cmp	r5, r6
 80059a8:	d11a      	bne.n	80059e0 <_printf_common+0xcc>
 80059aa:	2000      	movs	r0, #0
 80059ac:	e008      	b.n	80059c0 <_printf_common+0xac>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4652      	mov	r2, sl
 80059b2:	4649      	mov	r1, r9
 80059b4:	4638      	mov	r0, r7
 80059b6:	47c0      	blx	r8
 80059b8:	3001      	adds	r0, #1
 80059ba:	d103      	bne.n	80059c4 <_printf_common+0xb0>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c4:	3501      	adds	r5, #1
 80059c6:	e7c4      	b.n	8005952 <_printf_common+0x3e>
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	18e1      	adds	r1, r4, r3
 80059cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d6:	4422      	add	r2, r4
 80059d8:	3302      	adds	r3, #2
 80059da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059de:	e7c5      	b.n	800596c <_printf_common+0x58>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4622      	mov	r2, r4
 80059e4:	4649      	mov	r1, r9
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d0e6      	beq.n	80059bc <_printf_common+0xa8>
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7d9      	b.n	80059a6 <_printf_common+0x92>
	...

080059f4 <_printf_i>:
 80059f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	7e0f      	ldrb	r7, [r1, #24]
 80059fa:	4691      	mov	r9, r2
 80059fc:	2f78      	cmp	r7, #120	; 0x78
 80059fe:	4680      	mov	r8, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	469a      	mov	sl, r3
 8005a04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a0a:	d807      	bhi.n	8005a1c <_printf_i+0x28>
 8005a0c:	2f62      	cmp	r7, #98	; 0x62
 8005a0e:	d80a      	bhi.n	8005a26 <_printf_i+0x32>
 8005a10:	2f00      	cmp	r7, #0
 8005a12:	f000 80d9 	beq.w	8005bc8 <_printf_i+0x1d4>
 8005a16:	2f58      	cmp	r7, #88	; 0x58
 8005a18:	f000 80a4 	beq.w	8005b64 <_printf_i+0x170>
 8005a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a24:	e03a      	b.n	8005a9c <_printf_i+0xa8>
 8005a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a2a:	2b15      	cmp	r3, #21
 8005a2c:	d8f6      	bhi.n	8005a1c <_printf_i+0x28>
 8005a2e:	a101      	add	r1, pc, #4	; (adr r1, 8005a34 <_printf_i+0x40>)
 8005a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005a1d 	.word	0x08005a1d
 8005a40:	08005a1d 	.word	0x08005a1d
 8005a44:	08005a1d 	.word	0x08005a1d
 8005a48:	08005a1d 	.word	0x08005a1d
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005a1d 	.word	0x08005a1d
 8005a54:	08005a1d 	.word	0x08005a1d
 8005a58:	08005a1d 	.word	0x08005a1d
 8005a5c:	08005a1d 	.word	0x08005a1d
 8005a60:	08005baf 	.word	0x08005baf
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005b91 	.word	0x08005b91
 8005a6c:	08005a1d 	.word	0x08005a1d
 8005a70:	08005a1d 	.word	0x08005a1d
 8005a74:	08005bd1 	.word	0x08005bd1
 8005a78:	08005a1d 	.word	0x08005a1d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a1d 	.word	0x08005a1d
 8005a84:	08005a1d 	.word	0x08005a1d
 8005a88:	08005b99 	.word	0x08005b99
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	1d1a      	adds	r2, r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	602a      	str	r2, [r5, #0]
 8005a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0a4      	b.n	8005bea <_printf_i+0x1f6>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	0606      	lsls	r6, r0, #24
 8005aa6:	f101 0304 	add.w	r3, r1, #4
 8005aaa:	d50a      	bpl.n	8005ac2 <_printf_i+0xce>
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	da03      	bge.n	8005abc <_printf_i+0xc8>
 8005ab4:	232d      	movs	r3, #45	; 0x2d
 8005ab6:	4276      	negs	r6, r6
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	230a      	movs	r3, #10
 8005abe:	485e      	ldr	r0, [pc, #376]	; (8005c38 <_printf_i+0x244>)
 8005ac0:	e019      	b.n	8005af6 <_printf_i+0x102>
 8005ac2:	680e      	ldr	r6, [r1, #0]
 8005ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	bf18      	it	ne
 8005acc:	b236      	sxthne	r6, r6
 8005ace:	e7ef      	b.n	8005ab0 <_printf_i+0xbc>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6029      	str	r1, [r5, #0]
 8005ad8:	0601      	lsls	r1, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xec>
 8005adc:	681e      	ldr	r6, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <_printf_i+0xf2>
 8005ae0:	0646      	lsls	r6, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xe8>
 8005ae4:	881e      	ldrh	r6, [r3, #0]
 8005ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae8:	bf0c      	ite	eq
 8005aea:	2308      	moveq	r3, #8
 8005aec:	230a      	movne	r3, #10
 8005aee:	4852      	ldr	r0, [pc, #328]	; (8005c38 <_printf_i+0x244>)
 8005af0:	2100      	movs	r1, #0
 8005af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af6:	6865      	ldr	r5, [r4, #4]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	bfa8      	it	ge
 8005afc:	6821      	ldrge	r1, [r4, #0]
 8005afe:	60a5      	str	r5, [r4, #8]
 8005b00:	bfa4      	itt	ge
 8005b02:	f021 0104 	bicge.w	r1, r1, #4
 8005b06:	6021      	strge	r1, [r4, #0]
 8005b08:	b90e      	cbnz	r6, 8005b0e <_printf_i+0x11a>
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	d04d      	beq.n	8005baa <_printf_i+0x1b6>
 8005b0e:	4615      	mov	r5, r2
 8005b10:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b14:	fb03 6711 	mls	r7, r3, r1, r6
 8005b18:	5dc7      	ldrb	r7, [r0, r7]
 8005b1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b1e:	4637      	mov	r7, r6
 8005b20:	42bb      	cmp	r3, r7
 8005b22:	460e      	mov	r6, r1
 8005b24:	d9f4      	bls.n	8005b10 <_printf_i+0x11c>
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d10b      	bne.n	8005b42 <_printf_i+0x14e>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07de      	lsls	r6, r3, #31
 8005b2e:	d508      	bpl.n	8005b42 <_printf_i+0x14e>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	6861      	ldr	r1, [r4, #4]
 8005b34:	4299      	cmp	r1, r3
 8005b36:	bfde      	ittt	le
 8005b38:	2330      	movle	r3, #48	; 0x30
 8005b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	6122      	str	r2, [r4, #16]
 8005b46:	464b      	mov	r3, r9
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f8cd a000 	str.w	sl, [sp]
 8005b50:	aa03      	add	r2, sp, #12
 8005b52:	f7ff fedf 	bl	8005914 <_printf_common>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d14c      	bne.n	8005bf4 <_printf_i+0x200>
 8005b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5e:	b004      	add	sp, #16
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	4834      	ldr	r0, [pc, #208]	; (8005c38 <_printf_i+0x244>)
 8005b66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b6a:	6829      	ldr	r1, [r5, #0]
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b72:	6029      	str	r1, [r5, #0]
 8005b74:	061d      	lsls	r5, r3, #24
 8005b76:	d514      	bpl.n	8005ba2 <_printf_i+0x1ae>
 8005b78:	07df      	lsls	r7, r3, #31
 8005b7a:	bf44      	itt	mi
 8005b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b80:	6023      	strmi	r3, [r4, #0]
 8005b82:	b91e      	cbnz	r6, 8005b8c <_printf_i+0x198>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	e7af      	b.n	8005af0 <_printf_i+0xfc>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	f043 0320 	orr.w	r3, r3, #32
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	2378      	movs	r3, #120	; 0x78
 8005b9a:	4828      	ldr	r0, [pc, #160]	; (8005c3c <_printf_i+0x248>)
 8005b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba0:	e7e3      	b.n	8005b6a <_printf_i+0x176>
 8005ba2:	0659      	lsls	r1, r3, #25
 8005ba4:	bf48      	it	mi
 8005ba6:	b2b6      	uxthmi	r6, r6
 8005ba8:	e7e6      	b.n	8005b78 <_printf_i+0x184>
 8005baa:	4615      	mov	r5, r2
 8005bac:	e7bb      	b.n	8005b26 <_printf_i+0x132>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	6826      	ldr	r6, [r4, #0]
 8005bb2:	1d18      	adds	r0, r3, #4
 8005bb4:	6961      	ldr	r1, [r4, #20]
 8005bb6:	6028      	str	r0, [r5, #0]
 8005bb8:	0635      	lsls	r5, r6, #24
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	d501      	bpl.n	8005bc2 <_printf_i+0x1ce>
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	e002      	b.n	8005bc8 <_printf_i+0x1d4>
 8005bc2:	0670      	lsls	r0, r6, #25
 8005bc4:	d5fb      	bpl.n	8005bbe <_printf_i+0x1ca>
 8005bc6:	8019      	strh	r1, [r3, #0]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4615      	mov	r5, r2
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	e7ba      	b.n	8005b46 <_printf_i+0x152>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	1d1a      	adds	r2, r3, #4
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	6862      	ldr	r2, [r4, #4]
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f002 faed 	bl	80081bc <memchr>
 8005be2:	b108      	cbz	r0, 8005be8 <_printf_i+0x1f4>
 8005be4:	1b40      	subs	r0, r0, r5
 8005be6:	6060      	str	r0, [r4, #4]
 8005be8:	6863      	ldr	r3, [r4, #4]
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	2300      	movs	r3, #0
 8005bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf2:	e7a8      	b.n	8005b46 <_printf_i+0x152>
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	47d0      	blx	sl
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d0ab      	beq.n	8005b5a <_printf_i+0x166>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	079b      	lsls	r3, r3, #30
 8005c06:	d413      	bmi.n	8005c30 <_printf_i+0x23c>
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	bfb8      	it	lt
 8005c10:	4618      	movlt	r0, r3
 8005c12:	e7a4      	b.n	8005b5e <_printf_i+0x16a>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4632      	mov	r2, r6
 8005c18:	4649      	mov	r1, r9
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	47d0      	blx	sl
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d09b      	beq.n	8005b5a <_printf_i+0x166>
 8005c22:	3501      	adds	r5, #1
 8005c24:	68e3      	ldr	r3, [r4, #12]
 8005c26:	9903      	ldr	r1, [sp, #12]
 8005c28:	1a5b      	subs	r3, r3, r1
 8005c2a:	42ab      	cmp	r3, r5
 8005c2c:	dcf2      	bgt.n	8005c14 <_printf_i+0x220>
 8005c2e:	e7eb      	b.n	8005c08 <_printf_i+0x214>
 8005c30:	2500      	movs	r5, #0
 8005c32:	f104 0619 	add.w	r6, r4, #25
 8005c36:	e7f5      	b.n	8005c24 <_printf_i+0x230>
 8005c38:	0800aa16 	.word	0x0800aa16
 8005c3c:	0800aa27 	.word	0x0800aa27

08005c40 <_scanf_float>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	b087      	sub	sp, #28
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	688b      	ldr	r3, [r1, #8]
 8005c4a:	4617      	mov	r7, r2
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c52:	bf85      	ittet	hi
 8005c54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c58:	195b      	addhi	r3, r3, r5
 8005c5a:	2300      	movls	r3, #0
 8005c5c:	9302      	strhi	r3, [sp, #8]
 8005c5e:	bf88      	it	hi
 8005c60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c64:	468b      	mov	fp, r1
 8005c66:	f04f 0500 	mov.w	r5, #0
 8005c6a:	bf8c      	ite	hi
 8005c6c:	608b      	strhi	r3, [r1, #8]
 8005c6e:	9302      	strls	r3, [sp, #8]
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	4680      	mov	r8, r0
 8005c74:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c78:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	465e      	mov	r6, fp
 8005c80:	46aa      	mov	sl, r5
 8005c82:	46a9      	mov	r9, r5
 8005c84:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c88:	9501      	str	r5, [sp, #4]
 8005c8a:	68a2      	ldr	r2, [r4, #8]
 8005c8c:	b152      	cbz	r2, 8005ca4 <_scanf_float+0x64>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b4e      	cmp	r3, #78	; 0x4e
 8005c94:	d864      	bhi.n	8005d60 <_scanf_float+0x120>
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d83c      	bhi.n	8005d14 <_scanf_float+0xd4>
 8005c9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c9e:	b2c8      	uxtb	r0, r1
 8005ca0:	280e      	cmp	r0, #14
 8005ca2:	d93a      	bls.n	8005d1a <_scanf_float+0xda>
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	d003      	beq.n	8005cb2 <_scanf_float+0x72>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cb6:	f1ba 0f01 	cmp.w	sl, #1
 8005cba:	f200 8113 	bhi.w	8005ee4 <_scanf_float+0x2a4>
 8005cbe:	455e      	cmp	r6, fp
 8005cc0:	f200 8105 	bhi.w	8005ece <_scanf_float+0x28e>
 8005cc4:	2501      	movs	r5, #1
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	b007      	add	sp, #28
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005cd2:	2a0d      	cmp	r2, #13
 8005cd4:	d8e6      	bhi.n	8005ca4 <_scanf_float+0x64>
 8005cd6:	a101      	add	r1, pc, #4	; (adr r1, 8005cdc <_scanf_float+0x9c>)
 8005cd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cdc:	08005e1b 	.word	0x08005e1b
 8005ce0:	08005ca5 	.word	0x08005ca5
 8005ce4:	08005ca5 	.word	0x08005ca5
 8005ce8:	08005ca5 	.word	0x08005ca5
 8005cec:	08005e7b 	.word	0x08005e7b
 8005cf0:	08005e53 	.word	0x08005e53
 8005cf4:	08005ca5 	.word	0x08005ca5
 8005cf8:	08005ca5 	.word	0x08005ca5
 8005cfc:	08005e29 	.word	0x08005e29
 8005d00:	08005ca5 	.word	0x08005ca5
 8005d04:	08005ca5 	.word	0x08005ca5
 8005d08:	08005ca5 	.word	0x08005ca5
 8005d0c:	08005ca5 	.word	0x08005ca5
 8005d10:	08005de1 	.word	0x08005de1
 8005d14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d18:	e7db      	b.n	8005cd2 <_scanf_float+0x92>
 8005d1a:	290e      	cmp	r1, #14
 8005d1c:	d8c2      	bhi.n	8005ca4 <_scanf_float+0x64>
 8005d1e:	a001      	add	r0, pc, #4	; (adr r0, 8005d24 <_scanf_float+0xe4>)
 8005d20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d24:	08005dd3 	.word	0x08005dd3
 8005d28:	08005ca5 	.word	0x08005ca5
 8005d2c:	08005dd3 	.word	0x08005dd3
 8005d30:	08005e67 	.word	0x08005e67
 8005d34:	08005ca5 	.word	0x08005ca5
 8005d38:	08005d81 	.word	0x08005d81
 8005d3c:	08005dbd 	.word	0x08005dbd
 8005d40:	08005dbd 	.word	0x08005dbd
 8005d44:	08005dbd 	.word	0x08005dbd
 8005d48:	08005dbd 	.word	0x08005dbd
 8005d4c:	08005dbd 	.word	0x08005dbd
 8005d50:	08005dbd 	.word	0x08005dbd
 8005d54:	08005dbd 	.word	0x08005dbd
 8005d58:	08005dbd 	.word	0x08005dbd
 8005d5c:	08005dbd 	.word	0x08005dbd
 8005d60:	2b6e      	cmp	r3, #110	; 0x6e
 8005d62:	d809      	bhi.n	8005d78 <_scanf_float+0x138>
 8005d64:	2b60      	cmp	r3, #96	; 0x60
 8005d66:	d8b2      	bhi.n	8005cce <_scanf_float+0x8e>
 8005d68:	2b54      	cmp	r3, #84	; 0x54
 8005d6a:	d077      	beq.n	8005e5c <_scanf_float+0x21c>
 8005d6c:	2b59      	cmp	r3, #89	; 0x59
 8005d6e:	d199      	bne.n	8005ca4 <_scanf_float+0x64>
 8005d70:	2d07      	cmp	r5, #7
 8005d72:	d197      	bne.n	8005ca4 <_scanf_float+0x64>
 8005d74:	2508      	movs	r5, #8
 8005d76:	e029      	b.n	8005dcc <_scanf_float+0x18c>
 8005d78:	2b74      	cmp	r3, #116	; 0x74
 8005d7a:	d06f      	beq.n	8005e5c <_scanf_float+0x21c>
 8005d7c:	2b79      	cmp	r3, #121	; 0x79
 8005d7e:	e7f6      	b.n	8005d6e <_scanf_float+0x12e>
 8005d80:	6821      	ldr	r1, [r4, #0]
 8005d82:	05c8      	lsls	r0, r1, #23
 8005d84:	d51a      	bpl.n	8005dbc <_scanf_float+0x17c>
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d8c:	6021      	str	r1, [r4, #0]
 8005d8e:	f109 0901 	add.w	r9, r9, #1
 8005d92:	b11b      	cbz	r3, 8005d9c <_scanf_float+0x15c>
 8005d94:	3b01      	subs	r3, #1
 8005d96:	3201      	adds	r2, #1
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	60a2      	str	r2, [r4, #8]
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	3301      	adds	r3, #1
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	f340 8084 	ble.w	8005ebc <_scanf_float+0x27c>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	e766      	b.n	8005c8a <_scanf_float+0x4a>
 8005dbc:	eb1a 0f05 	cmn.w	sl, r5
 8005dc0:	f47f af70 	bne.w	8005ca4 <_scanf_float+0x64>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	f806 3b01 	strb.w	r3, [r6], #1
 8005dd0:	e7e4      	b.n	8005d9c <_scanf_float+0x15c>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	0610      	lsls	r0, r2, #24
 8005dd6:	f57f af65 	bpl.w	8005ca4 <_scanf_float+0x64>
 8005dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dde:	e7f4      	b.n	8005dca <_scanf_float+0x18a>
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	d10e      	bne.n	8005e04 <_scanf_float+0x1c4>
 8005de6:	f1b9 0f00 	cmp.w	r9, #0
 8005dea:	d10e      	bne.n	8005e0a <_scanf_float+0x1ca>
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005df2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005df6:	d108      	bne.n	8005e0a <_scanf_float+0x1ca>
 8005df8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dfc:	f04f 0a01 	mov.w	sl, #1
 8005e00:	6022      	str	r2, [r4, #0]
 8005e02:	e7e3      	b.n	8005dcc <_scanf_float+0x18c>
 8005e04:	f1ba 0f02 	cmp.w	sl, #2
 8005e08:	d055      	beq.n	8005eb6 <_scanf_float+0x276>
 8005e0a:	2d01      	cmp	r5, #1
 8005e0c:	d002      	beq.n	8005e14 <_scanf_float+0x1d4>
 8005e0e:	2d04      	cmp	r5, #4
 8005e10:	f47f af48 	bne.w	8005ca4 <_scanf_float+0x64>
 8005e14:	3501      	adds	r5, #1
 8005e16:	b2ed      	uxtb	r5, r5
 8005e18:	e7d8      	b.n	8005dcc <_scanf_float+0x18c>
 8005e1a:	f1ba 0f01 	cmp.w	sl, #1
 8005e1e:	f47f af41 	bne.w	8005ca4 <_scanf_float+0x64>
 8005e22:	f04f 0a02 	mov.w	sl, #2
 8005e26:	e7d1      	b.n	8005dcc <_scanf_float+0x18c>
 8005e28:	b97d      	cbnz	r5, 8005e4a <_scanf_float+0x20a>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	f47f af3c 	bne.w	8005caa <_scanf_float+0x6a>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e3c:	f47f af39 	bne.w	8005cb2 <_scanf_float+0x72>
 8005e40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e44:	2501      	movs	r5, #1
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	e7c0      	b.n	8005dcc <_scanf_float+0x18c>
 8005e4a:	2d03      	cmp	r5, #3
 8005e4c:	d0e2      	beq.n	8005e14 <_scanf_float+0x1d4>
 8005e4e:	2d05      	cmp	r5, #5
 8005e50:	e7de      	b.n	8005e10 <_scanf_float+0x1d0>
 8005e52:	2d02      	cmp	r5, #2
 8005e54:	f47f af26 	bne.w	8005ca4 <_scanf_float+0x64>
 8005e58:	2503      	movs	r5, #3
 8005e5a:	e7b7      	b.n	8005dcc <_scanf_float+0x18c>
 8005e5c:	2d06      	cmp	r5, #6
 8005e5e:	f47f af21 	bne.w	8005ca4 <_scanf_float+0x64>
 8005e62:	2507      	movs	r5, #7
 8005e64:	e7b2      	b.n	8005dcc <_scanf_float+0x18c>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	0591      	lsls	r1, r2, #22
 8005e6a:	f57f af1b 	bpl.w	8005ca4 <_scanf_float+0x64>
 8005e6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e78:	e7a8      	b.n	8005dcc <_scanf_float+0x18c>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e84:	d006      	beq.n	8005e94 <_scanf_float+0x254>
 8005e86:	0550      	lsls	r0, r2, #21
 8005e88:	f57f af0c 	bpl.w	8005ca4 <_scanf_float+0x64>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	f43f af0f 	beq.w	8005cb2 <_scanf_float+0x72>
 8005e94:	0591      	lsls	r1, r2, #22
 8005e96:	bf58      	it	pl
 8005e98:	9901      	ldrpl	r1, [sp, #4]
 8005e9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e9e:	bf58      	it	pl
 8005ea0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ea4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	bf58      	it	pl
 8005eae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	e78a      	b.n	8005dcc <_scanf_float+0x18c>
 8005eb6:	f04f 0a03 	mov.w	sl, #3
 8005eba:	e787      	b.n	8005dcc <_scanf_float+0x18c>
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ec4:	4798      	blx	r3
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aedf 	beq.w	8005c8a <_scanf_float+0x4a>
 8005ecc:	e6ea      	b.n	8005ca4 <_scanf_float+0x64>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ed2:	463a      	mov	r2, r7
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005eda:	4798      	blx	r3
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e6ec      	b.n	8005cbe <_scanf_float+0x7e>
 8005ee4:	1e6b      	subs	r3, r5, #1
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d825      	bhi.n	8005f36 <_scanf_float+0x2f6>
 8005eea:	2d02      	cmp	r5, #2
 8005eec:	d836      	bhi.n	8005f5c <_scanf_float+0x31c>
 8005eee:	455e      	cmp	r6, fp
 8005ef0:	f67f aee8 	bls.w	8005cc4 <_scanf_float+0x84>
 8005ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ef8:	463a      	mov	r2, r7
 8005efa:	4640      	mov	r0, r8
 8005efc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f00:	4798      	blx	r3
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	e7f1      	b.n	8005eee <_scanf_float+0x2ae>
 8005f0a:	9802      	ldr	r0, [sp, #8]
 8005f0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f14:	463a      	mov	r2, r7
 8005f16:	9002      	str	r0, [sp, #8]
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4798      	blx	r3
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f26:	fa5f fa8a 	uxtb.w	sl, sl
 8005f2a:	f1ba 0f02 	cmp.w	sl, #2
 8005f2e:	d1ec      	bne.n	8005f0a <_scanf_float+0x2ca>
 8005f30:	3d03      	subs	r5, #3
 8005f32:	b2ed      	uxtb	r5, r5
 8005f34:	1b76      	subs	r6, r6, r5
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	05da      	lsls	r2, r3, #23
 8005f3a:	d52f      	bpl.n	8005f9c <_scanf_float+0x35c>
 8005f3c:	055b      	lsls	r3, r3, #21
 8005f3e:	d510      	bpl.n	8005f62 <_scanf_float+0x322>
 8005f40:	455e      	cmp	r6, fp
 8005f42:	f67f aebf 	bls.w	8005cc4 <_scanf_float+0x84>
 8005f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f52:	4798      	blx	r3
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	e7f1      	b.n	8005f40 <_scanf_float+0x300>
 8005f5c:	46aa      	mov	sl, r5
 8005f5e:	9602      	str	r6, [sp, #8]
 8005f60:	e7df      	b.n	8005f22 <_scanf_float+0x2e2>
 8005f62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	2965      	cmp	r1, #101	; 0x65
 8005f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	d00c      	beq.n	8005f90 <_scanf_float+0x350>
 8005f76:	2945      	cmp	r1, #69	; 0x45
 8005f78:	d00a      	beq.n	8005f90 <_scanf_float+0x350>
 8005f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4640      	mov	r0, r8
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	1eb5      	subs	r5, r6, #2
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	463a      	mov	r2, r7
 8005f92:	4640      	mov	r0, r8
 8005f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f98:	4798      	blx	r3
 8005f9a:	462e      	mov	r6, r5
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	f015 0510 	ands.w	r5, r5, #16
 8005fa2:	d155      	bne.n	8006050 <_scanf_float+0x410>
 8005fa4:	7035      	strb	r5, [r6, #0]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d11b      	bne.n	8005fea <_scanf_float+0x3aa>
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	454b      	cmp	r3, r9
 8005fb6:	eba3 0209 	sub.w	r2, r3, r9
 8005fba:	d123      	bne.n	8006004 <_scanf_float+0x3c4>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	f000 fe79 	bl	8006cb8 <_strtod_r>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	f012 0f02 	tst.w	r2, #2
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	d021      	beq.n	800601a <_scanf_float+0x3da>
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	9903      	ldr	r1, [sp, #12]
 8005fda:	600a      	str	r2, [r1, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	e9c3 6700 	strd	r6, r7, [r3]
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60e3      	str	r3, [r4, #12]
 8005fe8:	e66d      	b.n	8005cc6 <_scanf_float+0x86>
 8005fea:	9b04      	ldr	r3, [sp, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0e5      	beq.n	8005fbc <_scanf_float+0x37c>
 8005ff0:	9905      	ldr	r1, [sp, #20]
 8005ff2:	230a      	movs	r3, #10
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	3101      	adds	r1, #1
 8005ffa:	f000 fedf 	bl	8006dbc <_strtol_r>
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	9e05      	ldr	r6, [sp, #20]
 8006002:	1ac2      	subs	r2, r0, r3
 8006004:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006008:	429e      	cmp	r6, r3
 800600a:	bf28      	it	cs
 800600c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006010:	4630      	mov	r0, r6
 8006012:	4910      	ldr	r1, [pc, #64]	; (8006054 <_scanf_float+0x414>)
 8006014:	f000 f826 	bl	8006064 <siprintf>
 8006018:	e7d0      	b.n	8005fbc <_scanf_float+0x37c>
 800601a:	f012 0f04 	tst.w	r2, #4
 800601e:	f103 0204 	add.w	r2, r3, #4
 8006022:	d1d9      	bne.n	8005fd8 <_scanf_float+0x398>
 8006024:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006028:	f8cc 2000 	str.w	r2, [ip]
 800602c:	f8d3 8000 	ldr.w	r8, [r3]
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	f7fa fd9e 	bl	8000b74 <__aeabi_dcmpun>
 8006038:	b128      	cbz	r0, 8006046 <_scanf_float+0x406>
 800603a:	4807      	ldr	r0, [pc, #28]	; (8006058 <_scanf_float+0x418>)
 800603c:	f000 f80e 	bl	800605c <nanf>
 8006040:	f8c8 0000 	str.w	r0, [r8]
 8006044:	e7cd      	b.n	8005fe2 <_scanf_float+0x3a2>
 8006046:	4630      	mov	r0, r6
 8006048:	4639      	mov	r1, r7
 800604a:	f7fa fdf1 	bl	8000c30 <__aeabi_d2f>
 800604e:	e7f7      	b.n	8006040 <_scanf_float+0x400>
 8006050:	2500      	movs	r5, #0
 8006052:	e638      	b.n	8005cc6 <_scanf_float+0x86>
 8006054:	0800aa38 	.word	0x0800aa38
 8006058:	0800ae40 	.word	0x0800ae40

0800605c <nanf>:
 800605c:	4800      	ldr	r0, [pc, #0]	; (8006060 <nanf+0x4>)
 800605e:	4770      	bx	lr
 8006060:	7fc00000 	.word	0x7fc00000

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800606a:	b500      	push	{lr}
 800606c:	b09c      	sub	sp, #112	; 0x70
 800606e:	ab1d      	add	r3, sp, #116	; 0x74
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	9006      	str	r0, [sp, #24]
 8006074:	9107      	str	r1, [sp, #28]
 8006076:	9104      	str	r1, [sp, #16]
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <siprintf+0x38>)
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	a902      	add	r1, sp, #8
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	f002 feb8 	bl	8008dfc <_svfiprintf_r>
 800608c:	2200      	movs	r2, #0
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	; 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000014 	.word	0x20000014
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <sulp>:
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	460f      	mov	r7, r1
 80060aa:	4690      	mov	r8, r2
 80060ac:	f002 fc12 	bl	80088d4 <__ulp>
 80060b0:	4604      	mov	r4, r0
 80060b2:	460d      	mov	r5, r1
 80060b4:	f1b8 0f00 	cmp.w	r8, #0
 80060b8:	d011      	beq.n	80060de <sulp+0x3a>
 80060ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd0b      	ble.n	80060de <sulp+0x3a>
 80060c6:	2400      	movs	r4, #0
 80060c8:	051b      	lsls	r3, r3, #20
 80060ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80060ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80060d2:	4622      	mov	r2, r4
 80060d4:	462b      	mov	r3, r5
 80060d6:	f7fa fab3 	bl	8000640 <__aeabi_dmul>
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080060e8 <_strtod_l>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	469b      	mov	fp, r3
 80060ee:	2300      	movs	r3, #0
 80060f0:	b09f      	sub	sp, #124	; 0x7c
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4b9e      	ldr	r3, [pc, #632]	; (8006370 <_strtod_l+0x288>)
 80060f6:	4682      	mov	sl, r0
 80060f8:	681f      	ldr	r7, [r3, #0]
 80060fa:	460e      	mov	r6, r1
 80060fc:	4638      	mov	r0, r7
 80060fe:	9215      	str	r2, [sp, #84]	; 0x54
 8006100:	f7fa f826 	bl	8000150 <strlen>
 8006104:	f04f 0800 	mov.w	r8, #0
 8006108:	4604      	mov	r4, r0
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	9619      	str	r6, [sp, #100]	; 0x64
 8006110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	2a2b      	cmp	r2, #43	; 0x2b
 8006116:	d04c      	beq.n	80061b2 <_strtod_l+0xca>
 8006118:	d83a      	bhi.n	8006190 <_strtod_l+0xa8>
 800611a:	2a0d      	cmp	r2, #13
 800611c:	d833      	bhi.n	8006186 <_strtod_l+0x9e>
 800611e:	2a08      	cmp	r2, #8
 8006120:	d833      	bhi.n	800618a <_strtod_l+0xa2>
 8006122:	2a00      	cmp	r2, #0
 8006124:	d03d      	beq.n	80061a2 <_strtod_l+0xba>
 8006126:	2300      	movs	r3, #0
 8006128:	930a      	str	r3, [sp, #40]	; 0x28
 800612a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800612c:	782b      	ldrb	r3, [r5, #0]
 800612e:	2b30      	cmp	r3, #48	; 0x30
 8006130:	f040 80aa 	bne.w	8006288 <_strtod_l+0x1a0>
 8006134:	786b      	ldrb	r3, [r5, #1]
 8006136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800613a:	2b58      	cmp	r3, #88	; 0x58
 800613c:	d166      	bne.n	800620c <_strtod_l+0x124>
 800613e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006140:	4650      	mov	r0, sl
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	ab1a      	add	r3, sp, #104	; 0x68
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4a8a      	ldr	r2, [pc, #552]	; (8006374 <_strtod_l+0x28c>)
 800614a:	f8cd b008 	str.w	fp, [sp, #8]
 800614e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006150:	a919      	add	r1, sp, #100	; 0x64
 8006152:	f001 fd17 	bl	8007b84 <__gethex>
 8006156:	f010 0607 	ands.w	r6, r0, #7
 800615a:	4604      	mov	r4, r0
 800615c:	d005      	beq.n	800616a <_strtod_l+0x82>
 800615e:	2e06      	cmp	r6, #6
 8006160:	d129      	bne.n	80061b6 <_strtod_l+0xce>
 8006162:	2300      	movs	r3, #0
 8006164:	3501      	adds	r5, #1
 8006166:	9519      	str	r5, [sp, #100]	; 0x64
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 858a 	bne.w	8006c86 <_strtod_l+0xb9e>
 8006172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006174:	b1d3      	cbz	r3, 80061ac <_strtod_l+0xc4>
 8006176:	4642      	mov	r2, r8
 8006178:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	b01f      	add	sp, #124	; 0x7c
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	2a20      	cmp	r2, #32
 8006188:	d1cd      	bne.n	8006126 <_strtod_l+0x3e>
 800618a:	3301      	adds	r3, #1
 800618c:	9319      	str	r3, [sp, #100]	; 0x64
 800618e:	e7bf      	b.n	8006110 <_strtod_l+0x28>
 8006190:	2a2d      	cmp	r2, #45	; 0x2d
 8006192:	d1c8      	bne.n	8006126 <_strtod_l+0x3e>
 8006194:	2201      	movs	r2, #1
 8006196:	920a      	str	r2, [sp, #40]	; 0x28
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	9219      	str	r2, [sp, #100]	; 0x64
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1c3      	bne.n	800612a <_strtod_l+0x42>
 80061a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a4:	9619      	str	r6, [sp, #100]	; 0x64
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 856b 	bne.w	8006c82 <_strtod_l+0xb9a>
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	e7e4      	b.n	800617c <_strtod_l+0x94>
 80061b2:	2200      	movs	r2, #0
 80061b4:	e7ef      	b.n	8006196 <_strtod_l+0xae>
 80061b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061b8:	b13a      	cbz	r2, 80061ca <_strtod_l+0xe2>
 80061ba:	2135      	movs	r1, #53	; 0x35
 80061bc:	a81c      	add	r0, sp, #112	; 0x70
 80061be:	f002 fc8d 	bl	8008adc <__copybits>
 80061c2:	4650      	mov	r0, sl
 80061c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061c6:	f002 f855 	bl	8008274 <_Bfree>
 80061ca:	3e01      	subs	r6, #1
 80061cc:	2e04      	cmp	r6, #4
 80061ce:	d806      	bhi.n	80061de <_strtod_l+0xf6>
 80061d0:	e8df f006 	tbb	[pc, r6]
 80061d4:	1714030a 	.word	0x1714030a
 80061d8:	0a          	.byte	0x0a
 80061d9:	00          	.byte	0x00
 80061da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80061de:	0721      	lsls	r1, r4, #28
 80061e0:	d5c3      	bpl.n	800616a <_strtod_l+0x82>
 80061e2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80061e6:	e7c0      	b.n	800616a <_strtod_l+0x82>
 80061e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80061ea:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80061ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80061f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80061fa:	e7f0      	b.n	80061de <_strtod_l+0xf6>
 80061fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006378 <_strtod_l+0x290>
 8006200:	e7ed      	b.n	80061de <_strtod_l+0xf6>
 8006202:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006206:	f04f 38ff 	mov.w	r8, #4294967295
 800620a:	e7e8      	b.n	80061de <_strtod_l+0xf6>
 800620c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	9219      	str	r2, [sp, #100]	; 0x64
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b30      	cmp	r3, #48	; 0x30
 8006216:	d0f9      	beq.n	800620c <_strtod_l+0x124>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0a6      	beq.n	800616a <_strtod_l+0x82>
 800621c:	2301      	movs	r3, #1
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006222:	220a      	movs	r2, #10
 8006224:	9308      	str	r3, [sp, #32]
 8006226:	2300      	movs	r3, #0
 8006228:	469b      	mov	fp, r3
 800622a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800622e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006230:	7805      	ldrb	r5, [r0, #0]
 8006232:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006236:	b2d9      	uxtb	r1, r3
 8006238:	2909      	cmp	r1, #9
 800623a:	d927      	bls.n	800628c <_strtod_l+0x1a4>
 800623c:	4622      	mov	r2, r4
 800623e:	4639      	mov	r1, r7
 8006240:	f002 fef2 	bl	8009028 <strncmp>
 8006244:	2800      	cmp	r0, #0
 8006246:	d033      	beq.n	80062b0 <_strtod_l+0x1c8>
 8006248:	2000      	movs	r0, #0
 800624a:	462a      	mov	r2, r5
 800624c:	465c      	mov	r4, fp
 800624e:	4603      	mov	r3, r0
 8006250:	9004      	str	r0, [sp, #16]
 8006252:	2a65      	cmp	r2, #101	; 0x65
 8006254:	d001      	beq.n	800625a <_strtod_l+0x172>
 8006256:	2a45      	cmp	r2, #69	; 0x45
 8006258:	d114      	bne.n	8006284 <_strtod_l+0x19c>
 800625a:	b91c      	cbnz	r4, 8006264 <_strtod_l+0x17c>
 800625c:	9a07      	ldr	r2, [sp, #28]
 800625e:	4302      	orrs	r2, r0
 8006260:	d09f      	beq.n	80061a2 <_strtod_l+0xba>
 8006262:	2400      	movs	r4, #0
 8006264:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006266:	1c72      	adds	r2, r6, #1
 8006268:	9219      	str	r2, [sp, #100]	; 0x64
 800626a:	7872      	ldrb	r2, [r6, #1]
 800626c:	2a2b      	cmp	r2, #43	; 0x2b
 800626e:	d079      	beq.n	8006364 <_strtod_l+0x27c>
 8006270:	2a2d      	cmp	r2, #45	; 0x2d
 8006272:	f000 8083 	beq.w	800637c <_strtod_l+0x294>
 8006276:	2700      	movs	r7, #0
 8006278:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800627c:	2909      	cmp	r1, #9
 800627e:	f240 8083 	bls.w	8006388 <_strtod_l+0x2a0>
 8006282:	9619      	str	r6, [sp, #100]	; 0x64
 8006284:	2500      	movs	r5, #0
 8006286:	e09f      	b.n	80063c8 <_strtod_l+0x2e0>
 8006288:	2300      	movs	r3, #0
 800628a:	e7c8      	b.n	800621e <_strtod_l+0x136>
 800628c:	f1bb 0f08 	cmp.w	fp, #8
 8006290:	bfd5      	itete	le
 8006292:	9906      	ldrle	r1, [sp, #24]
 8006294:	9905      	ldrgt	r1, [sp, #20]
 8006296:	fb02 3301 	mlale	r3, r2, r1, r3
 800629a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800629e:	f100 0001 	add.w	r0, r0, #1
 80062a2:	bfd4      	ite	le
 80062a4:	9306      	strle	r3, [sp, #24]
 80062a6:	9305      	strgt	r3, [sp, #20]
 80062a8:	f10b 0b01 	add.w	fp, fp, #1
 80062ac:	9019      	str	r0, [sp, #100]	; 0x64
 80062ae:	e7be      	b.n	800622e <_strtod_l+0x146>
 80062b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062b2:	191a      	adds	r2, r3, r4
 80062b4:	9219      	str	r2, [sp, #100]	; 0x64
 80062b6:	5d1a      	ldrb	r2, [r3, r4]
 80062b8:	f1bb 0f00 	cmp.w	fp, #0
 80062bc:	d036      	beq.n	800632c <_strtod_l+0x244>
 80062be:	465c      	mov	r4, fp
 80062c0:	9004      	str	r0, [sp, #16]
 80062c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	d912      	bls.n	80062f0 <_strtod_l+0x208>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e7c1      	b.n	8006252 <_strtod_l+0x16a>
 80062ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062d0:	3001      	adds	r0, #1
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	9219      	str	r2, [sp, #100]	; 0x64
 80062d6:	785a      	ldrb	r2, [r3, #1]
 80062d8:	2a30      	cmp	r2, #48	; 0x30
 80062da:	d0f8      	beq.n	80062ce <_strtod_l+0x1e6>
 80062dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	f200 84d5 	bhi.w	8006c90 <_strtod_l+0xba8>
 80062e6:	9004      	str	r0, [sp, #16]
 80062e8:	2000      	movs	r0, #0
 80062ea:	4604      	mov	r4, r0
 80062ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	3a30      	subs	r2, #48	; 0x30
 80062f2:	f100 0301 	add.w	r3, r0, #1
 80062f6:	d013      	beq.n	8006320 <_strtod_l+0x238>
 80062f8:	9904      	ldr	r1, [sp, #16]
 80062fa:	1905      	adds	r5, r0, r4
 80062fc:	4419      	add	r1, r3
 80062fe:	9104      	str	r1, [sp, #16]
 8006300:	4623      	mov	r3, r4
 8006302:	210a      	movs	r1, #10
 8006304:	42ab      	cmp	r3, r5
 8006306:	d113      	bne.n	8006330 <_strtod_l+0x248>
 8006308:	1823      	adds	r3, r4, r0
 800630a:	2b08      	cmp	r3, #8
 800630c:	f104 0401 	add.w	r4, r4, #1
 8006310:	4404      	add	r4, r0
 8006312:	dc1b      	bgt.n	800634c <_strtod_l+0x264>
 8006314:	230a      	movs	r3, #10
 8006316:	9906      	ldr	r1, [sp, #24]
 8006318:	fb03 2301 	mla	r3, r3, r1, r2
 800631c:	9306      	str	r3, [sp, #24]
 800631e:	2300      	movs	r3, #0
 8006320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006322:	4618      	mov	r0, r3
 8006324:	1c51      	adds	r1, r2, #1
 8006326:	9119      	str	r1, [sp, #100]	; 0x64
 8006328:	7852      	ldrb	r2, [r2, #1]
 800632a:	e7ca      	b.n	80062c2 <_strtod_l+0x1da>
 800632c:	4658      	mov	r0, fp
 800632e:	e7d3      	b.n	80062d8 <_strtod_l+0x1f0>
 8006330:	2b08      	cmp	r3, #8
 8006332:	dc04      	bgt.n	800633e <_strtod_l+0x256>
 8006334:	9f06      	ldr	r7, [sp, #24]
 8006336:	434f      	muls	r7, r1
 8006338:	9706      	str	r7, [sp, #24]
 800633a:	3301      	adds	r3, #1
 800633c:	e7e2      	b.n	8006304 <_strtod_l+0x21c>
 800633e:	1c5f      	adds	r7, r3, #1
 8006340:	2f10      	cmp	r7, #16
 8006342:	bfde      	ittt	le
 8006344:	9f05      	ldrle	r7, [sp, #20]
 8006346:	434f      	mulle	r7, r1
 8006348:	9705      	strle	r7, [sp, #20]
 800634a:	e7f6      	b.n	800633a <_strtod_l+0x252>
 800634c:	2c10      	cmp	r4, #16
 800634e:	bfdf      	itttt	le
 8006350:	230a      	movle	r3, #10
 8006352:	9905      	ldrle	r1, [sp, #20]
 8006354:	fb03 2301 	mlale	r3, r3, r1, r2
 8006358:	9305      	strle	r3, [sp, #20]
 800635a:	e7e0      	b.n	800631e <_strtod_l+0x236>
 800635c:	2300      	movs	r3, #0
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	2301      	movs	r3, #1
 8006362:	e77b      	b.n	800625c <_strtod_l+0x174>
 8006364:	2700      	movs	r7, #0
 8006366:	1cb2      	adds	r2, r6, #2
 8006368:	9219      	str	r2, [sp, #100]	; 0x64
 800636a:	78b2      	ldrb	r2, [r6, #2]
 800636c:	e784      	b.n	8006278 <_strtod_l+0x190>
 800636e:	bf00      	nop
 8006370:	0800ac88 	.word	0x0800ac88
 8006374:	0800aa40 	.word	0x0800aa40
 8006378:	7ff00000 	.word	0x7ff00000
 800637c:	2701      	movs	r7, #1
 800637e:	e7f2      	b.n	8006366 <_strtod_l+0x27e>
 8006380:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006382:	1c51      	adds	r1, r2, #1
 8006384:	9119      	str	r1, [sp, #100]	; 0x64
 8006386:	7852      	ldrb	r2, [r2, #1]
 8006388:	2a30      	cmp	r2, #48	; 0x30
 800638a:	d0f9      	beq.n	8006380 <_strtod_l+0x298>
 800638c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006390:	2908      	cmp	r1, #8
 8006392:	f63f af77 	bhi.w	8006284 <_strtod_l+0x19c>
 8006396:	f04f 0e0a 	mov.w	lr, #10
 800639a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800639e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063a0:	9209      	str	r2, [sp, #36]	; 0x24
 80063a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063a4:	1c51      	adds	r1, r2, #1
 80063a6:	9119      	str	r1, [sp, #100]	; 0x64
 80063a8:	7852      	ldrb	r2, [r2, #1]
 80063aa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80063ae:	2d09      	cmp	r5, #9
 80063b0:	d935      	bls.n	800641e <_strtod_l+0x336>
 80063b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063b4:	1b49      	subs	r1, r1, r5
 80063b6:	2908      	cmp	r1, #8
 80063b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80063bc:	dc02      	bgt.n	80063c4 <_strtod_l+0x2dc>
 80063be:	4565      	cmp	r5, ip
 80063c0:	bfa8      	it	ge
 80063c2:	4665      	movge	r5, ip
 80063c4:	b107      	cbz	r7, 80063c8 <_strtod_l+0x2e0>
 80063c6:	426d      	negs	r5, r5
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d14c      	bne.n	8006466 <_strtod_l+0x37e>
 80063cc:	9907      	ldr	r1, [sp, #28]
 80063ce:	4301      	orrs	r1, r0
 80063d0:	f47f aecb 	bne.w	800616a <_strtod_l+0x82>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f aee4 	bne.w	80061a2 <_strtod_l+0xba>
 80063da:	2a69      	cmp	r2, #105	; 0x69
 80063dc:	d026      	beq.n	800642c <_strtod_l+0x344>
 80063de:	dc23      	bgt.n	8006428 <_strtod_l+0x340>
 80063e0:	2a49      	cmp	r2, #73	; 0x49
 80063e2:	d023      	beq.n	800642c <_strtod_l+0x344>
 80063e4:	2a4e      	cmp	r2, #78	; 0x4e
 80063e6:	f47f aedc 	bne.w	80061a2 <_strtod_l+0xba>
 80063ea:	499d      	ldr	r1, [pc, #628]	; (8006660 <_strtod_l+0x578>)
 80063ec:	a819      	add	r0, sp, #100	; 0x64
 80063ee:	f001 fe17 	bl	8008020 <__match>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f aed5 	beq.w	80061a2 <_strtod_l+0xba>
 80063f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b28      	cmp	r3, #40	; 0x28
 80063fe:	d12c      	bne.n	800645a <_strtod_l+0x372>
 8006400:	4998      	ldr	r1, [pc, #608]	; (8006664 <_strtod_l+0x57c>)
 8006402:	aa1c      	add	r2, sp, #112	; 0x70
 8006404:	a819      	add	r0, sp, #100	; 0x64
 8006406:	f001 fe1f 	bl	8008048 <__hexnan>
 800640a:	2805      	cmp	r0, #5
 800640c:	d125      	bne.n	800645a <_strtod_l+0x372>
 800640e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006410:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006414:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006418:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800641c:	e6a5      	b.n	800616a <_strtod_l+0x82>
 800641e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006422:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006426:	e7bc      	b.n	80063a2 <_strtod_l+0x2ba>
 8006428:	2a6e      	cmp	r2, #110	; 0x6e
 800642a:	e7dc      	b.n	80063e6 <_strtod_l+0x2fe>
 800642c:	498e      	ldr	r1, [pc, #568]	; (8006668 <_strtod_l+0x580>)
 800642e:	a819      	add	r0, sp, #100	; 0x64
 8006430:	f001 fdf6 	bl	8008020 <__match>
 8006434:	2800      	cmp	r0, #0
 8006436:	f43f aeb4 	beq.w	80061a2 <_strtod_l+0xba>
 800643a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800643c:	498b      	ldr	r1, [pc, #556]	; (800666c <_strtod_l+0x584>)
 800643e:	3b01      	subs	r3, #1
 8006440:	a819      	add	r0, sp, #100	; 0x64
 8006442:	9319      	str	r3, [sp, #100]	; 0x64
 8006444:	f001 fdec 	bl	8008020 <__match>
 8006448:	b910      	cbnz	r0, 8006450 <_strtod_l+0x368>
 800644a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800644c:	3301      	adds	r3, #1
 800644e:	9319      	str	r3, [sp, #100]	; 0x64
 8006450:	f04f 0800 	mov.w	r8, #0
 8006454:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006670 <_strtod_l+0x588>
 8006458:	e687      	b.n	800616a <_strtod_l+0x82>
 800645a:	4886      	ldr	r0, [pc, #536]	; (8006674 <_strtod_l+0x58c>)
 800645c:	f002 fdce 	bl	8008ffc <nan>
 8006460:	4680      	mov	r8, r0
 8006462:	4689      	mov	r9, r1
 8006464:	e681      	b.n	800616a <_strtod_l+0x82>
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	f1bb 0f00 	cmp.w	fp, #0
 800646c:	bf08      	it	eq
 800646e:	46a3      	moveq	fp, r4
 8006470:	1aeb      	subs	r3, r5, r3
 8006472:	2c10      	cmp	r4, #16
 8006474:	9806      	ldr	r0, [sp, #24]
 8006476:	4626      	mov	r6, r4
 8006478:	9307      	str	r3, [sp, #28]
 800647a:	bfa8      	it	ge
 800647c:	2610      	movge	r6, #16
 800647e:	f7fa f865 	bl	800054c <__aeabi_ui2d>
 8006482:	2c09      	cmp	r4, #9
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	dd13      	ble.n	80064b2 <_strtod_l+0x3ca>
 800648a:	4b7b      	ldr	r3, [pc, #492]	; (8006678 <_strtod_l+0x590>)
 800648c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006490:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006494:	f7fa f8d4 	bl	8000640 <__aeabi_dmul>
 8006498:	4680      	mov	r8, r0
 800649a:	9805      	ldr	r0, [sp, #20]
 800649c:	4689      	mov	r9, r1
 800649e:	f7fa f855 	bl	800054c <__aeabi_ui2d>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7f9 ff13 	bl	80002d4 <__adddf3>
 80064ae:	4680      	mov	r8, r0
 80064b0:	4689      	mov	r9, r1
 80064b2:	2c0f      	cmp	r4, #15
 80064b4:	dc36      	bgt.n	8006524 <_strtod_l+0x43c>
 80064b6:	9b07      	ldr	r3, [sp, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f43f ae56 	beq.w	800616a <_strtod_l+0x82>
 80064be:	dd22      	ble.n	8006506 <_strtod_l+0x41e>
 80064c0:	2b16      	cmp	r3, #22
 80064c2:	dc09      	bgt.n	80064d8 <_strtod_l+0x3f0>
 80064c4:	496c      	ldr	r1, [pc, #432]	; (8006678 <_strtod_l+0x590>)
 80064c6:	4642      	mov	r2, r8
 80064c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064cc:	464b      	mov	r3, r9
 80064ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d2:	f7fa f8b5 	bl	8000640 <__aeabi_dmul>
 80064d6:	e7c3      	b.n	8006460 <_strtod_l+0x378>
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80064de:	4293      	cmp	r3, r2
 80064e0:	db20      	blt.n	8006524 <_strtod_l+0x43c>
 80064e2:	4d65      	ldr	r5, [pc, #404]	; (8006678 <_strtod_l+0x590>)
 80064e4:	f1c4 040f 	rsb	r4, r4, #15
 80064e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80064ec:	4642      	mov	r2, r8
 80064ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f2:	464b      	mov	r3, r9
 80064f4:	f7fa f8a4 	bl	8000640 <__aeabi_dmul>
 80064f8:	9b07      	ldr	r3, [sp, #28]
 80064fa:	1b1c      	subs	r4, r3, r4
 80064fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006504:	e7e5      	b.n	80064d2 <_strtod_l+0x3ea>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	3316      	adds	r3, #22
 800650a:	db0b      	blt.n	8006524 <_strtod_l+0x43c>
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	4640      	mov	r0, r8
 8006510:	1b5d      	subs	r5, r3, r5
 8006512:	4b59      	ldr	r3, [pc, #356]	; (8006678 <_strtod_l+0x590>)
 8006514:	4649      	mov	r1, r9
 8006516:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800651a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800651e:	f7fa f9b9 	bl	8000894 <__aeabi_ddiv>
 8006522:	e79d      	b.n	8006460 <_strtod_l+0x378>
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	1ba6      	subs	r6, r4, r6
 8006528:	441e      	add	r6, r3
 800652a:	2e00      	cmp	r6, #0
 800652c:	dd74      	ble.n	8006618 <_strtod_l+0x530>
 800652e:	f016 030f 	ands.w	r3, r6, #15
 8006532:	d00a      	beq.n	800654a <_strtod_l+0x462>
 8006534:	4950      	ldr	r1, [pc, #320]	; (8006678 <_strtod_l+0x590>)
 8006536:	4642      	mov	r2, r8
 8006538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800653c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006540:	464b      	mov	r3, r9
 8006542:	f7fa f87d 	bl	8000640 <__aeabi_dmul>
 8006546:	4680      	mov	r8, r0
 8006548:	4689      	mov	r9, r1
 800654a:	f036 060f 	bics.w	r6, r6, #15
 800654e:	d052      	beq.n	80065f6 <_strtod_l+0x50e>
 8006550:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006554:	dd27      	ble.n	80065a6 <_strtod_l+0x4be>
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	f8cd b010 	str.w	fp, [sp, #16]
 800655e:	f8cd b020 	str.w	fp, [sp, #32]
 8006562:	f8cd b018 	str.w	fp, [sp, #24]
 8006566:	2322      	movs	r3, #34	; 0x22
 8006568:	f04f 0800 	mov.w	r8, #0
 800656c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006670 <_strtod_l+0x588>
 8006570:	f8ca 3000 	str.w	r3, [sl]
 8006574:	9b08      	ldr	r3, [sp, #32]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f43f adf7 	beq.w	800616a <_strtod_l+0x82>
 800657c:	4650      	mov	r0, sl
 800657e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006580:	f001 fe78 	bl	8008274 <_Bfree>
 8006584:	4650      	mov	r0, sl
 8006586:	9906      	ldr	r1, [sp, #24]
 8006588:	f001 fe74 	bl	8008274 <_Bfree>
 800658c:	4650      	mov	r0, sl
 800658e:	9904      	ldr	r1, [sp, #16]
 8006590:	f001 fe70 	bl	8008274 <_Bfree>
 8006594:	4650      	mov	r0, sl
 8006596:	9908      	ldr	r1, [sp, #32]
 8006598:	f001 fe6c 	bl	8008274 <_Bfree>
 800659c:	4659      	mov	r1, fp
 800659e:	4650      	mov	r0, sl
 80065a0:	f001 fe68 	bl	8008274 <_Bfree>
 80065a4:	e5e1      	b.n	800616a <_strtod_l+0x82>
 80065a6:	4b35      	ldr	r3, [pc, #212]	; (800667c <_strtod_l+0x594>)
 80065a8:	4640      	mov	r0, r8
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	2300      	movs	r3, #0
 80065ae:	4649      	mov	r1, r9
 80065b0:	461f      	mov	r7, r3
 80065b2:	1136      	asrs	r6, r6, #4
 80065b4:	2e01      	cmp	r6, #1
 80065b6:	dc21      	bgt.n	80065fc <_strtod_l+0x514>
 80065b8:	b10b      	cbz	r3, 80065be <_strtod_l+0x4d6>
 80065ba:	4680      	mov	r8, r0
 80065bc:	4689      	mov	r9, r1
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <_strtod_l+0x594>)
 80065c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80065c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80065c8:	4642      	mov	r2, r8
 80065ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ce:	464b      	mov	r3, r9
 80065d0:	f7fa f836 	bl	8000640 <__aeabi_dmul>
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <_strtod_l+0x588>)
 80065d6:	460a      	mov	r2, r1
 80065d8:	400b      	ands	r3, r1
 80065da:	4929      	ldr	r1, [pc, #164]	; (8006680 <_strtod_l+0x598>)
 80065dc:	4680      	mov	r8, r0
 80065de:	428b      	cmp	r3, r1
 80065e0:	d8b9      	bhi.n	8006556 <_strtod_l+0x46e>
 80065e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80065e6:	428b      	cmp	r3, r1
 80065e8:	bf86      	itte	hi
 80065ea:	f04f 38ff 	movhi.w	r8, #4294967295
 80065ee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006684 <_strtod_l+0x59c>
 80065f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80065f6:	2300      	movs	r3, #0
 80065f8:	9305      	str	r3, [sp, #20]
 80065fa:	e07f      	b.n	80066fc <_strtod_l+0x614>
 80065fc:	07f2      	lsls	r2, r6, #31
 80065fe:	d505      	bpl.n	800660c <_strtod_l+0x524>
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7fa f81b 	bl	8000640 <__aeabi_dmul>
 800660a:	2301      	movs	r3, #1
 800660c:	9a05      	ldr	r2, [sp, #20]
 800660e:	3701      	adds	r7, #1
 8006610:	3208      	adds	r2, #8
 8006612:	1076      	asrs	r6, r6, #1
 8006614:	9205      	str	r2, [sp, #20]
 8006616:	e7cd      	b.n	80065b4 <_strtod_l+0x4cc>
 8006618:	d0ed      	beq.n	80065f6 <_strtod_l+0x50e>
 800661a:	4276      	negs	r6, r6
 800661c:	f016 020f 	ands.w	r2, r6, #15
 8006620:	d00a      	beq.n	8006638 <_strtod_l+0x550>
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <_strtod_l+0x590>)
 8006624:	4640      	mov	r0, r8
 8006626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800662a:	4649      	mov	r1, r9
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7fa f930 	bl	8000894 <__aeabi_ddiv>
 8006634:	4680      	mov	r8, r0
 8006636:	4689      	mov	r9, r1
 8006638:	1136      	asrs	r6, r6, #4
 800663a:	d0dc      	beq.n	80065f6 <_strtod_l+0x50e>
 800663c:	2e1f      	cmp	r6, #31
 800663e:	dd23      	ble.n	8006688 <_strtod_l+0x5a0>
 8006640:	f04f 0b00 	mov.w	fp, #0
 8006644:	f8cd b010 	str.w	fp, [sp, #16]
 8006648:	f8cd b020 	str.w	fp, [sp, #32]
 800664c:	f8cd b018 	str.w	fp, [sp, #24]
 8006650:	2322      	movs	r3, #34	; 0x22
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	f04f 0900 	mov.w	r9, #0
 800665a:	f8ca 3000 	str.w	r3, [sl]
 800665e:	e789      	b.n	8006574 <_strtod_l+0x48c>
 8006660:	0800aa11 	.word	0x0800aa11
 8006664:	0800aa54 	.word	0x0800aa54
 8006668:	0800aa09 	.word	0x0800aa09
 800666c:	0800ab94 	.word	0x0800ab94
 8006670:	7ff00000 	.word	0x7ff00000
 8006674:	0800ae40 	.word	0x0800ae40
 8006678:	0800ad20 	.word	0x0800ad20
 800667c:	0800acf8 	.word	0x0800acf8
 8006680:	7ca00000 	.word	0x7ca00000
 8006684:	7fefffff 	.word	0x7fefffff
 8006688:	f016 0310 	ands.w	r3, r6, #16
 800668c:	bf18      	it	ne
 800668e:	236a      	movne	r3, #106	; 0x6a
 8006690:	4640      	mov	r0, r8
 8006692:	9305      	str	r3, [sp, #20]
 8006694:	4649      	mov	r1, r9
 8006696:	2300      	movs	r3, #0
 8006698:	4fb0      	ldr	r7, [pc, #704]	; (800695c <_strtod_l+0x874>)
 800669a:	07f2      	lsls	r2, r6, #31
 800669c:	d504      	bpl.n	80066a8 <_strtod_l+0x5c0>
 800669e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a2:	f7f9 ffcd 	bl	8000640 <__aeabi_dmul>
 80066a6:	2301      	movs	r3, #1
 80066a8:	1076      	asrs	r6, r6, #1
 80066aa:	f107 0708 	add.w	r7, r7, #8
 80066ae:	d1f4      	bne.n	800669a <_strtod_l+0x5b2>
 80066b0:	b10b      	cbz	r3, 80066b6 <_strtod_l+0x5ce>
 80066b2:	4680      	mov	r8, r0
 80066b4:	4689      	mov	r9, r1
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	b1c3      	cbz	r3, 80066ec <_strtod_l+0x604>
 80066ba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80066be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	4649      	mov	r1, r9
 80066c6:	dd11      	ble.n	80066ec <_strtod_l+0x604>
 80066c8:	2b1f      	cmp	r3, #31
 80066ca:	f340 8127 	ble.w	800691c <_strtod_l+0x834>
 80066ce:	2b34      	cmp	r3, #52	; 0x34
 80066d0:	bfd8      	it	le
 80066d2:	f04f 33ff 	movle.w	r3, #4294967295
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	bfcf      	iteee	gt
 80066dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80066e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80066e4:	fa03 f202 	lslle.w	r2, r3, r2
 80066e8:	ea02 0901 	andle.w	r9, r2, r1
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa0c 	bl	8000b10 <__aeabi_dcmpeq>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1a1      	bne.n	8006640 <_strtod_l+0x558>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	465a      	mov	r2, fp
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4650      	mov	r0, sl
 8006704:	4623      	mov	r3, r4
 8006706:	9908      	ldr	r1, [sp, #32]
 8006708:	f001 fe1c 	bl	8008344 <__s2b>
 800670c:	9008      	str	r0, [sp, #32]
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f af21 	beq.w	8006556 <_strtod_l+0x46e>
 8006714:	9b04      	ldr	r3, [sp, #16]
 8006716:	f04f 0b00 	mov.w	fp, #0
 800671a:	1b5d      	subs	r5, r3, r5
 800671c:	9b07      	ldr	r3, [sp, #28]
 800671e:	f8cd b010 	str.w	fp, [sp, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	bfb4      	ite	lt
 8006726:	462b      	movlt	r3, r5
 8006728:	2300      	movge	r3, #0
 800672a:	930e      	str	r3, [sp, #56]	; 0x38
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006732:	9314      	str	r3, [sp, #80]	; 0x50
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	4650      	mov	r0, sl
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	f001 fd5b 	bl	80081f4 <_Balloc>
 800673e:	9006      	str	r0, [sp, #24]
 8006740:	2800      	cmp	r0, #0
 8006742:	f43f af10 	beq.w	8006566 <_strtod_l+0x47e>
 8006746:	9b08      	ldr	r3, [sp, #32]
 8006748:	300c      	adds	r0, #12
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	f103 010c 	add.w	r1, r3, #12
 8006750:	3202      	adds	r2, #2
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	f001 fd40 	bl	80081d8 <memcpy>
 8006758:	ab1c      	add	r3, sp, #112	; 0x70
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	ab1b      	add	r3, sp, #108	; 0x6c
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	4650      	mov	r0, sl
 8006766:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800676a:	f002 f92d 	bl	80089c8 <__d2b>
 800676e:	901a      	str	r0, [sp, #104]	; 0x68
 8006770:	2800      	cmp	r0, #0
 8006772:	f43f aef8 	beq.w	8006566 <_strtod_l+0x47e>
 8006776:	2101      	movs	r1, #1
 8006778:	4650      	mov	r0, sl
 800677a:	f001 fe7b 	bl	8008474 <__i2b>
 800677e:	4603      	mov	r3, r0
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	2800      	cmp	r0, #0
 8006784:	f43f aeef 	beq.w	8006566 <_strtod_l+0x47e>
 8006788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800678a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800678c:	2d00      	cmp	r5, #0
 800678e:	bfab      	itete	ge
 8006790:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006792:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006794:	18ee      	addge	r6, r5, r3
 8006796:	1b5c      	sublt	r4, r3, r5
 8006798:	9b05      	ldr	r3, [sp, #20]
 800679a:	bfa8      	it	ge
 800679c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800679e:	eba5 0503 	sub.w	r5, r5, r3
 80067a2:	4415      	add	r5, r2
 80067a4:	4b6e      	ldr	r3, [pc, #440]	; (8006960 <_strtod_l+0x878>)
 80067a6:	f105 35ff 	add.w	r5, r5, #4294967295
 80067aa:	bfb8      	it	lt
 80067ac:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80067ae:	429d      	cmp	r5, r3
 80067b0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067b4:	f280 80c4 	bge.w	8006940 <_strtod_l+0x858>
 80067b8:	1b5b      	subs	r3, r3, r5
 80067ba:	2b1f      	cmp	r3, #31
 80067bc:	f04f 0701 	mov.w	r7, #1
 80067c0:	eba2 0203 	sub.w	r2, r2, r3
 80067c4:	f300 80b1 	bgt.w	800692a <_strtod_l+0x842>
 80067c8:	2500      	movs	r5, #0
 80067ca:	fa07 f303 	lsl.w	r3, r7, r3
 80067ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80067d0:	18b7      	adds	r7, r6, r2
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	42be      	cmp	r6, r7
 80067d6:	4414      	add	r4, r2
 80067d8:	441c      	add	r4, r3
 80067da:	4633      	mov	r3, r6
 80067dc:	bfa8      	it	ge
 80067de:	463b      	movge	r3, r7
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	bfa8      	it	ge
 80067e4:	4623      	movge	r3, r4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfc2      	ittt	gt
 80067ea:	1aff      	subgt	r7, r7, r3
 80067ec:	1ae4      	subgt	r4, r4, r3
 80067ee:	1af6      	subgt	r6, r6, r3
 80067f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd17      	ble.n	8006826 <_strtod_l+0x73e>
 80067f6:	461a      	mov	r2, r3
 80067f8:	4650      	mov	r0, sl
 80067fa:	9904      	ldr	r1, [sp, #16]
 80067fc:	f001 fef8 	bl	80085f0 <__pow5mult>
 8006800:	9004      	str	r0, [sp, #16]
 8006802:	2800      	cmp	r0, #0
 8006804:	f43f aeaf 	beq.w	8006566 <_strtod_l+0x47e>
 8006808:	4601      	mov	r1, r0
 800680a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800680c:	4650      	mov	r0, sl
 800680e:	f001 fe47 	bl	80084a0 <__multiply>
 8006812:	9009      	str	r0, [sp, #36]	; 0x24
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f aea6 	beq.w	8006566 <_strtod_l+0x47e>
 800681a:	4650      	mov	r0, sl
 800681c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800681e:	f001 fd29 	bl	8008274 <_Bfree>
 8006822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006824:	931a      	str	r3, [sp, #104]	; 0x68
 8006826:	2f00      	cmp	r7, #0
 8006828:	f300 808e 	bgt.w	8006948 <_strtod_l+0x860>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dd08      	ble.n	8006844 <_strtod_l+0x75c>
 8006832:	4650      	mov	r0, sl
 8006834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006836:	9906      	ldr	r1, [sp, #24]
 8006838:	f001 feda 	bl	80085f0 <__pow5mult>
 800683c:	9006      	str	r0, [sp, #24]
 800683e:	2800      	cmp	r0, #0
 8006840:	f43f ae91 	beq.w	8006566 <_strtod_l+0x47e>
 8006844:	2c00      	cmp	r4, #0
 8006846:	dd08      	ble.n	800685a <_strtod_l+0x772>
 8006848:	4622      	mov	r2, r4
 800684a:	4650      	mov	r0, sl
 800684c:	9906      	ldr	r1, [sp, #24]
 800684e:	f001 ff29 	bl	80086a4 <__lshift>
 8006852:	9006      	str	r0, [sp, #24]
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f ae86 	beq.w	8006566 <_strtod_l+0x47e>
 800685a:	2e00      	cmp	r6, #0
 800685c:	dd08      	ble.n	8006870 <_strtod_l+0x788>
 800685e:	4632      	mov	r2, r6
 8006860:	4650      	mov	r0, sl
 8006862:	9904      	ldr	r1, [sp, #16]
 8006864:	f001 ff1e 	bl	80086a4 <__lshift>
 8006868:	9004      	str	r0, [sp, #16]
 800686a:	2800      	cmp	r0, #0
 800686c:	f43f ae7b 	beq.w	8006566 <_strtod_l+0x47e>
 8006870:	4650      	mov	r0, sl
 8006872:	9a06      	ldr	r2, [sp, #24]
 8006874:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006876:	f001 ffa1 	bl	80087bc <__mdiff>
 800687a:	4683      	mov	fp, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	f43f ae72 	beq.w	8006566 <_strtod_l+0x47e>
 8006882:	2400      	movs	r4, #0
 8006884:	68c3      	ldr	r3, [r0, #12]
 8006886:	9904      	ldr	r1, [sp, #16]
 8006888:	60c4      	str	r4, [r0, #12]
 800688a:	930b      	str	r3, [sp, #44]	; 0x2c
 800688c:	f001 ff7a 	bl	8008784 <__mcmp>
 8006890:	42a0      	cmp	r0, r4
 8006892:	da6b      	bge.n	800696c <_strtod_l+0x884>
 8006894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006896:	ea53 0308 	orrs.w	r3, r3, r8
 800689a:	f040 8091 	bne.w	80069c0 <_strtod_l+0x8d8>
 800689e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 808c 	bne.w	80069c0 <_strtod_l+0x8d8>
 80068a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ac:	0d1b      	lsrs	r3, r3, #20
 80068ae:	051b      	lsls	r3, r3, #20
 80068b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068b4:	f240 8084 	bls.w	80069c0 <_strtod_l+0x8d8>
 80068b8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80068bc:	b91b      	cbnz	r3, 80068c6 <_strtod_l+0x7de>
 80068be:	f8db 3010 	ldr.w	r3, [fp, #16]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	dd7c      	ble.n	80069c0 <_strtod_l+0x8d8>
 80068c6:	4659      	mov	r1, fp
 80068c8:	2201      	movs	r2, #1
 80068ca:	4650      	mov	r0, sl
 80068cc:	f001 feea 	bl	80086a4 <__lshift>
 80068d0:	9904      	ldr	r1, [sp, #16]
 80068d2:	4683      	mov	fp, r0
 80068d4:	f001 ff56 	bl	8008784 <__mcmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	dd71      	ble.n	80069c0 <_strtod_l+0x8d8>
 80068dc:	9905      	ldr	r1, [sp, #20]
 80068de:	464b      	mov	r3, r9
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <_strtod_l+0x87c>)
 80068e2:	2900      	cmp	r1, #0
 80068e4:	f000 808c 	beq.w	8006a00 <_strtod_l+0x918>
 80068e8:	ea02 0109 	and.w	r1, r2, r9
 80068ec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80068f0:	f300 8086 	bgt.w	8006a00 <_strtod_l+0x918>
 80068f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80068f8:	f77f aeaa 	ble.w	8006650 <_strtod_l+0x568>
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	4b19      	ldr	r3, [pc, #100]	; (8006968 <_strtod_l+0x880>)
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fe9c 	bl	8000640 <__aeabi_dmul>
 8006908:	460b      	mov	r3, r1
 800690a:	4303      	orrs	r3, r0
 800690c:	bf08      	it	eq
 800690e:	2322      	moveq	r3, #34	; 0x22
 8006910:	4680      	mov	r8, r0
 8006912:	4689      	mov	r9, r1
 8006914:	bf08      	it	eq
 8006916:	f8ca 3000 	streq.w	r3, [sl]
 800691a:	e62f      	b.n	800657c <_strtod_l+0x494>
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	ea03 0808 	and.w	r8, r3, r8
 8006928:	e6e0      	b.n	80066ec <_strtod_l+0x604>
 800692a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800692e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006932:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006936:	35e2      	adds	r5, #226	; 0xe2
 8006938:	fa07 f505 	lsl.w	r5, r7, r5
 800693c:	970f      	str	r7, [sp, #60]	; 0x3c
 800693e:	e747      	b.n	80067d0 <_strtod_l+0x6e8>
 8006940:	2301      	movs	r3, #1
 8006942:	2500      	movs	r5, #0
 8006944:	930f      	str	r3, [sp, #60]	; 0x3c
 8006946:	e743      	b.n	80067d0 <_strtod_l+0x6e8>
 8006948:	463a      	mov	r2, r7
 800694a:	4650      	mov	r0, sl
 800694c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800694e:	f001 fea9 	bl	80086a4 <__lshift>
 8006952:	901a      	str	r0, [sp, #104]	; 0x68
 8006954:	2800      	cmp	r0, #0
 8006956:	f47f af69 	bne.w	800682c <_strtod_l+0x744>
 800695a:	e604      	b.n	8006566 <_strtod_l+0x47e>
 800695c:	0800aa68 	.word	0x0800aa68
 8006960:	fffffc02 	.word	0xfffffc02
 8006964:	7ff00000 	.word	0x7ff00000
 8006968:	39500000 	.word	0x39500000
 800696c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006970:	d165      	bne.n	8006a3e <_strtod_l+0x956>
 8006972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006974:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006978:	b35a      	cbz	r2, 80069d2 <_strtod_l+0x8ea>
 800697a:	4a99      	ldr	r2, [pc, #612]	; (8006be0 <_strtod_l+0xaf8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d12b      	bne.n	80069d8 <_strtod_l+0x8f0>
 8006980:	9b05      	ldr	r3, [sp, #20]
 8006982:	4641      	mov	r1, r8
 8006984:	b303      	cbz	r3, 80069c8 <_strtod_l+0x8e0>
 8006986:	464a      	mov	r2, r9
 8006988:	4b96      	ldr	r3, [pc, #600]	; (8006be4 <_strtod_l+0xafc>)
 800698a:	4013      	ands	r3, r2
 800698c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	d81b      	bhi.n	80069ce <_strtod_l+0x8e6>
 8006996:	0d1b      	lsrs	r3, r3, #20
 8006998:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d119      	bne.n	80069d8 <_strtod_l+0x8f0>
 80069a4:	4b90      	ldr	r3, [pc, #576]	; (8006be8 <_strtod_l+0xb00>)
 80069a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d102      	bne.n	80069b2 <_strtod_l+0x8ca>
 80069ac:	3101      	adds	r1, #1
 80069ae:	f43f adda 	beq.w	8006566 <_strtod_l+0x47e>
 80069b2:	f04f 0800 	mov.w	r8, #0
 80069b6:	4b8b      	ldr	r3, [pc, #556]	; (8006be4 <_strtod_l+0xafc>)
 80069b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ba:	401a      	ands	r2, r3
 80069bc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80069c0:	9b05      	ldr	r3, [sp, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d19a      	bne.n	80068fc <_strtod_l+0x814>
 80069c6:	e5d9      	b.n	800657c <_strtod_l+0x494>
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295
 80069cc:	e7e8      	b.n	80069a0 <_strtod_l+0x8b8>
 80069ce:	4613      	mov	r3, r2
 80069d0:	e7e6      	b.n	80069a0 <_strtod_l+0x8b8>
 80069d2:	ea53 0308 	orrs.w	r3, r3, r8
 80069d6:	d081      	beq.n	80068dc <_strtod_l+0x7f4>
 80069d8:	b1e5      	cbz	r5, 8006a14 <_strtod_l+0x92c>
 80069da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069dc:	421d      	tst	r5, r3
 80069de:	d0ef      	beq.n	80069c0 <_strtod_l+0x8d8>
 80069e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	9a05      	ldr	r2, [sp, #20]
 80069e8:	b1c3      	cbz	r3, 8006a1c <_strtod_l+0x934>
 80069ea:	f7ff fb5b 	bl	80060a4 <sulp>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069f6:	f7f9 fc6d 	bl	80002d4 <__adddf3>
 80069fa:	4680      	mov	r8, r0
 80069fc:	4689      	mov	r9, r1
 80069fe:	e7df      	b.n	80069c0 <_strtod_l+0x8d8>
 8006a00:	4013      	ands	r3, r2
 8006a02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a06:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006a0a:	f04f 38ff 	mov.w	r8, #4294967295
 8006a0e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006a12:	e7d5      	b.n	80069c0 <_strtod_l+0x8d8>
 8006a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a16:	ea13 0f08 	tst.w	r3, r8
 8006a1a:	e7e0      	b.n	80069de <_strtod_l+0x8f6>
 8006a1c:	f7ff fb42 	bl	80060a4 <sulp>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a28:	f7f9 fc52 	bl	80002d0 <__aeabi_dsub>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4680      	mov	r8, r0
 8006a32:	4689      	mov	r9, r1
 8006a34:	f7fa f86c 	bl	8000b10 <__aeabi_dcmpeq>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d0c1      	beq.n	80069c0 <_strtod_l+0x8d8>
 8006a3c:	e608      	b.n	8006650 <_strtod_l+0x568>
 8006a3e:	4658      	mov	r0, fp
 8006a40:	9904      	ldr	r1, [sp, #16]
 8006a42:	f002 f81d 	bl	8008a80 <__ratio>
 8006a46:	2200      	movs	r2, #0
 8006a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460f      	mov	r7, r1
 8006a50:	f7fa f872 	bl	8000b38 <__aeabi_dcmple>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d070      	beq.n	8006b3a <_strtod_l+0xa52>
 8006a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d042      	beq.n	8006ae4 <_strtod_l+0x9fc>
 8006a5e:	2600      	movs	r6, #0
 8006a60:	4f62      	ldr	r7, [pc, #392]	; (8006bec <_strtod_l+0xb04>)
 8006a62:	4d62      	ldr	r5, [pc, #392]	; (8006bec <_strtod_l+0xb04>)
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	0d1b      	lsrs	r3, r3, #20
 8006a6c:	051b      	lsls	r3, r3, #20
 8006a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a72:	4b5f      	ldr	r3, [pc, #380]	; (8006bf0 <_strtod_l+0xb08>)
 8006a74:	429a      	cmp	r2, r3
 8006a76:	f040 80c3 	bne.w	8006c00 <_strtod_l+0xb18>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006a82:	4649      	mov	r1, r9
 8006a84:	f001 ff26 	bl	80088d4 <__ulp>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 fdd6 	bl	8000640 <__aeabi_dmul>
 8006a94:	4642      	mov	r2, r8
 8006a96:	464b      	mov	r3, r9
 8006a98:	f7f9 fc1c 	bl	80002d4 <__adddf3>
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4951      	ldr	r1, [pc, #324]	; (8006be4 <_strtod_l+0xafc>)
 8006aa0:	4a54      	ldr	r2, [pc, #336]	; (8006bf4 <_strtod_l+0xb0c>)
 8006aa2:	4019      	ands	r1, r3
 8006aa4:	4291      	cmp	r1, r2
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	d95d      	bls.n	8006b66 <_strtod_l+0xa7e>
 8006aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aac:	4b4e      	ldr	r3, [pc, #312]	; (8006be8 <_strtod_l+0xb00>)
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d103      	bne.n	8006aba <_strtod_l+0x9d2>
 8006ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f43f ad56 	beq.w	8006566 <_strtod_l+0x47e>
 8006aba:	f04f 38ff 	mov.w	r8, #4294967295
 8006abe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006be8 <_strtod_l+0xb00>
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ac6:	f001 fbd5 	bl	8008274 <_Bfree>
 8006aca:	4650      	mov	r0, sl
 8006acc:	9906      	ldr	r1, [sp, #24]
 8006ace:	f001 fbd1 	bl	8008274 <_Bfree>
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	9904      	ldr	r1, [sp, #16]
 8006ad6:	f001 fbcd 	bl	8008274 <_Bfree>
 8006ada:	4659      	mov	r1, fp
 8006adc:	4650      	mov	r0, sl
 8006ade:	f001 fbc9 	bl	8008274 <_Bfree>
 8006ae2:	e627      	b.n	8006734 <_strtod_l+0x64c>
 8006ae4:	f1b8 0f00 	cmp.w	r8, #0
 8006ae8:	d119      	bne.n	8006b1e <_strtod_l+0xa36>
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af0:	b9e3      	cbnz	r3, 8006b2c <_strtod_l+0xa44>
 8006af2:	2200      	movs	r2, #0
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	4b3c      	ldr	r3, [pc, #240]	; (8006bec <_strtod_l+0xb04>)
 8006afa:	f7fa f813 	bl	8000b24 <__aeabi_dcmplt>
 8006afe:	b9c8      	cbnz	r0, 8006b34 <_strtod_l+0xa4c>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <_strtod_l+0xb10>)
 8006b08:	f7f9 fd9a 	bl	8000640 <__aeabi_dmul>
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b14:	9416      	str	r4, [sp, #88]	; 0x58
 8006b16:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b18:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006b1c:	e7a2      	b.n	8006a64 <_strtod_l+0x97c>
 8006b1e:	f1b8 0f01 	cmp.w	r8, #1
 8006b22:	d103      	bne.n	8006b2c <_strtod_l+0xa44>
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f43f ad92 	beq.w	8006650 <_strtod_l+0x568>
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	2400      	movs	r4, #0
 8006b30:	4f32      	ldr	r7, [pc, #200]	; (8006bfc <_strtod_l+0xb14>)
 8006b32:	e796      	b.n	8006a62 <_strtod_l+0x97a>
 8006b34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006b36:	4d30      	ldr	r5, [pc, #192]	; (8006bf8 <_strtod_l+0xb10>)
 8006b38:	e7ea      	b.n	8006b10 <_strtod_l+0xa28>
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <_strtod_l+0xb10>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4630      	mov	r0, r6
 8006b40:	4639      	mov	r1, r7
 8006b42:	f7f9 fd7d 	bl	8000640 <__aeabi_dmul>
 8006b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	b933      	cbnz	r3, 8006b5c <_strtod_l+0xa74>
 8006b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b52:	9010      	str	r0, [sp, #64]	; 0x40
 8006b54:	9311      	str	r3, [sp, #68]	; 0x44
 8006b56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b5a:	e783      	b.n	8006a64 <_strtod_l+0x97c>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006b64:	e7f7      	b.n	8006b56 <_strtod_l+0xa6e>
 8006b66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1a8      	bne.n	8006ac2 <_strtod_l+0x9da>
 8006b70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1a1      	bne.n	8006ac2 <_strtod_l+0x9da>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7fa fa4f 	bl	8001024 <__aeabi_d2lz>
 8006b86:	f7f9 fd2d 	bl	80005e4 <__aeabi_l2d>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 fb9d 	bl	80002d0 <__aeabi_dsub>
 8006b96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b9c:	ea43 0308 	orr.w	r3, r3, r8
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	d066      	beq.n	8006c76 <_strtod_l+0xb8e>
 8006ba8:	a309      	add	r3, pc, #36	; (adr r3, 8006bd0 <_strtod_l+0xae8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 ffb9 	bl	8000b24 <__aeabi_dcmplt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f47f ace2 	bne.w	800657c <_strtod_l+0x494>
 8006bb8:	a307      	add	r3, pc, #28	; (adr r3, 8006bd8 <_strtod_l+0xaf0>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 ffcd 	bl	8000b60 <__aeabi_dcmpgt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f af7b 	beq.w	8006ac2 <_strtod_l+0x9da>
 8006bcc:	e4d6      	b.n	800657c <_strtod_l+0x494>
 8006bce:	bf00      	nop
 8006bd0:	94a03595 	.word	0x94a03595
 8006bd4:	3fdfffff 	.word	0x3fdfffff
 8006bd8:	35afe535 	.word	0x35afe535
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	000fffff 	.word	0x000fffff
 8006be4:	7ff00000 	.word	0x7ff00000
 8006be8:	7fefffff 	.word	0x7fefffff
 8006bec:	3ff00000 	.word	0x3ff00000
 8006bf0:	7fe00000 	.word	0x7fe00000
 8006bf4:	7c9fffff 	.word	0x7c9fffff
 8006bf8:	3fe00000 	.word	0x3fe00000
 8006bfc:	bff00000 	.word	0xbff00000
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	b313      	cbz	r3, 8006c4a <_strtod_l+0xb62>
 8006c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c0a:	d81e      	bhi.n	8006c4a <_strtod_l+0xb62>
 8006c0c:	a326      	add	r3, pc, #152	; (adr r3, 8006ca8 <_strtod_l+0xbc0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 ff8f 	bl	8000b38 <__aeabi_dcmple>
 8006c1a:	b190      	cbz	r0, 8006c42 <_strtod_l+0xb5a>
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7f9 ffe6 	bl	8000bf0 <__aeabi_d2uiz>
 8006c24:	2801      	cmp	r0, #1
 8006c26:	bf38      	it	cc
 8006c28:	2001      	movcc	r0, #1
 8006c2a:	f7f9 fc8f 	bl	800054c <__aeabi_ui2d>
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	b9d3      	cbnz	r3, 8006c6c <_strtod_l+0xb84>
 8006c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c3a:	9012      	str	r0, [sp, #72]	; 0x48
 8006c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c44:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c48:	1a9f      	subs	r7, r3, r2
 8006c4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c4e:	f001 fe41 	bl	80088d4 <__ulp>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4630      	mov	r0, r6
 8006c58:	4639      	mov	r1, r7
 8006c5a:	f7f9 fcf1 	bl	8000640 <__aeabi_dmul>
 8006c5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c62:	f7f9 fb37 	bl	80002d4 <__adddf3>
 8006c66:	4680      	mov	r8, r0
 8006c68:	4689      	mov	r9, r1
 8006c6a:	e77e      	b.n	8006b6a <_strtod_l+0xa82>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006c74:	e7e3      	b.n	8006c3e <_strtod_l+0xb56>
 8006c76:	a30e      	add	r3, pc, #56	; (adr r3, 8006cb0 <_strtod_l+0xbc8>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 ff52 	bl	8000b24 <__aeabi_dcmplt>
 8006c80:	e7a1      	b.n	8006bc6 <_strtod_l+0xade>
 8006c82:	2300      	movs	r3, #0
 8006c84:	930a      	str	r3, [sp, #40]	; 0x28
 8006c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	f7ff ba71 	b.w	8006172 <_strtod_l+0x8a>
 8006c90:	2a65      	cmp	r2, #101	; 0x65
 8006c92:	f43f ab63 	beq.w	800635c <_strtod_l+0x274>
 8006c96:	2a45      	cmp	r2, #69	; 0x45
 8006c98:	f43f ab60 	beq.w	800635c <_strtod_l+0x274>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f7ff bb95 	b.w	80063cc <_strtod_l+0x2e4>
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	ffc00000 	.word	0xffc00000
 8006cac:	41dfffff 	.word	0x41dfffff
 8006cb0:	94a03595 	.word	0x94a03595
 8006cb4:	3fcfffff 	.word	0x3fcfffff

08006cb8 <_strtod_r>:
 8006cb8:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <_strtod_r+0x8>)
 8006cba:	f7ff ba15 	b.w	80060e8 <_strtod_l>
 8006cbe:	bf00      	nop
 8006cc0:	2000007c 	.word	0x2000007c

08006cc4 <_strtol_l.constprop.0>:
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cca:	4680      	mov	r8, r0
 8006ccc:	d001      	beq.n	8006cd2 <_strtol_l.constprop.0+0xe>
 8006cce:	2b24      	cmp	r3, #36	; 0x24
 8006cd0:	d906      	bls.n	8006ce0 <_strtol_l.constprop.0+0x1c>
 8006cd2:	f7fe fb23 	bl	800531c <__errno>
 8006cd6:	2316      	movs	r3, #22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	4f35      	ldr	r7, [pc, #212]	; (8006db8 <_strtol_l.constprop.0+0xf4>)
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cea:	5de6      	ldrb	r6, [r4, r7]
 8006cec:	f016 0608 	ands.w	r6, r6, #8
 8006cf0:	d1f8      	bne.n	8006ce4 <_strtol_l.constprop.0+0x20>
 8006cf2:	2c2d      	cmp	r4, #45	; 0x2d
 8006cf4:	d12f      	bne.n	8006d56 <_strtol_l.constprop.0+0x92>
 8006cf6:	2601      	movs	r6, #1
 8006cf8:	782c      	ldrb	r4, [r5, #0]
 8006cfa:	1c85      	adds	r5, r0, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d057      	beq.n	8006db0 <_strtol_l.constprop.0+0xec>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d109      	bne.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006d04:	2c30      	cmp	r4, #48	; 0x30
 8006d06:	d107      	bne.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006d08:	7828      	ldrb	r0, [r5, #0]
 8006d0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006d0e:	2858      	cmp	r0, #88	; 0x58
 8006d10:	d149      	bne.n	8006da6 <_strtol_l.constprop.0+0xe2>
 8006d12:	2310      	movs	r3, #16
 8006d14:	786c      	ldrb	r4, [r5, #1]
 8006d16:	3502      	adds	r5, #2
 8006d18:	2700      	movs	r7, #0
 8006d1a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006d1e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006d22:	fbbe f9f3 	udiv	r9, lr, r3
 8006d26:	4638      	mov	r0, r7
 8006d28:	fb03 ea19 	mls	sl, r3, r9, lr
 8006d2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d30:	f1bc 0f09 	cmp.w	ip, #9
 8006d34:	d814      	bhi.n	8006d60 <_strtol_l.constprop.0+0x9c>
 8006d36:	4664      	mov	r4, ip
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	dd22      	ble.n	8006d82 <_strtol_l.constprop.0+0xbe>
 8006d3c:	2f00      	cmp	r7, #0
 8006d3e:	db1d      	blt.n	8006d7c <_strtol_l.constprop.0+0xb8>
 8006d40:	4581      	cmp	r9, r0
 8006d42:	d31b      	bcc.n	8006d7c <_strtol_l.constprop.0+0xb8>
 8006d44:	d101      	bne.n	8006d4a <_strtol_l.constprop.0+0x86>
 8006d46:	45a2      	cmp	sl, r4
 8006d48:	db18      	blt.n	8006d7c <_strtol_l.constprop.0+0xb8>
 8006d4a:	2701      	movs	r7, #1
 8006d4c:	fb00 4003 	mla	r0, r0, r3, r4
 8006d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d54:	e7ea      	b.n	8006d2c <_strtol_l.constprop.0+0x68>
 8006d56:	2c2b      	cmp	r4, #43	; 0x2b
 8006d58:	bf04      	itt	eq
 8006d5a:	782c      	ldrbeq	r4, [r5, #0]
 8006d5c:	1c85      	addeq	r5, r0, #2
 8006d5e:	e7cd      	b.n	8006cfc <_strtol_l.constprop.0+0x38>
 8006d60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d64:	f1bc 0f19 	cmp.w	ip, #25
 8006d68:	d801      	bhi.n	8006d6e <_strtol_l.constprop.0+0xaa>
 8006d6a:	3c37      	subs	r4, #55	; 0x37
 8006d6c:	e7e4      	b.n	8006d38 <_strtol_l.constprop.0+0x74>
 8006d6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d72:	f1bc 0f19 	cmp.w	ip, #25
 8006d76:	d804      	bhi.n	8006d82 <_strtol_l.constprop.0+0xbe>
 8006d78:	3c57      	subs	r4, #87	; 0x57
 8006d7a:	e7dd      	b.n	8006d38 <_strtol_l.constprop.0+0x74>
 8006d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d80:	e7e6      	b.n	8006d50 <_strtol_l.constprop.0+0x8c>
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	da07      	bge.n	8006d96 <_strtol_l.constprop.0+0xd2>
 8006d86:	2322      	movs	r3, #34	; 0x22
 8006d88:	4670      	mov	r0, lr
 8006d8a:	f8c8 3000 	str.w	r3, [r8]
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	d0a4      	beq.n	8006cdc <_strtol_l.constprop.0+0x18>
 8006d92:	1e69      	subs	r1, r5, #1
 8006d94:	e005      	b.n	8006da2 <_strtol_l.constprop.0+0xde>
 8006d96:	b106      	cbz	r6, 8006d9a <_strtol_l.constprop.0+0xd6>
 8006d98:	4240      	negs	r0, r0
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d09e      	beq.n	8006cdc <_strtol_l.constprop.0+0x18>
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d1f7      	bne.n	8006d92 <_strtol_l.constprop.0+0xce>
 8006da2:	6011      	str	r1, [r2, #0]
 8006da4:	e79a      	b.n	8006cdc <_strtol_l.constprop.0+0x18>
 8006da6:	2430      	movs	r4, #48	; 0x30
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1b5      	bne.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006dac:	2308      	movs	r3, #8
 8006dae:	e7b3      	b.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006db0:	2c30      	cmp	r4, #48	; 0x30
 8006db2:	d0a9      	beq.n	8006d08 <_strtol_l.constprop.0+0x44>
 8006db4:	230a      	movs	r3, #10
 8006db6:	e7af      	b.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006db8:	0800aa91 	.word	0x0800aa91

08006dbc <_strtol_r>:
 8006dbc:	f7ff bf82 	b.w	8006cc4 <_strtol_l.constprop.0>

08006dc0 <quorem>:
 8006dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	6903      	ldr	r3, [r0, #16]
 8006dc6:	690c      	ldr	r4, [r1, #16]
 8006dc8:	4607      	mov	r7, r0
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	f2c0 8082 	blt.w	8006ed4 <quorem+0x114>
 8006dd0:	3c01      	subs	r4, #1
 8006dd2:	f100 0514 	add.w	r5, r0, #20
 8006dd6:	f101 0814 	add.w	r8, r1, #20
 8006dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de8:	3301      	adds	r3, #1
 8006dea:	429a      	cmp	r2, r3
 8006dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8006df0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006df4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006df8:	d331      	bcc.n	8006e5e <quorem+0x9e>
 8006dfa:	f04f 0e00 	mov.w	lr, #0
 8006dfe:	4640      	mov	r0, r8
 8006e00:	46ac      	mov	ip, r5
 8006e02:	46f2      	mov	sl, lr
 8006e04:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e08:	b293      	uxth	r3, r2
 8006e0a:	fb06 e303 	mla	r3, r6, r3, lr
 8006e0e:	0c12      	lsrs	r2, r2, #16
 8006e10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	fb06 e202 	mla	r2, r6, r2, lr
 8006e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e1e:	f8dc a000 	ldr.w	sl, [ip]
 8006e22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e26:	fa1f fa8a 	uxth.w	sl, sl
 8006e2a:	4453      	add	r3, sl
 8006e2c:	f8dc a000 	ldr.w	sl, [ip]
 8006e30:	b292      	uxth	r2, r2
 8006e32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e40:	4581      	cmp	r9, r0
 8006e42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e46:	f84c 3b04 	str.w	r3, [ip], #4
 8006e4a:	d2db      	bcs.n	8006e04 <quorem+0x44>
 8006e4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e50:	b92b      	cbnz	r3, 8006e5e <quorem+0x9e>
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	429d      	cmp	r5, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	d32f      	bcc.n	8006ebc <quorem+0xfc>
 8006e5c:	613c      	str	r4, [r7, #16]
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f001 fc90 	bl	8008784 <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	db25      	blt.n	8006eb4 <quorem+0xf4>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f04f 0c00 	mov.w	ip, #0
 8006e6e:	3601      	adds	r6, #1
 8006e70:	f858 1b04 	ldr.w	r1, [r8], #4
 8006e74:	f8d0 e000 	ldr.w	lr, [r0]
 8006e78:	b28b      	uxth	r3, r1
 8006e7a:	ebac 0303 	sub.w	r3, ip, r3
 8006e7e:	fa1f f28e 	uxth.w	r2, lr
 8006e82:	4413      	add	r3, r2
 8006e84:	0c0a      	lsrs	r2, r1, #16
 8006e86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e94:	45c1      	cmp	r9, r8
 8006e96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e9a:	f840 3b04 	str.w	r3, [r0], #4
 8006e9e:	d2e7      	bcs.n	8006e70 <quorem+0xb0>
 8006ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea8:	b922      	cbnz	r2, 8006eb4 <quorem+0xf4>
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	429d      	cmp	r5, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	d30a      	bcc.n	8006ec8 <quorem+0x108>
 8006eb2:	613c      	str	r4, [r7, #16]
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	b003      	add	sp, #12
 8006eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	2a00      	cmp	r2, #0
 8006ec2:	d1cb      	bne.n	8006e5c <quorem+0x9c>
 8006ec4:	3c01      	subs	r4, #1
 8006ec6:	e7c6      	b.n	8006e56 <quorem+0x96>
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	3b04      	subs	r3, #4
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d1f0      	bne.n	8006eb2 <quorem+0xf2>
 8006ed0:	3c01      	subs	r4, #1
 8006ed2:	e7eb      	b.n	8006eac <quorem+0xec>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e7ee      	b.n	8006eb6 <quorem+0xf6>

08006ed8 <_dtoa_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ee2:	b099      	sub	sp, #100	; 0x64
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006eea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006eee:	b974      	cbnz	r4, 8006f0e <_dtoa_r+0x36>
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f001 f949 	bl	8008188 <malloc>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6268      	str	r0, [r5, #36]	; 0x24
 8006efa:	b920      	cbnz	r0, 8006f06 <_dtoa_r+0x2e>
 8006efc:	21ea      	movs	r1, #234	; 0xea
 8006efe:	4ba8      	ldr	r3, [pc, #672]	; (80071a0 <_dtoa_r+0x2c8>)
 8006f00:	48a8      	ldr	r0, [pc, #672]	; (80071a4 <_dtoa_r+0x2cc>)
 8006f02:	f002 f8b3 	bl	800906c <__assert_func>
 8006f06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f0a:	6004      	str	r4, [r0, #0]
 8006f0c:	60c4      	str	r4, [r0, #12]
 8006f0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	b151      	cbz	r1, 8006f2a <_dtoa_r+0x52>
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	2301      	movs	r3, #1
 8006f18:	4093      	lsls	r3, r2
 8006f1a:	604a      	str	r2, [r1, #4]
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f001 f9a8 	bl	8008274 <_Bfree>
 8006f24:	2200      	movs	r2, #0
 8006f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	1e3b      	subs	r3, r7, #0
 8006f2c:	bfaf      	iteee	ge
 8006f2e:	2300      	movge	r3, #0
 8006f30:	2201      	movlt	r2, #1
 8006f32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f36:	9305      	strlt	r3, [sp, #20]
 8006f38:	bfa8      	it	ge
 8006f3a:	f8c8 3000 	strge.w	r3, [r8]
 8006f3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006f42:	4b99      	ldr	r3, [pc, #612]	; (80071a8 <_dtoa_r+0x2d0>)
 8006f44:	bfb8      	it	lt
 8006f46:	f8c8 2000 	strlt.w	r2, [r8]
 8006f4a:	ea33 0309 	bics.w	r3, r3, r9
 8006f4e:	d119      	bne.n	8006f84 <_dtoa_r+0xac>
 8006f50:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f5c:	4333      	orrs	r3, r6
 8006f5e:	f000 857f 	beq.w	8007a60 <_dtoa_r+0xb88>
 8006f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f64:	b953      	cbnz	r3, 8006f7c <_dtoa_r+0xa4>
 8006f66:	4b91      	ldr	r3, [pc, #580]	; (80071ac <_dtoa_r+0x2d4>)
 8006f68:	e022      	b.n	8006fb0 <_dtoa_r+0xd8>
 8006f6a:	4b91      	ldr	r3, [pc, #580]	; (80071b0 <_dtoa_r+0x2d8>)
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	9803      	ldr	r0, [sp, #12]
 8006f76:	b019      	add	sp, #100	; 0x64
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <_dtoa_r+0x2d4>)
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	3303      	adds	r3, #3
 8006f82:	e7f5      	b.n	8006f70 <_dtoa_r+0x98>
 8006f84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	f7f9 fdbc 	bl	8000b10 <__aeabi_dcmpeq>
 8006f98:	4680      	mov	r8, r0
 8006f9a:	b158      	cbz	r0, 8006fb4 <_dtoa_r+0xdc>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8558 	beq.w	8007a5a <_dtoa_r+0xb82>
 8006faa:	4882      	ldr	r0, [pc, #520]	; (80071b4 <_dtoa_r+0x2dc>)
 8006fac:	6018      	str	r0, [r3, #0]
 8006fae:	1e43      	subs	r3, r0, #1
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	e7df      	b.n	8006f74 <_dtoa_r+0x9c>
 8006fb4:	ab16      	add	r3, sp, #88	; 0x58
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	ab17      	add	r3, sp, #92	; 0x5c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fc2:	f001 fd01 	bl	80089c8 <__d2b>
 8006fc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006fca:	4683      	mov	fp, r0
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d07f      	beq.n	80070d0 <_dtoa_r+0x1f8>
 8006fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006fda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006fe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006fe6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006fea:	2200      	movs	r2, #0
 8006fec:	4b72      	ldr	r3, [pc, #456]	; (80071b8 <_dtoa_r+0x2e0>)
 8006fee:	f7f9 f96f 	bl	80002d0 <__aeabi_dsub>
 8006ff2:	a365      	add	r3, pc, #404	; (adr r3, 8007188 <_dtoa_r+0x2b0>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 fb22 	bl	8000640 <__aeabi_dmul>
 8006ffc:	a364      	add	r3, pc, #400	; (adr r3, 8007190 <_dtoa_r+0x2b8>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 f967 	bl	80002d4 <__adddf3>
 8007006:	4606      	mov	r6, r0
 8007008:	4620      	mov	r0, r4
 800700a:	460f      	mov	r7, r1
 800700c:	f7f9 faae 	bl	800056c <__aeabi_i2d>
 8007010:	a361      	add	r3, pc, #388	; (adr r3, 8007198 <_dtoa_r+0x2c0>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 fb13 	bl	8000640 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 f957 	bl	80002d4 <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fdb9 	bl	8000ba0 <__aeabi_d2iz>
 800702e:	2200      	movs	r2, #0
 8007030:	4682      	mov	sl, r0
 8007032:	2300      	movs	r3, #0
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	f7f9 fd74 	bl	8000b24 <__aeabi_dcmplt>
 800703c:	b148      	cbz	r0, 8007052 <_dtoa_r+0x17a>
 800703e:	4650      	mov	r0, sl
 8007040:	f7f9 fa94 	bl	800056c <__aeabi_i2d>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fd62 	bl	8000b10 <__aeabi_dcmpeq>
 800704c:	b908      	cbnz	r0, 8007052 <_dtoa_r+0x17a>
 800704e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007052:	f1ba 0f16 	cmp.w	sl, #22
 8007056:	d858      	bhi.n	800710a <_dtoa_r+0x232>
 8007058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800705c:	4b57      	ldr	r3, [pc, #348]	; (80071bc <_dtoa_r+0x2e4>)
 800705e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 fd5d 	bl	8000b24 <__aeabi_dcmplt>
 800706a:	2800      	cmp	r0, #0
 800706c:	d04f      	beq.n	800710e <_dtoa_r+0x236>
 800706e:	2300      	movs	r3, #0
 8007070:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007074:	930f      	str	r3, [sp, #60]	; 0x3c
 8007076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007078:	1b1c      	subs	r4, r3, r4
 800707a:	1e63      	subs	r3, r4, #1
 800707c:	9309      	str	r3, [sp, #36]	; 0x24
 800707e:	bf49      	itett	mi
 8007080:	f1c4 0301 	rsbmi	r3, r4, #1
 8007084:	2300      	movpl	r3, #0
 8007086:	9306      	strmi	r3, [sp, #24]
 8007088:	2300      	movmi	r3, #0
 800708a:	bf54      	ite	pl
 800708c:	9306      	strpl	r3, [sp, #24]
 800708e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007090:	f1ba 0f00 	cmp.w	sl, #0
 8007094:	db3d      	blt.n	8007112 <_dtoa_r+0x23a>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800709c:	4453      	add	r3, sl
 800709e:	9309      	str	r3, [sp, #36]	; 0x24
 80070a0:	2300      	movs	r3, #0
 80070a2:	930a      	str	r3, [sp, #40]	; 0x28
 80070a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070a6:	2b09      	cmp	r3, #9
 80070a8:	f200 808c 	bhi.w	80071c4 <_dtoa_r+0x2ec>
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	bfc4      	itt	gt
 80070b0:	3b04      	subgt	r3, #4
 80070b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80070b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070b6:	bfc8      	it	gt
 80070b8:	2400      	movgt	r4, #0
 80070ba:	f1a3 0302 	sub.w	r3, r3, #2
 80070be:	bfd8      	it	le
 80070c0:	2401      	movle	r4, #1
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	f200 808a 	bhi.w	80071dc <_dtoa_r+0x304>
 80070c8:	e8df f003 	tbb	[pc, r3]
 80070cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80070d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80070d4:	441c      	add	r4, r3
 80070d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80070da:	2b20      	cmp	r3, #32
 80070dc:	bfc3      	ittte	gt
 80070de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80070e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80070ea:	f1c3 0320 	rsble	r3, r3, #32
 80070ee:	bfc6      	itte	gt
 80070f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070f4:	4318      	orrgt	r0, r3
 80070f6:	fa06 f003 	lslle.w	r0, r6, r3
 80070fa:	f7f9 fa27 	bl	800054c <__aeabi_ui2d>
 80070fe:	2301      	movs	r3, #1
 8007100:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007104:	3c01      	subs	r4, #1
 8007106:	9313      	str	r3, [sp, #76]	; 0x4c
 8007108:	e76f      	b.n	8006fea <_dtoa_r+0x112>
 800710a:	2301      	movs	r3, #1
 800710c:	e7b2      	b.n	8007074 <_dtoa_r+0x19c>
 800710e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007110:	e7b1      	b.n	8007076 <_dtoa_r+0x19e>
 8007112:	9b06      	ldr	r3, [sp, #24]
 8007114:	eba3 030a 	sub.w	r3, r3, sl
 8007118:	9306      	str	r3, [sp, #24]
 800711a:	f1ca 0300 	rsb	r3, sl, #0
 800711e:	930a      	str	r3, [sp, #40]	; 0x28
 8007120:	2300      	movs	r3, #0
 8007122:	930e      	str	r3, [sp, #56]	; 0x38
 8007124:	e7be      	b.n	80070a4 <_dtoa_r+0x1cc>
 8007126:	2300      	movs	r3, #0
 8007128:	930b      	str	r3, [sp, #44]	; 0x2c
 800712a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc58      	bgt.n	80071e2 <_dtoa_r+0x30a>
 8007130:	f04f 0901 	mov.w	r9, #1
 8007134:	464b      	mov	r3, r9
 8007136:	f8cd 9020 	str.w	r9, [sp, #32]
 800713a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800713e:	2200      	movs	r2, #0
 8007140:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007142:	6042      	str	r2, [r0, #4]
 8007144:	2204      	movs	r2, #4
 8007146:	f102 0614 	add.w	r6, r2, #20
 800714a:	429e      	cmp	r6, r3
 800714c:	6841      	ldr	r1, [r0, #4]
 800714e:	d94e      	bls.n	80071ee <_dtoa_r+0x316>
 8007150:	4628      	mov	r0, r5
 8007152:	f001 f84f 	bl	80081f4 <_Balloc>
 8007156:	9003      	str	r0, [sp, #12]
 8007158:	2800      	cmp	r0, #0
 800715a:	d14c      	bne.n	80071f6 <_dtoa_r+0x31e>
 800715c:	4602      	mov	r2, r0
 800715e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <_dtoa_r+0x2e8>)
 8007164:	e6cc      	b.n	8006f00 <_dtoa_r+0x28>
 8007166:	2301      	movs	r3, #1
 8007168:	e7de      	b.n	8007128 <_dtoa_r+0x250>
 800716a:	2300      	movs	r3, #0
 800716c:	930b      	str	r3, [sp, #44]	; 0x2c
 800716e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007170:	eb0a 0903 	add.w	r9, sl, r3
 8007174:	f109 0301 	add.w	r3, r9, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	9308      	str	r3, [sp, #32]
 800717c:	bfb8      	it	lt
 800717e:	2301      	movlt	r3, #1
 8007180:	e7dd      	b.n	800713e <_dtoa_r+0x266>
 8007182:	2301      	movs	r3, #1
 8007184:	e7f2      	b.n	800716c <_dtoa_r+0x294>
 8007186:	bf00      	nop
 8007188:	636f4361 	.word	0x636f4361
 800718c:	3fd287a7 	.word	0x3fd287a7
 8007190:	8b60c8b3 	.word	0x8b60c8b3
 8007194:	3fc68a28 	.word	0x3fc68a28
 8007198:	509f79fb 	.word	0x509f79fb
 800719c:	3fd34413 	.word	0x3fd34413
 80071a0:	0800ab9e 	.word	0x0800ab9e
 80071a4:	0800abb5 	.word	0x0800abb5
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	0800ab9a 	.word	0x0800ab9a
 80071b0:	0800ab91 	.word	0x0800ab91
 80071b4:	0800aa15 	.word	0x0800aa15
 80071b8:	3ff80000 	.word	0x3ff80000
 80071bc:	0800ad20 	.word	0x0800ad20
 80071c0:	0800ac10 	.word	0x0800ac10
 80071c4:	2401      	movs	r4, #1
 80071c6:	2300      	movs	r3, #0
 80071c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80071ca:	9322      	str	r3, [sp, #136]	; 0x88
 80071cc:	f04f 39ff 	mov.w	r9, #4294967295
 80071d0:	2200      	movs	r2, #0
 80071d2:	2312      	movs	r3, #18
 80071d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80071d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80071da:	e7b0      	b.n	800713e <_dtoa_r+0x266>
 80071dc:	2301      	movs	r3, #1
 80071de:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e0:	e7f4      	b.n	80071cc <_dtoa_r+0x2f4>
 80071e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80071e6:	464b      	mov	r3, r9
 80071e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80071ec:	e7a7      	b.n	800713e <_dtoa_r+0x266>
 80071ee:	3101      	adds	r1, #1
 80071f0:	6041      	str	r1, [r0, #4]
 80071f2:	0052      	lsls	r2, r2, #1
 80071f4:	e7a7      	b.n	8007146 <_dtoa_r+0x26e>
 80071f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071f8:	9a03      	ldr	r2, [sp, #12]
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	9b08      	ldr	r3, [sp, #32]
 80071fe:	2b0e      	cmp	r3, #14
 8007200:	f200 80a8 	bhi.w	8007354 <_dtoa_r+0x47c>
 8007204:	2c00      	cmp	r4, #0
 8007206:	f000 80a5 	beq.w	8007354 <_dtoa_r+0x47c>
 800720a:	f1ba 0f00 	cmp.w	sl, #0
 800720e:	dd34      	ble.n	800727a <_dtoa_r+0x3a2>
 8007210:	4a9a      	ldr	r2, [pc, #616]	; (800747c <_dtoa_r+0x5a4>)
 8007212:	f00a 030f 	and.w	r3, sl, #15
 8007216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800721a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800721e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007226:	ea4f 142a 	mov.w	r4, sl, asr #4
 800722a:	d016      	beq.n	800725a <_dtoa_r+0x382>
 800722c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007230:	4b93      	ldr	r3, [pc, #588]	; (8007480 <_dtoa_r+0x5a8>)
 8007232:	2703      	movs	r7, #3
 8007234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007238:	f7f9 fb2c 	bl	8000894 <__aeabi_ddiv>
 800723c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007240:	f004 040f 	and.w	r4, r4, #15
 8007244:	4e8e      	ldr	r6, [pc, #568]	; (8007480 <_dtoa_r+0x5a8>)
 8007246:	b954      	cbnz	r4, 800725e <_dtoa_r+0x386>
 8007248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800724c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007250:	f7f9 fb20 	bl	8000894 <__aeabi_ddiv>
 8007254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007258:	e029      	b.n	80072ae <_dtoa_r+0x3d6>
 800725a:	2702      	movs	r7, #2
 800725c:	e7f2      	b.n	8007244 <_dtoa_r+0x36c>
 800725e:	07e1      	lsls	r1, r4, #31
 8007260:	d508      	bpl.n	8007274 <_dtoa_r+0x39c>
 8007262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007266:	e9d6 2300 	ldrd	r2, r3, [r6]
 800726a:	f7f9 f9e9 	bl	8000640 <__aeabi_dmul>
 800726e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007272:	3701      	adds	r7, #1
 8007274:	1064      	asrs	r4, r4, #1
 8007276:	3608      	adds	r6, #8
 8007278:	e7e5      	b.n	8007246 <_dtoa_r+0x36e>
 800727a:	f000 80a5 	beq.w	80073c8 <_dtoa_r+0x4f0>
 800727e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007282:	f1ca 0400 	rsb	r4, sl, #0
 8007286:	4b7d      	ldr	r3, [pc, #500]	; (800747c <_dtoa_r+0x5a4>)
 8007288:	f004 020f 	and.w	r2, r4, #15
 800728c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f9 f9d4 	bl	8000640 <__aeabi_dmul>
 8007298:	2702      	movs	r7, #2
 800729a:	2300      	movs	r3, #0
 800729c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a0:	4e77      	ldr	r6, [pc, #476]	; (8007480 <_dtoa_r+0x5a8>)
 80072a2:	1124      	asrs	r4, r4, #4
 80072a4:	2c00      	cmp	r4, #0
 80072a6:	f040 8084 	bne.w	80073b2 <_dtoa_r+0x4da>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1d2      	bne.n	8007254 <_dtoa_r+0x37c>
 80072ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 808b 	beq.w	80073cc <_dtoa_r+0x4f4>
 80072b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072c2:	2200      	movs	r2, #0
 80072c4:	4b6f      	ldr	r3, [pc, #444]	; (8007484 <_dtoa_r+0x5ac>)
 80072c6:	f7f9 fc2d 	bl	8000b24 <__aeabi_dcmplt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d07e      	beq.n	80073cc <_dtoa_r+0x4f4>
 80072ce:	9b08      	ldr	r3, [sp, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d07b      	beq.n	80073cc <_dtoa_r+0x4f4>
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	dd38      	ble.n	800734c <_dtoa_r+0x474>
 80072da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072de:	2200      	movs	r2, #0
 80072e0:	4b69      	ldr	r3, [pc, #420]	; (8007488 <_dtoa_r+0x5b0>)
 80072e2:	f7f9 f9ad 	bl	8000640 <__aeabi_dmul>
 80072e6:	464c      	mov	r4, r9
 80072e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80072f0:	3701      	adds	r7, #1
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7f9 f93a 	bl	800056c <__aeabi_i2d>
 80072f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fc:	f7f9 f9a0 	bl	8000640 <__aeabi_dmul>
 8007300:	2200      	movs	r2, #0
 8007302:	4b62      	ldr	r3, [pc, #392]	; (800748c <_dtoa_r+0x5b4>)
 8007304:	f7f8 ffe6 	bl	80002d4 <__adddf3>
 8007308:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800730c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007310:	9611      	str	r6, [sp, #68]	; 0x44
 8007312:	2c00      	cmp	r4, #0
 8007314:	d15d      	bne.n	80073d2 <_dtoa_r+0x4fa>
 8007316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	4b5c      	ldr	r3, [pc, #368]	; (8007490 <_dtoa_r+0x5b8>)
 800731e:	f7f8 ffd7 	bl	80002d0 <__aeabi_dsub>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800732a:	4633      	mov	r3, r6
 800732c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800732e:	f7f9 fc17 	bl	8000b60 <__aeabi_dcmpgt>
 8007332:	2800      	cmp	r0, #0
 8007334:	f040 829c 	bne.w	8007870 <_dtoa_r+0x998>
 8007338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800733c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800733e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007342:	f7f9 fbef 	bl	8000b24 <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f040 8290 	bne.w	800786c <_dtoa_r+0x994>
 800734c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007356:	2b00      	cmp	r3, #0
 8007358:	f2c0 8152 	blt.w	8007600 <_dtoa_r+0x728>
 800735c:	f1ba 0f0e 	cmp.w	sl, #14
 8007360:	f300 814e 	bgt.w	8007600 <_dtoa_r+0x728>
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <_dtoa_r+0x5a4>)
 8007366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800736a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007374:	2b00      	cmp	r3, #0
 8007376:	f280 80db 	bge.w	8007530 <_dtoa_r+0x658>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f300 80d7 	bgt.w	8007530 <_dtoa_r+0x658>
 8007382:	f040 8272 	bne.w	800786a <_dtoa_r+0x992>
 8007386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738a:	2200      	movs	r2, #0
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <_dtoa_r+0x5b8>)
 800738e:	f7f9 f957 	bl	8000640 <__aeabi_dmul>
 8007392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007396:	f7f9 fbd9 	bl	8000b4c <__aeabi_dcmpge>
 800739a:	9c08      	ldr	r4, [sp, #32]
 800739c:	4626      	mov	r6, r4
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8248 	bne.w	8007834 <_dtoa_r+0x95c>
 80073a4:	2331      	movs	r3, #49	; 0x31
 80073a6:	9f03      	ldr	r7, [sp, #12]
 80073a8:	f10a 0a01 	add.w	sl, sl, #1
 80073ac:	f807 3b01 	strb.w	r3, [r7], #1
 80073b0:	e244      	b.n	800783c <_dtoa_r+0x964>
 80073b2:	07e2      	lsls	r2, r4, #31
 80073b4:	d505      	bpl.n	80073c2 <_dtoa_r+0x4ea>
 80073b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073ba:	f7f9 f941 	bl	8000640 <__aeabi_dmul>
 80073be:	2301      	movs	r3, #1
 80073c0:	3701      	adds	r7, #1
 80073c2:	1064      	asrs	r4, r4, #1
 80073c4:	3608      	adds	r6, #8
 80073c6:	e76d      	b.n	80072a4 <_dtoa_r+0x3cc>
 80073c8:	2702      	movs	r7, #2
 80073ca:	e770      	b.n	80072ae <_dtoa_r+0x3d6>
 80073cc:	46d0      	mov	r8, sl
 80073ce:	9c08      	ldr	r4, [sp, #32]
 80073d0:	e78f      	b.n	80072f2 <_dtoa_r+0x41a>
 80073d2:	9903      	ldr	r1, [sp, #12]
 80073d4:	4b29      	ldr	r3, [pc, #164]	; (800747c <_dtoa_r+0x5a4>)
 80073d6:	4421      	add	r1, r4
 80073d8:	9112      	str	r1, [sp, #72]	; 0x48
 80073da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80073e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073e8:	2900      	cmp	r1, #0
 80073ea:	d055      	beq.n	8007498 <_dtoa_r+0x5c0>
 80073ec:	2000      	movs	r0, #0
 80073ee:	4929      	ldr	r1, [pc, #164]	; (8007494 <_dtoa_r+0x5bc>)
 80073f0:	f7f9 fa50 	bl	8000894 <__aeabi_ddiv>
 80073f4:	463b      	mov	r3, r7
 80073f6:	4632      	mov	r2, r6
 80073f8:	f7f8 ff6a 	bl	80002d0 <__aeabi_dsub>
 80073fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007400:	9f03      	ldr	r7, [sp, #12]
 8007402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007406:	f7f9 fbcb 	bl	8000ba0 <__aeabi_d2iz>
 800740a:	4604      	mov	r4, r0
 800740c:	f7f9 f8ae 	bl	800056c <__aeabi_i2d>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007418:	f7f8 ff5a 	bl	80002d0 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	3430      	adds	r4, #48	; 0x30
 8007422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800742a:	f807 4b01 	strb.w	r4, [r7], #1
 800742e:	f7f9 fb79 	bl	8000b24 <__aeabi_dcmplt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d174      	bne.n	8007520 <_dtoa_r+0x648>
 8007436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800743a:	2000      	movs	r0, #0
 800743c:	4911      	ldr	r1, [pc, #68]	; (8007484 <_dtoa_r+0x5ac>)
 800743e:	f7f8 ff47 	bl	80002d0 <__aeabi_dsub>
 8007442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007446:	f7f9 fb6d 	bl	8000b24 <__aeabi_dcmplt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 80b7 	bne.w	80075be <_dtoa_r+0x6e6>
 8007450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007452:	429f      	cmp	r7, r3
 8007454:	f43f af7a 	beq.w	800734c <_dtoa_r+0x474>
 8007458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800745c:	2200      	movs	r2, #0
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <_dtoa_r+0x5b0>)
 8007460:	f7f9 f8ee 	bl	8000640 <__aeabi_dmul>
 8007464:	2200      	movs	r2, #0
 8007466:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800746a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <_dtoa_r+0x5b0>)
 8007470:	f7f9 f8e6 	bl	8000640 <__aeabi_dmul>
 8007474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007478:	e7c3      	b.n	8007402 <_dtoa_r+0x52a>
 800747a:	bf00      	nop
 800747c:	0800ad20 	.word	0x0800ad20
 8007480:	0800acf8 	.word	0x0800acf8
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	40240000 	.word	0x40240000
 800748c:	401c0000 	.word	0x401c0000
 8007490:	40140000 	.word	0x40140000
 8007494:	3fe00000 	.word	0x3fe00000
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 f8d0 	bl	8000640 <__aeabi_dmul>
 80074a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074a6:	9c03      	ldr	r4, [sp, #12]
 80074a8:	9314      	str	r3, [sp, #80]	; 0x50
 80074aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ae:	f7f9 fb77 	bl	8000ba0 <__aeabi_d2iz>
 80074b2:	9015      	str	r0, [sp, #84]	; 0x54
 80074b4:	f7f9 f85a 	bl	800056c <__aeabi_i2d>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c0:	f7f8 ff06 	bl	80002d0 <__aeabi_dsub>
 80074c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c6:	4606      	mov	r6, r0
 80074c8:	3330      	adds	r3, #48	; 0x30
 80074ca:	f804 3b01 	strb.w	r3, [r4], #1
 80074ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074d0:	460f      	mov	r7, r1
 80074d2:	429c      	cmp	r4, r3
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	d124      	bne.n	8007524 <_dtoa_r+0x64c>
 80074da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074de:	4bb0      	ldr	r3, [pc, #704]	; (80077a0 <_dtoa_r+0x8c8>)
 80074e0:	f7f8 fef8 	bl	80002d4 <__adddf3>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f9 fb38 	bl	8000b60 <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d163      	bne.n	80075bc <_dtoa_r+0x6e4>
 80074f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074f8:	2000      	movs	r0, #0
 80074fa:	49a9      	ldr	r1, [pc, #676]	; (80077a0 <_dtoa_r+0x8c8>)
 80074fc:	f7f8 fee8 	bl	80002d0 <__aeabi_dsub>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f9 fb0c 	bl	8000b24 <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f af1d 	beq.w	800734c <_dtoa_r+0x474>
 8007512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007514:	1e7b      	subs	r3, r7, #1
 8007516:	9314      	str	r3, [sp, #80]	; 0x50
 8007518:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d0f8      	beq.n	8007512 <_dtoa_r+0x63a>
 8007520:	46c2      	mov	sl, r8
 8007522:	e03b      	b.n	800759c <_dtoa_r+0x6c4>
 8007524:	4b9f      	ldr	r3, [pc, #636]	; (80077a4 <_dtoa_r+0x8cc>)
 8007526:	f7f9 f88b 	bl	8000640 <__aeabi_dmul>
 800752a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800752e:	e7bc      	b.n	80074aa <_dtoa_r+0x5d2>
 8007530:	9f03      	ldr	r7, [sp, #12]
 8007532:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f9 f9a9 	bl	8000894 <__aeabi_ddiv>
 8007542:	f7f9 fb2d 	bl	8000ba0 <__aeabi_d2iz>
 8007546:	4604      	mov	r4, r0
 8007548:	f7f9 f810 	bl	800056c <__aeabi_i2d>
 800754c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007550:	f7f9 f876 	bl	8000640 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f8 feb8 	bl	80002d0 <__aeabi_dsub>
 8007560:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007564:	f807 6b01 	strb.w	r6, [r7], #1
 8007568:	9e03      	ldr	r6, [sp, #12]
 800756a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800756e:	1bbe      	subs	r6, r7, r6
 8007570:	45b4      	cmp	ip, r6
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	d136      	bne.n	80075e6 <_dtoa_r+0x70e>
 8007578:	f7f8 feac 	bl	80002d4 <__adddf3>
 800757c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007580:	4680      	mov	r8, r0
 8007582:	4689      	mov	r9, r1
 8007584:	f7f9 faec 	bl	8000b60 <__aeabi_dcmpgt>
 8007588:	bb58      	cbnz	r0, 80075e2 <_dtoa_r+0x70a>
 800758a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f9 fabd 	bl	8000b10 <__aeabi_dcmpeq>
 8007596:	b108      	cbz	r0, 800759c <_dtoa_r+0x6c4>
 8007598:	07e1      	lsls	r1, r4, #31
 800759a:	d422      	bmi.n	80075e2 <_dtoa_r+0x70a>
 800759c:	4628      	mov	r0, r5
 800759e:	4659      	mov	r1, fp
 80075a0:	f000 fe68 	bl	8008274 <_Bfree>
 80075a4:	2300      	movs	r3, #0
 80075a6:	703b      	strb	r3, [r7, #0]
 80075a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075aa:	f10a 0001 	add.w	r0, sl, #1
 80075ae:	6018      	str	r0, [r3, #0]
 80075b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f43f acde 	beq.w	8006f74 <_dtoa_r+0x9c>
 80075b8:	601f      	str	r7, [r3, #0]
 80075ba:	e4db      	b.n	8006f74 <_dtoa_r+0x9c>
 80075bc:	4627      	mov	r7, r4
 80075be:	463b      	mov	r3, r7
 80075c0:	461f      	mov	r7, r3
 80075c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075c6:	2a39      	cmp	r2, #57	; 0x39
 80075c8:	d107      	bne.n	80075da <_dtoa_r+0x702>
 80075ca:	9a03      	ldr	r2, [sp, #12]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d1f7      	bne.n	80075c0 <_dtoa_r+0x6e8>
 80075d0:	2230      	movs	r2, #48	; 0x30
 80075d2:	9903      	ldr	r1, [sp, #12]
 80075d4:	f108 0801 	add.w	r8, r8, #1
 80075d8:	700a      	strb	r2, [r1, #0]
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	3201      	adds	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e79e      	b.n	8007520 <_dtoa_r+0x648>
 80075e2:	46d0      	mov	r8, sl
 80075e4:	e7eb      	b.n	80075be <_dtoa_r+0x6e6>
 80075e6:	2200      	movs	r2, #0
 80075e8:	4b6e      	ldr	r3, [pc, #440]	; (80077a4 <_dtoa_r+0x8cc>)
 80075ea:	f7f9 f829 	bl	8000640 <__aeabi_dmul>
 80075ee:	2200      	movs	r2, #0
 80075f0:	2300      	movs	r3, #0
 80075f2:	4680      	mov	r8, r0
 80075f4:	4689      	mov	r9, r1
 80075f6:	f7f9 fa8b 	bl	8000b10 <__aeabi_dcmpeq>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d09b      	beq.n	8007536 <_dtoa_r+0x65e>
 80075fe:	e7cd      	b.n	800759c <_dtoa_r+0x6c4>
 8007600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007602:	2a00      	cmp	r2, #0
 8007604:	f000 80d0 	beq.w	80077a8 <_dtoa_r+0x8d0>
 8007608:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800760a:	2a01      	cmp	r2, #1
 800760c:	f300 80ae 	bgt.w	800776c <_dtoa_r+0x894>
 8007610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007612:	2a00      	cmp	r2, #0
 8007614:	f000 80a6 	beq.w	8007764 <_dtoa_r+0x88c>
 8007618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800761c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800761e:	9f06      	ldr	r7, [sp, #24]
 8007620:	9a06      	ldr	r2, [sp, #24]
 8007622:	2101      	movs	r1, #1
 8007624:	441a      	add	r2, r3
 8007626:	9206      	str	r2, [sp, #24]
 8007628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800762a:	4628      	mov	r0, r5
 800762c:	441a      	add	r2, r3
 800762e:	9209      	str	r2, [sp, #36]	; 0x24
 8007630:	f000 ff20 	bl	8008474 <__i2b>
 8007634:	4606      	mov	r6, r0
 8007636:	2f00      	cmp	r7, #0
 8007638:	dd0c      	ble.n	8007654 <_dtoa_r+0x77c>
 800763a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd09      	ble.n	8007654 <_dtoa_r+0x77c>
 8007640:	42bb      	cmp	r3, r7
 8007642:	bfa8      	it	ge
 8007644:	463b      	movge	r3, r7
 8007646:	9a06      	ldr	r2, [sp, #24]
 8007648:	1aff      	subs	r7, r7, r3
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	9206      	str	r2, [sp, #24]
 800764e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	b1f3      	cbz	r3, 8007696 <_dtoa_r+0x7be>
 8007658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80a8 	beq.w	80077b0 <_dtoa_r+0x8d8>
 8007660:	2c00      	cmp	r4, #0
 8007662:	dd10      	ble.n	8007686 <_dtoa_r+0x7ae>
 8007664:	4631      	mov	r1, r6
 8007666:	4622      	mov	r2, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f000 ffc1 	bl	80085f0 <__pow5mult>
 800766e:	465a      	mov	r2, fp
 8007670:	4601      	mov	r1, r0
 8007672:	4606      	mov	r6, r0
 8007674:	4628      	mov	r0, r5
 8007676:	f000 ff13 	bl	80084a0 <__multiply>
 800767a:	4680      	mov	r8, r0
 800767c:	4659      	mov	r1, fp
 800767e:	4628      	mov	r0, r5
 8007680:	f000 fdf8 	bl	8008274 <_Bfree>
 8007684:	46c3      	mov	fp, r8
 8007686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007688:	1b1a      	subs	r2, r3, r4
 800768a:	d004      	beq.n	8007696 <_dtoa_r+0x7be>
 800768c:	4659      	mov	r1, fp
 800768e:	4628      	mov	r0, r5
 8007690:	f000 ffae 	bl	80085f0 <__pow5mult>
 8007694:	4683      	mov	fp, r0
 8007696:	2101      	movs	r1, #1
 8007698:	4628      	mov	r0, r5
 800769a:	f000 feeb 	bl	8008474 <__i2b>
 800769e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076a0:	4604      	mov	r4, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f340 8086 	ble.w	80077b4 <_dtoa_r+0x8dc>
 80076a8:	461a      	mov	r2, r3
 80076aa:	4601      	mov	r1, r0
 80076ac:	4628      	mov	r0, r5
 80076ae:	f000 ff9f 	bl	80085f0 <__pow5mult>
 80076b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076b4:	4604      	mov	r4, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	dd7f      	ble.n	80077ba <_dtoa_r+0x8e2>
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f000 fe87 	bl	80083d8 <__hi0bits>
 80076ca:	f1c0 0020 	rsb	r0, r0, #32
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	4418      	add	r0, r3
 80076d2:	f010 001f 	ands.w	r0, r0, #31
 80076d6:	f000 8092 	beq.w	80077fe <_dtoa_r+0x926>
 80076da:	f1c0 0320 	rsb	r3, r0, #32
 80076de:	2b04      	cmp	r3, #4
 80076e0:	f340 808a 	ble.w	80077f8 <_dtoa_r+0x920>
 80076e4:	f1c0 001c 	rsb	r0, r0, #28
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	4407      	add	r7, r0
 80076ec:	4403      	add	r3, r0
 80076ee:	9306      	str	r3, [sp, #24]
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	4403      	add	r3, r0
 80076f4:	9309      	str	r3, [sp, #36]	; 0x24
 80076f6:	9b06      	ldr	r3, [sp, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd05      	ble.n	8007708 <_dtoa_r+0x830>
 80076fc:	4659      	mov	r1, fp
 80076fe:	461a      	mov	r2, r3
 8007700:	4628      	mov	r0, r5
 8007702:	f000 ffcf 	bl	80086a4 <__lshift>
 8007706:	4683      	mov	fp, r0
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd05      	ble.n	800771a <_dtoa_r+0x842>
 800770e:	4621      	mov	r1, r4
 8007710:	461a      	mov	r2, r3
 8007712:	4628      	mov	r0, r5
 8007714:	f000 ffc6 	bl	80086a4 <__lshift>
 8007718:	4604      	mov	r4, r0
 800771a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d070      	beq.n	8007802 <_dtoa_r+0x92a>
 8007720:	4621      	mov	r1, r4
 8007722:	4658      	mov	r0, fp
 8007724:	f001 f82e 	bl	8008784 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	da6a      	bge.n	8007802 <_dtoa_r+0x92a>
 800772c:	2300      	movs	r3, #0
 800772e:	4659      	mov	r1, fp
 8007730:	220a      	movs	r2, #10
 8007732:	4628      	mov	r0, r5
 8007734:	f000 fdc0 	bl	80082b8 <__multadd>
 8007738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773a:	4683      	mov	fp, r0
 800773c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8194 	beq.w	8007a6e <_dtoa_r+0xb96>
 8007746:	4631      	mov	r1, r6
 8007748:	2300      	movs	r3, #0
 800774a:	220a      	movs	r2, #10
 800774c:	4628      	mov	r0, r5
 800774e:	f000 fdb3 	bl	80082b8 <__multadd>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	4606      	mov	r6, r0
 8007758:	f300 8093 	bgt.w	8007882 <_dtoa_r+0x9aa>
 800775c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800775e:	2b02      	cmp	r3, #2
 8007760:	dc57      	bgt.n	8007812 <_dtoa_r+0x93a>
 8007762:	e08e      	b.n	8007882 <_dtoa_r+0x9aa>
 8007764:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800776a:	e757      	b.n	800761c <_dtoa_r+0x744>
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	1e5c      	subs	r4, r3, #1
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	42a3      	cmp	r3, r4
 8007774:	bfb7      	itett	lt
 8007776:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007778:	1b1c      	subge	r4, r3, r4
 800777a:	1ae2      	sublt	r2, r4, r3
 800777c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800777e:	bfbe      	ittt	lt
 8007780:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007782:	189b      	addlt	r3, r3, r2
 8007784:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	bfb8      	it	lt
 800778a:	2400      	movlt	r4, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbb      	ittet	lt
 8007790:	9b06      	ldrlt	r3, [sp, #24]
 8007792:	9a08      	ldrlt	r2, [sp, #32]
 8007794:	9f06      	ldrge	r7, [sp, #24]
 8007796:	1a9f      	sublt	r7, r3, r2
 8007798:	bfac      	ite	ge
 800779a:	9b08      	ldrge	r3, [sp, #32]
 800779c:	2300      	movlt	r3, #0
 800779e:	e73f      	b.n	8007620 <_dtoa_r+0x748>
 80077a0:	3fe00000 	.word	0x3fe00000
 80077a4:	40240000 	.word	0x40240000
 80077a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077aa:	9f06      	ldr	r7, [sp, #24]
 80077ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077ae:	e742      	b.n	8007636 <_dtoa_r+0x75e>
 80077b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b2:	e76b      	b.n	800768c <_dtoa_r+0x7b4>
 80077b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	dc19      	bgt.n	80077ee <_dtoa_r+0x916>
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	b9bb      	cbnz	r3, 80077ee <_dtoa_r+0x916>
 80077be:	9b05      	ldr	r3, [sp, #20]
 80077c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c4:	b99b      	cbnz	r3, 80077ee <_dtoa_r+0x916>
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	051b      	lsls	r3, r3, #20
 80077d0:	b183      	cbz	r3, 80077f4 <_dtoa_r+0x91c>
 80077d2:	f04f 0801 	mov.w	r8, #1
 80077d6:	9b06      	ldr	r3, [sp, #24]
 80077d8:	3301      	adds	r3, #1
 80077da:	9306      	str	r3, [sp, #24]
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	9309      	str	r3, [sp, #36]	; 0x24
 80077e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f47f af6a 	bne.w	80076be <_dtoa_r+0x7e6>
 80077ea:	2001      	movs	r0, #1
 80077ec:	e76f      	b.n	80076ce <_dtoa_r+0x7f6>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	e7f6      	b.n	80077e2 <_dtoa_r+0x90a>
 80077f4:	4698      	mov	r8, r3
 80077f6:	e7f4      	b.n	80077e2 <_dtoa_r+0x90a>
 80077f8:	f43f af7d 	beq.w	80076f6 <_dtoa_r+0x81e>
 80077fc:	4618      	mov	r0, r3
 80077fe:	301c      	adds	r0, #28
 8007800:	e772      	b.n	80076e8 <_dtoa_r+0x810>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dc36      	bgt.n	8007876 <_dtoa_r+0x99e>
 8007808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780a:	2b02      	cmp	r3, #2
 800780c:	dd33      	ble.n	8007876 <_dtoa_r+0x99e>
 800780e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	d10d      	bne.n	8007834 <_dtoa_r+0x95c>
 8007818:	4621      	mov	r1, r4
 800781a:	464b      	mov	r3, r9
 800781c:	2205      	movs	r2, #5
 800781e:	4628      	mov	r0, r5
 8007820:	f000 fd4a 	bl	80082b8 <__multadd>
 8007824:	4601      	mov	r1, r0
 8007826:	4604      	mov	r4, r0
 8007828:	4658      	mov	r0, fp
 800782a:	f000 ffab 	bl	8008784 <__mcmp>
 800782e:	2800      	cmp	r0, #0
 8007830:	f73f adb8 	bgt.w	80073a4 <_dtoa_r+0x4cc>
 8007834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007836:	9f03      	ldr	r7, [sp, #12]
 8007838:	ea6f 0a03 	mvn.w	sl, r3
 800783c:	f04f 0800 	mov.w	r8, #0
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fd16 	bl	8008274 <_Bfree>
 8007848:	2e00      	cmp	r6, #0
 800784a:	f43f aea7 	beq.w	800759c <_dtoa_r+0x6c4>
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	d005      	beq.n	8007860 <_dtoa_r+0x988>
 8007854:	45b0      	cmp	r8, r6
 8007856:	d003      	beq.n	8007860 <_dtoa_r+0x988>
 8007858:	4641      	mov	r1, r8
 800785a:	4628      	mov	r0, r5
 800785c:	f000 fd0a 	bl	8008274 <_Bfree>
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	f000 fd06 	bl	8008274 <_Bfree>
 8007868:	e698      	b.n	800759c <_dtoa_r+0x6c4>
 800786a:	2400      	movs	r4, #0
 800786c:	4626      	mov	r6, r4
 800786e:	e7e1      	b.n	8007834 <_dtoa_r+0x95c>
 8007870:	46c2      	mov	sl, r8
 8007872:	4626      	mov	r6, r4
 8007874:	e596      	b.n	80073a4 <_dtoa_r+0x4cc>
 8007876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80fd 	beq.w	8007a7c <_dtoa_r+0xba4>
 8007882:	2f00      	cmp	r7, #0
 8007884:	dd05      	ble.n	8007892 <_dtoa_r+0x9ba>
 8007886:	4631      	mov	r1, r6
 8007888:	463a      	mov	r2, r7
 800788a:	4628      	mov	r0, r5
 800788c:	f000 ff0a 	bl	80086a4 <__lshift>
 8007890:	4606      	mov	r6, r0
 8007892:	f1b8 0f00 	cmp.w	r8, #0
 8007896:	d05c      	beq.n	8007952 <_dtoa_r+0xa7a>
 8007898:	4628      	mov	r0, r5
 800789a:	6871      	ldr	r1, [r6, #4]
 800789c:	f000 fcaa 	bl	80081f4 <_Balloc>
 80078a0:	4607      	mov	r7, r0
 80078a2:	b928      	cbnz	r0, 80078b0 <_dtoa_r+0x9d8>
 80078a4:	4602      	mov	r2, r0
 80078a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078aa:	4b7f      	ldr	r3, [pc, #508]	; (8007aa8 <_dtoa_r+0xbd0>)
 80078ac:	f7ff bb28 	b.w	8006f00 <_dtoa_r+0x28>
 80078b0:	6932      	ldr	r2, [r6, #16]
 80078b2:	f106 010c 	add.w	r1, r6, #12
 80078b6:	3202      	adds	r2, #2
 80078b8:	0092      	lsls	r2, r2, #2
 80078ba:	300c      	adds	r0, #12
 80078bc:	f000 fc8c 	bl	80081d8 <memcpy>
 80078c0:	2201      	movs	r2, #1
 80078c2:	4639      	mov	r1, r7
 80078c4:	4628      	mov	r0, r5
 80078c6:	f000 feed 	bl	80086a4 <__lshift>
 80078ca:	46b0      	mov	r8, r6
 80078cc:	4606      	mov	r6, r0
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	444b      	add	r3, r9
 80078d8:	930a      	str	r3, [sp, #40]	; 0x28
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	9309      	str	r3, [sp, #36]	; 0x24
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	4621      	mov	r1, r4
 80078e6:	3b01      	subs	r3, #1
 80078e8:	4658      	mov	r0, fp
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f7ff fa68 	bl	8006dc0 <quorem>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4641      	mov	r1, r8
 80078f4:	3330      	adds	r3, #48	; 0x30
 80078f6:	9006      	str	r0, [sp, #24]
 80078f8:	4658      	mov	r0, fp
 80078fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80078fc:	f000 ff42 	bl	8008784 <__mcmp>
 8007900:	4632      	mov	r2, r6
 8007902:	4681      	mov	r9, r0
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f000 ff58 	bl	80087bc <__mdiff>
 800790c:	68c2      	ldr	r2, [r0, #12]
 800790e:	4607      	mov	r7, r0
 8007910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007912:	bb02      	cbnz	r2, 8007956 <_dtoa_r+0xa7e>
 8007914:	4601      	mov	r1, r0
 8007916:	4658      	mov	r0, fp
 8007918:	f000 ff34 	bl	8008784 <__mcmp>
 800791c:	4602      	mov	r2, r0
 800791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007920:	4639      	mov	r1, r7
 8007922:	4628      	mov	r0, r5
 8007924:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007928:	f000 fca4 	bl	8008274 <_Bfree>
 800792c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800792e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007930:	9f08      	ldr	r7, [sp, #32]
 8007932:	ea43 0102 	orr.w	r1, r3, r2
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	430b      	orrs	r3, r1
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	d10d      	bne.n	800795a <_dtoa_r+0xa82>
 800793e:	2b39      	cmp	r3, #57	; 0x39
 8007940:	d029      	beq.n	8007996 <_dtoa_r+0xabe>
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	dd01      	ble.n	800794c <_dtoa_r+0xa74>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	3331      	adds	r3, #49	; 0x31
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	7013      	strb	r3, [r2, #0]
 8007950:	e776      	b.n	8007840 <_dtoa_r+0x968>
 8007952:	4630      	mov	r0, r6
 8007954:	e7b9      	b.n	80078ca <_dtoa_r+0x9f2>
 8007956:	2201      	movs	r2, #1
 8007958:	e7e2      	b.n	8007920 <_dtoa_r+0xa48>
 800795a:	f1b9 0f00 	cmp.w	r9, #0
 800795e:	db06      	blt.n	800796e <_dtoa_r+0xa96>
 8007960:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007962:	ea41 0909 	orr.w	r9, r1, r9
 8007966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007968:	ea59 0101 	orrs.w	r1, r9, r1
 800796c:	d120      	bne.n	80079b0 <_dtoa_r+0xad8>
 800796e:	2a00      	cmp	r2, #0
 8007970:	ddec      	ble.n	800794c <_dtoa_r+0xa74>
 8007972:	4659      	mov	r1, fp
 8007974:	2201      	movs	r2, #1
 8007976:	4628      	mov	r0, r5
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	f000 fe93 	bl	80086a4 <__lshift>
 800797e:	4621      	mov	r1, r4
 8007980:	4683      	mov	fp, r0
 8007982:	f000 feff 	bl	8008784 <__mcmp>
 8007986:	2800      	cmp	r0, #0
 8007988:	9b08      	ldr	r3, [sp, #32]
 800798a:	dc02      	bgt.n	8007992 <_dtoa_r+0xaba>
 800798c:	d1de      	bne.n	800794c <_dtoa_r+0xa74>
 800798e:	07da      	lsls	r2, r3, #31
 8007990:	d5dc      	bpl.n	800794c <_dtoa_r+0xa74>
 8007992:	2b39      	cmp	r3, #57	; 0x39
 8007994:	d1d8      	bne.n	8007948 <_dtoa_r+0xa70>
 8007996:	2339      	movs	r3, #57	; 0x39
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	7013      	strb	r3, [r2, #0]
 800799c:	463b      	mov	r3, r7
 800799e:	461f      	mov	r7, r3
 80079a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2a39      	cmp	r2, #57	; 0x39
 80079a8:	d050      	beq.n	8007a4c <_dtoa_r+0xb74>
 80079aa:	3201      	adds	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e747      	b.n	8007840 <_dtoa_r+0x968>
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	dd03      	ble.n	80079bc <_dtoa_r+0xae4>
 80079b4:	2b39      	cmp	r3, #57	; 0x39
 80079b6:	d0ee      	beq.n	8007996 <_dtoa_r+0xabe>
 80079b8:	3301      	adds	r3, #1
 80079ba:	e7c7      	b.n	800794c <_dtoa_r+0xa74>
 80079bc:	9a08      	ldr	r2, [sp, #32]
 80079be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d02a      	beq.n	8007a1e <_dtoa_r+0xb46>
 80079c8:	4659      	mov	r1, fp
 80079ca:	2300      	movs	r3, #0
 80079cc:	220a      	movs	r2, #10
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fc72 	bl	80082b8 <__multadd>
 80079d4:	45b0      	cmp	r8, r6
 80079d6:	4683      	mov	fp, r0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 020a 	mov.w	r2, #10
 80079e0:	4641      	mov	r1, r8
 80079e2:	4628      	mov	r0, r5
 80079e4:	d107      	bne.n	80079f6 <_dtoa_r+0xb1e>
 80079e6:	f000 fc67 	bl	80082b8 <__multadd>
 80079ea:	4680      	mov	r8, r0
 80079ec:	4606      	mov	r6, r0
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	3301      	adds	r3, #1
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	e775      	b.n	80078e2 <_dtoa_r+0xa0a>
 80079f6:	f000 fc5f 	bl	80082b8 <__multadd>
 80079fa:	4631      	mov	r1, r6
 80079fc:	4680      	mov	r8, r0
 80079fe:	2300      	movs	r3, #0
 8007a00:	220a      	movs	r2, #10
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 fc58 	bl	80082b8 <__multadd>
 8007a08:	4606      	mov	r6, r0
 8007a0a:	e7f0      	b.n	80079ee <_dtoa_r+0xb16>
 8007a0c:	f1b9 0f00 	cmp.w	r9, #0
 8007a10:	bfcc      	ite	gt
 8007a12:	464f      	movgt	r7, r9
 8007a14:	2701      	movle	r7, #1
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	9a03      	ldr	r2, [sp, #12]
 8007a1c:	4417      	add	r7, r2
 8007a1e:	4659      	mov	r1, fp
 8007a20:	2201      	movs	r2, #1
 8007a22:	4628      	mov	r0, r5
 8007a24:	9308      	str	r3, [sp, #32]
 8007a26:	f000 fe3d 	bl	80086a4 <__lshift>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4683      	mov	fp, r0
 8007a2e:	f000 fea9 	bl	8008784 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	dcb2      	bgt.n	800799c <_dtoa_r+0xac4>
 8007a36:	d102      	bne.n	8007a3e <_dtoa_r+0xb66>
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d4ae      	bmi.n	800799c <_dtoa_r+0xac4>
 8007a3e:	463b      	mov	r3, r7
 8007a40:	461f      	mov	r7, r3
 8007a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a46:	2a30      	cmp	r2, #48	; 0x30
 8007a48:	d0fa      	beq.n	8007a40 <_dtoa_r+0xb68>
 8007a4a:	e6f9      	b.n	8007840 <_dtoa_r+0x968>
 8007a4c:	9a03      	ldr	r2, [sp, #12]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d1a5      	bne.n	800799e <_dtoa_r+0xac6>
 8007a52:	2331      	movs	r3, #49	; 0x31
 8007a54:	f10a 0a01 	add.w	sl, sl, #1
 8007a58:	e779      	b.n	800794e <_dtoa_r+0xa76>
 8007a5a:	4b14      	ldr	r3, [pc, #80]	; (8007aac <_dtoa_r+0xbd4>)
 8007a5c:	f7ff baa8 	b.w	8006fb0 <_dtoa_r+0xd8>
 8007a60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f47f aa81 	bne.w	8006f6a <_dtoa_r+0x92>
 8007a68:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <_dtoa_r+0xbd8>)
 8007a6a:	f7ff baa1 	b.w	8006fb0 <_dtoa_r+0xd8>
 8007a6e:	f1b9 0f00 	cmp.w	r9, #0
 8007a72:	dc03      	bgt.n	8007a7c <_dtoa_r+0xba4>
 8007a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	f73f aecb 	bgt.w	8007812 <_dtoa_r+0x93a>
 8007a7c:	9f03      	ldr	r7, [sp, #12]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4658      	mov	r0, fp
 8007a82:	f7ff f99d 	bl	8006dc0 <quorem>
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a8c:	f807 3b01 	strb.w	r3, [r7], #1
 8007a90:	1aba      	subs	r2, r7, r2
 8007a92:	4591      	cmp	r9, r2
 8007a94:	ddba      	ble.n	8007a0c <_dtoa_r+0xb34>
 8007a96:	4659      	mov	r1, fp
 8007a98:	2300      	movs	r3, #0
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 fc0b 	bl	80082b8 <__multadd>
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	e7eb      	b.n	8007a7e <_dtoa_r+0xba6>
 8007aa6:	bf00      	nop
 8007aa8:	0800ac10 	.word	0x0800ac10
 8007aac:	0800aa14 	.word	0x0800aa14
 8007ab0:	0800ab91 	.word	0x0800ab91

08007ab4 <rshift>:
 8007ab4:	6903      	ldr	r3, [r0, #16]
 8007ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007abe:	f100 0414 	add.w	r4, r0, #20
 8007ac2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ac6:	dd46      	ble.n	8007b56 <rshift+0xa2>
 8007ac8:	f011 011f 	ands.w	r1, r1, #31
 8007acc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ad0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ad4:	d10c      	bne.n	8007af0 <rshift+0x3c>
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f100 0710 	add.w	r7, r0, #16
 8007adc:	42b1      	cmp	r1, r6
 8007ade:	d335      	bcc.n	8007b4c <rshift+0x98>
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	1eea      	subs	r2, r5, #3
 8007ae6:	4296      	cmp	r6, r2
 8007ae8:	bf38      	it	cc
 8007aea:	2300      	movcc	r3, #0
 8007aec:	4423      	add	r3, r4
 8007aee:	e015      	b.n	8007b1c <rshift+0x68>
 8007af0:	46a1      	mov	r9, r4
 8007af2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007af6:	f1c1 0820 	rsb	r8, r1, #32
 8007afa:	40cf      	lsrs	r7, r1
 8007afc:	f105 0e04 	add.w	lr, r5, #4
 8007b00:	4576      	cmp	r6, lr
 8007b02:	46f4      	mov	ip, lr
 8007b04:	d816      	bhi.n	8007b34 <rshift+0x80>
 8007b06:	1a9a      	subs	r2, r3, r2
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	3a04      	subs	r2, #4
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	42ae      	cmp	r6, r5
 8007b10:	bf38      	it	cc
 8007b12:	2200      	movcc	r2, #0
 8007b14:	18a3      	adds	r3, r4, r2
 8007b16:	50a7      	str	r7, [r4, r2]
 8007b18:	b107      	cbz	r7, 8007b1c <rshift+0x68>
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	eba3 0204 	sub.w	r2, r3, r4
 8007b22:	bf08      	it	eq
 8007b24:	2300      	moveq	r3, #0
 8007b26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b2a:	6102      	str	r2, [r0, #16]
 8007b2c:	bf08      	it	eq
 8007b2e:	6143      	streq	r3, [r0, #20]
 8007b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b34:	f8dc c000 	ldr.w	ip, [ip]
 8007b38:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b3c:	ea4c 0707 	orr.w	r7, ip, r7
 8007b40:	f849 7b04 	str.w	r7, [r9], #4
 8007b44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b48:	40cf      	lsrs	r7, r1
 8007b4a:	e7d9      	b.n	8007b00 <rshift+0x4c>
 8007b4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b50:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b54:	e7c2      	b.n	8007adc <rshift+0x28>
 8007b56:	4623      	mov	r3, r4
 8007b58:	e7e0      	b.n	8007b1c <rshift+0x68>

08007b5a <__hexdig_fun>:
 8007b5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d802      	bhi.n	8007b68 <__hexdig_fun+0xe>
 8007b62:	3820      	subs	r0, #32
 8007b64:	b2c0      	uxtb	r0, r0
 8007b66:	4770      	bx	lr
 8007b68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b6c:	2b05      	cmp	r3, #5
 8007b6e:	d801      	bhi.n	8007b74 <__hexdig_fun+0x1a>
 8007b70:	3847      	subs	r0, #71	; 0x47
 8007b72:	e7f7      	b.n	8007b64 <__hexdig_fun+0xa>
 8007b74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d801      	bhi.n	8007b80 <__hexdig_fun+0x26>
 8007b7c:	3827      	subs	r0, #39	; 0x27
 8007b7e:	e7f1      	b.n	8007b64 <__hexdig_fun+0xa>
 8007b80:	2000      	movs	r0, #0
 8007b82:	4770      	bx	lr

08007b84 <__gethex>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	b08b      	sub	sp, #44	; 0x2c
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	4bb2      	ldr	r3, [pc, #712]	; (8007e58 <__gethex+0x2d4>)
 8007b8e:	9002      	str	r0, [sp, #8]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	468b      	mov	fp, r1
 8007b94:	4618      	mov	r0, r3
 8007b96:	4690      	mov	r8, r2
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	f7f8 fad9 	bl	8000150 <strlen>
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	f8db 2000 	ldr.w	r2, [fp]
 8007ba6:	4403      	add	r3, r0
 8007ba8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007bac:	9306      	str	r3, [sp, #24]
 8007bae:	1c93      	adds	r3, r2, #2
 8007bb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007bb4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007bb8:	32fe      	adds	r2, #254	; 0xfe
 8007bba:	18d1      	adds	r1, r2, r3
 8007bbc:	461f      	mov	r7, r3
 8007bbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007bc2:	9101      	str	r1, [sp, #4]
 8007bc4:	2830      	cmp	r0, #48	; 0x30
 8007bc6:	d0f8      	beq.n	8007bba <__gethex+0x36>
 8007bc8:	f7ff ffc7 	bl	8007b5a <__hexdig_fun>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d13a      	bne.n	8007c48 <__gethex+0xc4>
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	9903      	ldr	r1, [sp, #12]
 8007bd8:	f001 fa26 	bl	8009028 <strncmp>
 8007bdc:	4605      	mov	r5, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d166      	bne.n	8007cb0 <__gethex+0x12c>
 8007be2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007be6:	eb07 060a 	add.w	r6, r7, sl
 8007bea:	f7ff ffb6 	bl	8007b5a <__hexdig_fun>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d060      	beq.n	8007cb4 <__gethex+0x130>
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	7818      	ldrb	r0, [r3, #0]
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	2830      	cmp	r0, #48	; 0x30
 8007bfa:	f103 0301 	add.w	r3, r3, #1
 8007bfe:	d0f9      	beq.n	8007bf4 <__gethex+0x70>
 8007c00:	f7ff ffab 	bl	8007b5a <__hexdig_fun>
 8007c04:	2301      	movs	r3, #1
 8007c06:	fab0 f480 	clz	r4, r0
 8007c0a:	4635      	mov	r5, r6
 8007c0c:	0964      	lsrs	r4, r4, #5
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	463a      	mov	r2, r7
 8007c12:	4616      	mov	r6, r2
 8007c14:	7830      	ldrb	r0, [r6, #0]
 8007c16:	3201      	adds	r2, #1
 8007c18:	f7ff ff9f 	bl	8007b5a <__hexdig_fun>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1f8      	bne.n	8007c12 <__gethex+0x8e>
 8007c20:	4652      	mov	r2, sl
 8007c22:	4630      	mov	r0, r6
 8007c24:	9903      	ldr	r1, [sp, #12]
 8007c26:	f001 f9ff 	bl	8009028 <strncmp>
 8007c2a:	b980      	cbnz	r0, 8007c4e <__gethex+0xca>
 8007c2c:	b94d      	cbnz	r5, 8007c42 <__gethex+0xbe>
 8007c2e:	eb06 050a 	add.w	r5, r6, sl
 8007c32:	462a      	mov	r2, r5
 8007c34:	4616      	mov	r6, r2
 8007c36:	7830      	ldrb	r0, [r6, #0]
 8007c38:	3201      	adds	r2, #1
 8007c3a:	f7ff ff8e 	bl	8007b5a <__hexdig_fun>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d1f8      	bne.n	8007c34 <__gethex+0xb0>
 8007c42:	1bad      	subs	r5, r5, r6
 8007c44:	00ad      	lsls	r5, r5, #2
 8007c46:	e004      	b.n	8007c52 <__gethex+0xce>
 8007c48:	2400      	movs	r4, #0
 8007c4a:	4625      	mov	r5, r4
 8007c4c:	e7e0      	b.n	8007c10 <__gethex+0x8c>
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	d1f7      	bne.n	8007c42 <__gethex+0xbe>
 8007c52:	7833      	ldrb	r3, [r6, #0]
 8007c54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c58:	2b50      	cmp	r3, #80	; 0x50
 8007c5a:	d139      	bne.n	8007cd0 <__gethex+0x14c>
 8007c5c:	7873      	ldrb	r3, [r6, #1]
 8007c5e:	2b2b      	cmp	r3, #43	; 0x2b
 8007c60:	d02a      	beq.n	8007cb8 <__gethex+0x134>
 8007c62:	2b2d      	cmp	r3, #45	; 0x2d
 8007c64:	d02c      	beq.n	8007cc0 <__gethex+0x13c>
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	1c71      	adds	r1, r6, #1
 8007c6c:	7808      	ldrb	r0, [r1, #0]
 8007c6e:	f7ff ff74 	bl	8007b5a <__hexdig_fun>
 8007c72:	1e43      	subs	r3, r0, #1
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b18      	cmp	r3, #24
 8007c78:	d82a      	bhi.n	8007cd0 <__gethex+0x14c>
 8007c7a:	f1a0 0210 	sub.w	r2, r0, #16
 8007c7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c82:	f7ff ff6a 	bl	8007b5a <__hexdig_fun>
 8007c86:	1e43      	subs	r3, r0, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b18      	cmp	r3, #24
 8007c8c:	d91b      	bls.n	8007cc6 <__gethex+0x142>
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	d000      	beq.n	8007c96 <__gethex+0x112>
 8007c94:	4252      	negs	r2, r2
 8007c96:	4415      	add	r5, r2
 8007c98:	f8cb 1000 	str.w	r1, [fp]
 8007c9c:	b1d4      	cbz	r4, 8007cd4 <__gethex+0x150>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf14      	ite	ne
 8007ca4:	2700      	movne	r7, #0
 8007ca6:	2706      	moveq	r7, #6
 8007ca8:	4638      	mov	r0, r7
 8007caa:	b00b      	add	sp, #44	; 0x2c
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	463e      	mov	r6, r7
 8007cb2:	4625      	mov	r5, r4
 8007cb4:	2401      	movs	r4, #1
 8007cb6:	e7cc      	b.n	8007c52 <__gethex+0xce>
 8007cb8:	f04f 0900 	mov.w	r9, #0
 8007cbc:	1cb1      	adds	r1, r6, #2
 8007cbe:	e7d5      	b.n	8007c6c <__gethex+0xe8>
 8007cc0:	f04f 0901 	mov.w	r9, #1
 8007cc4:	e7fa      	b.n	8007cbc <__gethex+0x138>
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	fb03 0202 	mla	r2, r3, r2, r0
 8007ccc:	3a10      	subs	r2, #16
 8007cce:	e7d6      	b.n	8007c7e <__gethex+0xfa>
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	e7e1      	b.n	8007c98 <__gethex+0x114>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	1bf3      	subs	r3, r6, r7
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	2b07      	cmp	r3, #7
 8007cdc:	dc0a      	bgt.n	8007cf4 <__gethex+0x170>
 8007cde:	9802      	ldr	r0, [sp, #8]
 8007ce0:	f000 fa88 	bl	80081f4 <_Balloc>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	b940      	cbnz	r0, 8007cfa <__gethex+0x176>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	21de      	movs	r1, #222	; 0xde
 8007cec:	4b5b      	ldr	r3, [pc, #364]	; (8007e5c <__gethex+0x2d8>)
 8007cee:	485c      	ldr	r0, [pc, #368]	; (8007e60 <__gethex+0x2dc>)
 8007cf0:	f001 f9bc 	bl	800906c <__assert_func>
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	105b      	asrs	r3, r3, #1
 8007cf8:	e7ef      	b.n	8007cda <__gethex+0x156>
 8007cfa:	f04f 0b00 	mov.w	fp, #0
 8007cfe:	f100 0914 	add.w	r9, r0, #20
 8007d02:	f1ca 0301 	rsb	r3, sl, #1
 8007d06:	f8cd 9010 	str.w	r9, [sp, #16]
 8007d0a:	f8cd b004 	str.w	fp, [sp, #4]
 8007d0e:	9308      	str	r3, [sp, #32]
 8007d10:	42b7      	cmp	r7, r6
 8007d12:	d33f      	bcc.n	8007d94 <__gethex+0x210>
 8007d14:	9f04      	ldr	r7, [sp, #16]
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	f847 3b04 	str.w	r3, [r7], #4
 8007d1c:	eba7 0709 	sub.w	r7, r7, r9
 8007d20:	10bf      	asrs	r7, r7, #2
 8007d22:	6127      	str	r7, [r4, #16]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fb57 	bl	80083d8 <__hi0bits>
 8007d2a:	017f      	lsls	r7, r7, #5
 8007d2c:	f8d8 6000 	ldr.w	r6, [r8]
 8007d30:	1a3f      	subs	r7, r7, r0
 8007d32:	42b7      	cmp	r7, r6
 8007d34:	dd62      	ble.n	8007dfc <__gethex+0x278>
 8007d36:	1bbf      	subs	r7, r7, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fef1 	bl	8008b22 <__any_on>
 8007d40:	4682      	mov	sl, r0
 8007d42:	b1a8      	cbz	r0, 8007d70 <__gethex+0x1ec>
 8007d44:	f04f 0a01 	mov.w	sl, #1
 8007d48:	1e7b      	subs	r3, r7, #1
 8007d4a:	1159      	asrs	r1, r3, #5
 8007d4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d50:	f003 021f 	and.w	r2, r3, #31
 8007d54:	fa0a f202 	lsl.w	r2, sl, r2
 8007d58:	420a      	tst	r2, r1
 8007d5a:	d009      	beq.n	8007d70 <__gethex+0x1ec>
 8007d5c:	4553      	cmp	r3, sl
 8007d5e:	dd05      	ble.n	8007d6c <__gethex+0x1e8>
 8007d60:	4620      	mov	r0, r4
 8007d62:	1eb9      	subs	r1, r7, #2
 8007d64:	f000 fedd 	bl	8008b22 <__any_on>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d144      	bne.n	8007df6 <__gethex+0x272>
 8007d6c:	f04f 0a02 	mov.w	sl, #2
 8007d70:	4639      	mov	r1, r7
 8007d72:	4620      	mov	r0, r4
 8007d74:	f7ff fe9e 	bl	8007ab4 <rshift>
 8007d78:	443d      	add	r5, r7
 8007d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d7e:	42ab      	cmp	r3, r5
 8007d80:	da4a      	bge.n	8007e18 <__gethex+0x294>
 8007d82:	4621      	mov	r1, r4
 8007d84:	9802      	ldr	r0, [sp, #8]
 8007d86:	f000 fa75 	bl	8008274 <_Bfree>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d8e:	27a3      	movs	r7, #163	; 0xa3
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	e789      	b.n	8007ca8 <__gethex+0x124>
 8007d94:	1e73      	subs	r3, r6, #1
 8007d96:	9a06      	ldr	r2, [sp, #24]
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d019      	beq.n	8007dd6 <__gethex+0x252>
 8007da2:	f1bb 0f20 	cmp.w	fp, #32
 8007da6:	d107      	bne.n	8007db8 <__gethex+0x234>
 8007da8:	9b04      	ldr	r3, [sp, #16]
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	f843 2b04 	str.w	r2, [r3], #4
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	2300      	movs	r3, #0
 8007db4:	469b      	mov	fp, r3
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007dbc:	f7ff fecd 	bl	8007b5a <__hexdig_fun>
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	f000 000f 	and.w	r0, r0, #15
 8007dc6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007dca:	4303      	orrs	r3, r0
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f10b 0b04 	add.w	fp, fp, #4
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	e00d      	b.n	8007df2 <__gethex+0x26e>
 8007dd6:	9a08      	ldr	r2, [sp, #32]
 8007dd8:	1e73      	subs	r3, r6, #1
 8007dda:	4413      	add	r3, r2
 8007ddc:	42bb      	cmp	r3, r7
 8007dde:	d3e0      	bcc.n	8007da2 <__gethex+0x21e>
 8007de0:	4618      	mov	r0, r3
 8007de2:	4652      	mov	r2, sl
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	9309      	str	r3, [sp, #36]	; 0x24
 8007de8:	f001 f91e 	bl	8009028 <strncmp>
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d1d7      	bne.n	8007da2 <__gethex+0x21e>
 8007df2:	461e      	mov	r6, r3
 8007df4:	e78c      	b.n	8007d10 <__gethex+0x18c>
 8007df6:	f04f 0a03 	mov.w	sl, #3
 8007dfa:	e7b9      	b.n	8007d70 <__gethex+0x1ec>
 8007dfc:	da09      	bge.n	8007e12 <__gethex+0x28e>
 8007dfe:	1bf7      	subs	r7, r6, r7
 8007e00:	4621      	mov	r1, r4
 8007e02:	463a      	mov	r2, r7
 8007e04:	9802      	ldr	r0, [sp, #8]
 8007e06:	f000 fc4d 	bl	80086a4 <__lshift>
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	1bed      	subs	r5, r5, r7
 8007e0e:	f100 0914 	add.w	r9, r0, #20
 8007e12:	f04f 0a00 	mov.w	sl, #0
 8007e16:	e7b0      	b.n	8007d7a <__gethex+0x1f6>
 8007e18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e1c:	42a8      	cmp	r0, r5
 8007e1e:	dd72      	ble.n	8007f06 <__gethex+0x382>
 8007e20:	1b45      	subs	r5, r0, r5
 8007e22:	42ae      	cmp	r6, r5
 8007e24:	dc35      	bgt.n	8007e92 <__gethex+0x30e>
 8007e26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d029      	beq.n	8007e82 <__gethex+0x2fe>
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d02b      	beq.n	8007e8a <__gethex+0x306>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d11c      	bne.n	8007e70 <__gethex+0x2ec>
 8007e36:	42ae      	cmp	r6, r5
 8007e38:	d11a      	bne.n	8007e70 <__gethex+0x2ec>
 8007e3a:	2e01      	cmp	r6, #1
 8007e3c:	d112      	bne.n	8007e64 <__gethex+0x2e0>
 8007e3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e42:	9a05      	ldr	r2, [sp, #20]
 8007e44:	2762      	movs	r7, #98	; 0x62
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	f8c9 3000 	str.w	r3, [r9]
 8007e50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e52:	601c      	str	r4, [r3, #0]
 8007e54:	e728      	b.n	8007ca8 <__gethex+0x124>
 8007e56:	bf00      	nop
 8007e58:	0800ac88 	.word	0x0800ac88
 8007e5c:	0800ac10 	.word	0x0800ac10
 8007e60:	0800ac21 	.word	0x0800ac21
 8007e64:	4620      	mov	r0, r4
 8007e66:	1e71      	subs	r1, r6, #1
 8007e68:	f000 fe5b 	bl	8008b22 <__any_on>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1e6      	bne.n	8007e3e <__gethex+0x2ba>
 8007e70:	4621      	mov	r1, r4
 8007e72:	9802      	ldr	r0, [sp, #8]
 8007e74:	f000 f9fe 	bl	8008274 <_Bfree>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e7c:	2750      	movs	r7, #80	; 0x50
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e712      	b.n	8007ca8 <__gethex+0x124>
 8007e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f3      	bne.n	8007e70 <__gethex+0x2ec>
 8007e88:	e7d9      	b.n	8007e3e <__gethex+0x2ba>
 8007e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1d6      	bne.n	8007e3e <__gethex+0x2ba>
 8007e90:	e7ee      	b.n	8007e70 <__gethex+0x2ec>
 8007e92:	1e6f      	subs	r7, r5, #1
 8007e94:	f1ba 0f00 	cmp.w	sl, #0
 8007e98:	d132      	bne.n	8007f00 <__gethex+0x37c>
 8007e9a:	b127      	cbz	r7, 8007ea6 <__gethex+0x322>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fe3f 	bl	8008b22 <__any_on>
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	117b      	asrs	r3, r7, #5
 8007eaa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007eae:	f007 071f 	and.w	r7, r7, #31
 8007eb2:	fa01 f707 	lsl.w	r7, r1, r7
 8007eb6:	421f      	tst	r7, r3
 8007eb8:	f04f 0702 	mov.w	r7, #2
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	bf18      	it	ne
 8007ec2:	f04a 0a02 	orrne.w	sl, sl, #2
 8007ec6:	1b76      	subs	r6, r6, r5
 8007ec8:	f7ff fdf4 	bl	8007ab4 <rshift>
 8007ecc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	d048      	beq.n	8007f68 <__gethex+0x3e4>
 8007ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d015      	beq.n	8007f0a <__gethex+0x386>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d017      	beq.n	8007f12 <__gethex+0x38e>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d109      	bne.n	8007efa <__gethex+0x376>
 8007ee6:	f01a 0f02 	tst.w	sl, #2
 8007eea:	d006      	beq.n	8007efa <__gethex+0x376>
 8007eec:	f8d9 0000 	ldr.w	r0, [r9]
 8007ef0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007ef4:	f01a 0f01 	tst.w	sl, #1
 8007ef8:	d10e      	bne.n	8007f18 <__gethex+0x394>
 8007efa:	f047 0710 	orr.w	r7, r7, #16
 8007efe:	e033      	b.n	8007f68 <__gethex+0x3e4>
 8007f00:	f04f 0a01 	mov.w	sl, #1
 8007f04:	e7cf      	b.n	8007ea6 <__gethex+0x322>
 8007f06:	2701      	movs	r7, #1
 8007f08:	e7e2      	b.n	8007ed0 <__gethex+0x34c>
 8007f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f0c:	f1c3 0301 	rsb	r3, r3, #1
 8007f10:	9315      	str	r3, [sp, #84]	; 0x54
 8007f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <__gethex+0x376>
 8007f18:	f04f 0c00 	mov.w	ip, #0
 8007f1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f20:	f104 0314 	add.w	r3, r4, #20
 8007f24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f36:	d01c      	beq.n	8007f72 <__gethex+0x3ee>
 8007f38:	3201      	adds	r2, #1
 8007f3a:	6002      	str	r2, [r0, #0]
 8007f3c:	2f02      	cmp	r7, #2
 8007f3e:	f104 0314 	add.w	r3, r4, #20
 8007f42:	d13d      	bne.n	8007fc0 <__gethex+0x43c>
 8007f44:	f8d8 2000 	ldr.w	r2, [r8]
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	42b2      	cmp	r2, r6
 8007f4c:	d10a      	bne.n	8007f64 <__gethex+0x3e0>
 8007f4e:	2201      	movs	r2, #1
 8007f50:	1171      	asrs	r1, r6, #5
 8007f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f56:	f006 061f 	and.w	r6, r6, #31
 8007f5a:	fa02 f606 	lsl.w	r6, r2, r6
 8007f5e:	421e      	tst	r6, r3
 8007f60:	bf18      	it	ne
 8007f62:	4617      	movne	r7, r2
 8007f64:	f047 0720 	orr.w	r7, r7, #32
 8007f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f6a:	601c      	str	r4, [r3, #0]
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	601d      	str	r5, [r3, #0]
 8007f70:	e69a      	b.n	8007ca8 <__gethex+0x124>
 8007f72:	4299      	cmp	r1, r3
 8007f74:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f78:	d8d8      	bhi.n	8007f2c <__gethex+0x3a8>
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	459b      	cmp	fp, r3
 8007f7e:	db17      	blt.n	8007fb0 <__gethex+0x42c>
 8007f80:	6861      	ldr	r1, [r4, #4]
 8007f82:	9802      	ldr	r0, [sp, #8]
 8007f84:	3101      	adds	r1, #1
 8007f86:	f000 f935 	bl	80081f4 <_Balloc>
 8007f8a:	4681      	mov	r9, r0
 8007f8c:	b918      	cbnz	r0, 8007f96 <__gethex+0x412>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	2184      	movs	r1, #132	; 0x84
 8007f92:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <__gethex+0x474>)
 8007f94:	e6ab      	b.n	8007cee <__gethex+0x16a>
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	f104 010c 	add.w	r1, r4, #12
 8007f9c:	3202      	adds	r2, #2
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	300c      	adds	r0, #12
 8007fa2:	f000 f919 	bl	80081d8 <memcpy>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	9802      	ldr	r0, [sp, #8]
 8007faa:	f000 f963 	bl	8008274 <_Bfree>
 8007fae:	464c      	mov	r4, r9
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	6122      	str	r2, [r4, #16]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fbc:	615a      	str	r2, [r3, #20]
 8007fbe:	e7bd      	b.n	8007f3c <__gethex+0x3b8>
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	455a      	cmp	r2, fp
 8007fc4:	dd0b      	ble.n	8007fde <__gethex+0x45a>
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f7ff fd73 	bl	8007ab4 <rshift>
 8007fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fd2:	3501      	adds	r5, #1
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	f6ff aed4 	blt.w	8007d82 <__gethex+0x1fe>
 8007fda:	2701      	movs	r7, #1
 8007fdc:	e7c2      	b.n	8007f64 <__gethex+0x3e0>
 8007fde:	f016 061f 	ands.w	r6, r6, #31
 8007fe2:	d0fa      	beq.n	8007fda <__gethex+0x456>
 8007fe4:	4453      	add	r3, sl
 8007fe6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007fea:	f000 f9f5 	bl	80083d8 <__hi0bits>
 8007fee:	f1c6 0620 	rsb	r6, r6, #32
 8007ff2:	42b0      	cmp	r0, r6
 8007ff4:	dbe7      	blt.n	8007fc6 <__gethex+0x442>
 8007ff6:	e7f0      	b.n	8007fda <__gethex+0x456>
 8007ff8:	0800ac10 	.word	0x0800ac10

08007ffc <L_shift>:
 8007ffc:	f1c2 0208 	rsb	r2, r2, #8
 8008000:	0092      	lsls	r2, r2, #2
 8008002:	b570      	push	{r4, r5, r6, lr}
 8008004:	f1c2 0620 	rsb	r6, r2, #32
 8008008:	6843      	ldr	r3, [r0, #4]
 800800a:	6804      	ldr	r4, [r0, #0]
 800800c:	fa03 f506 	lsl.w	r5, r3, r6
 8008010:	432c      	orrs	r4, r5
 8008012:	40d3      	lsrs	r3, r2
 8008014:	6004      	str	r4, [r0, #0]
 8008016:	f840 3f04 	str.w	r3, [r0, #4]!
 800801a:	4288      	cmp	r0, r1
 800801c:	d3f4      	bcc.n	8008008 <L_shift+0xc>
 800801e:	bd70      	pop	{r4, r5, r6, pc}

08008020 <__match>:
 8008020:	b530      	push	{r4, r5, lr}
 8008022:	6803      	ldr	r3, [r0, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802a:	b914      	cbnz	r4, 8008032 <__match+0x12>
 800802c:	6003      	str	r3, [r0, #0]
 800802e:	2001      	movs	r0, #1
 8008030:	bd30      	pop	{r4, r5, pc}
 8008032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800803a:	2d19      	cmp	r5, #25
 800803c:	bf98      	it	ls
 800803e:	3220      	addls	r2, #32
 8008040:	42a2      	cmp	r2, r4
 8008042:	d0f0      	beq.n	8008026 <__match+0x6>
 8008044:	2000      	movs	r0, #0
 8008046:	e7f3      	b.n	8008030 <__match+0x10>

08008048 <__hexnan>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	2500      	movs	r5, #0
 800804e:	680b      	ldr	r3, [r1, #0]
 8008050:	4682      	mov	sl, r0
 8008052:	115e      	asrs	r6, r3, #5
 8008054:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008058:	f013 031f 	ands.w	r3, r3, #31
 800805c:	bf18      	it	ne
 800805e:	3604      	addne	r6, #4
 8008060:	1f37      	subs	r7, r6, #4
 8008062:	46b9      	mov	r9, r7
 8008064:	463c      	mov	r4, r7
 8008066:	46ab      	mov	fp, r5
 8008068:	b087      	sub	sp, #28
 800806a:	4690      	mov	r8, r2
 800806c:	6802      	ldr	r2, [r0, #0]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	f846 5c04 	str.w	r5, [r6, #-4]
 8008074:	9502      	str	r5, [sp, #8]
 8008076:	7851      	ldrb	r1, [r2, #1]
 8008078:	1c53      	adds	r3, r2, #1
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	b341      	cbz	r1, 80080d0 <__hexnan+0x88>
 800807e:	4608      	mov	r0, r1
 8008080:	9205      	str	r2, [sp, #20]
 8008082:	9104      	str	r1, [sp, #16]
 8008084:	f7ff fd69 	bl	8007b5a <__hexdig_fun>
 8008088:	2800      	cmp	r0, #0
 800808a:	d14f      	bne.n	800812c <__hexnan+0xe4>
 800808c:	9904      	ldr	r1, [sp, #16]
 800808e:	9a05      	ldr	r2, [sp, #20]
 8008090:	2920      	cmp	r1, #32
 8008092:	d818      	bhi.n	80080c6 <__hexnan+0x7e>
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	459b      	cmp	fp, r3
 8008098:	dd13      	ble.n	80080c2 <__hexnan+0x7a>
 800809a:	454c      	cmp	r4, r9
 800809c:	d206      	bcs.n	80080ac <__hexnan+0x64>
 800809e:	2d07      	cmp	r5, #7
 80080a0:	dc04      	bgt.n	80080ac <__hexnan+0x64>
 80080a2:	462a      	mov	r2, r5
 80080a4:	4649      	mov	r1, r9
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7ff ffa8 	bl	8007ffc <L_shift>
 80080ac:	4544      	cmp	r4, r8
 80080ae:	d950      	bls.n	8008152 <__hexnan+0x10a>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f1a4 0904 	sub.w	r9, r4, #4
 80080b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ba:	461d      	mov	r5, r3
 80080bc:	464c      	mov	r4, r9
 80080be:	f8cd b008 	str.w	fp, [sp, #8]
 80080c2:	9a03      	ldr	r2, [sp, #12]
 80080c4:	e7d7      	b.n	8008076 <__hexnan+0x2e>
 80080c6:	2929      	cmp	r1, #41	; 0x29
 80080c8:	d156      	bne.n	8008178 <__hexnan+0x130>
 80080ca:	3202      	adds	r2, #2
 80080cc:	f8ca 2000 	str.w	r2, [sl]
 80080d0:	f1bb 0f00 	cmp.w	fp, #0
 80080d4:	d050      	beq.n	8008178 <__hexnan+0x130>
 80080d6:	454c      	cmp	r4, r9
 80080d8:	d206      	bcs.n	80080e8 <__hexnan+0xa0>
 80080da:	2d07      	cmp	r5, #7
 80080dc:	dc04      	bgt.n	80080e8 <__hexnan+0xa0>
 80080de:	462a      	mov	r2, r5
 80080e0:	4649      	mov	r1, r9
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff ff8a 	bl	8007ffc <L_shift>
 80080e8:	4544      	cmp	r4, r8
 80080ea:	d934      	bls.n	8008156 <__hexnan+0x10e>
 80080ec:	4623      	mov	r3, r4
 80080ee:	f1a8 0204 	sub.w	r2, r8, #4
 80080f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80080f6:	429f      	cmp	r7, r3
 80080f8:	f842 1f04 	str.w	r1, [r2, #4]!
 80080fc:	d2f9      	bcs.n	80080f2 <__hexnan+0xaa>
 80080fe:	1b3b      	subs	r3, r7, r4
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	3304      	adds	r3, #4
 8008106:	3401      	adds	r4, #1
 8008108:	3e03      	subs	r6, #3
 800810a:	42b4      	cmp	r4, r6
 800810c:	bf88      	it	hi
 800810e:	2304      	movhi	r3, #4
 8008110:	2200      	movs	r2, #0
 8008112:	4443      	add	r3, r8
 8008114:	f843 2b04 	str.w	r2, [r3], #4
 8008118:	429f      	cmp	r7, r3
 800811a:	d2fb      	bcs.n	8008114 <__hexnan+0xcc>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	b91b      	cbnz	r3, 8008128 <__hexnan+0xe0>
 8008120:	4547      	cmp	r7, r8
 8008122:	d127      	bne.n	8008174 <__hexnan+0x12c>
 8008124:	2301      	movs	r3, #1
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	2005      	movs	r0, #5
 800812a:	e026      	b.n	800817a <__hexnan+0x132>
 800812c:	3501      	adds	r5, #1
 800812e:	2d08      	cmp	r5, #8
 8008130:	f10b 0b01 	add.w	fp, fp, #1
 8008134:	dd06      	ble.n	8008144 <__hexnan+0xfc>
 8008136:	4544      	cmp	r4, r8
 8008138:	d9c3      	bls.n	80080c2 <__hexnan+0x7a>
 800813a:	2300      	movs	r3, #0
 800813c:	2501      	movs	r5, #1
 800813e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008142:	3c04      	subs	r4, #4
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	f000 000f 	and.w	r0, r0, #15
 800814a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	e7b7      	b.n	80080c2 <__hexnan+0x7a>
 8008152:	2508      	movs	r5, #8
 8008154:	e7b5      	b.n	80080c2 <__hexnan+0x7a>
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0df      	beq.n	800811c <__hexnan+0xd4>
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	f1c3 0320 	rsb	r3, r3, #32
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
 8008168:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800816c:	401a      	ands	r2, r3
 800816e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008172:	e7d3      	b.n	800811c <__hexnan+0xd4>
 8008174:	3f04      	subs	r7, #4
 8008176:	e7d1      	b.n	800811c <__hexnan+0xd4>
 8008178:	2004      	movs	r0, #4
 800817a:	b007      	add	sp, #28
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008180 <_localeconv_r>:
 8008180:	4800      	ldr	r0, [pc, #0]	; (8008184 <_localeconv_r+0x4>)
 8008182:	4770      	bx	lr
 8008184:	2000016c 	.word	0x2000016c

08008188 <malloc>:
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <malloc+0xc>)
 800818a:	4601      	mov	r1, r0
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f000 bd65 	b.w	8008c5c <_malloc_r>
 8008192:	bf00      	nop
 8008194:	20000014 	.word	0x20000014

08008198 <__ascii_mbtowc>:
 8008198:	b082      	sub	sp, #8
 800819a:	b901      	cbnz	r1, 800819e <__ascii_mbtowc+0x6>
 800819c:	a901      	add	r1, sp, #4
 800819e:	b142      	cbz	r2, 80081b2 <__ascii_mbtowc+0x1a>
 80081a0:	b14b      	cbz	r3, 80081b6 <__ascii_mbtowc+0x1e>
 80081a2:	7813      	ldrb	r3, [r2, #0]
 80081a4:	600b      	str	r3, [r1, #0]
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	1e10      	subs	r0, r2, #0
 80081aa:	bf18      	it	ne
 80081ac:	2001      	movne	r0, #1
 80081ae:	b002      	add	sp, #8
 80081b0:	4770      	bx	lr
 80081b2:	4610      	mov	r0, r2
 80081b4:	e7fb      	b.n	80081ae <__ascii_mbtowc+0x16>
 80081b6:	f06f 0001 	mvn.w	r0, #1
 80081ba:	e7f8      	b.n	80081ae <__ascii_mbtowc+0x16>

080081bc <memchr>:
 80081bc:	4603      	mov	r3, r0
 80081be:	b510      	push	{r4, lr}
 80081c0:	b2c9      	uxtb	r1, r1
 80081c2:	4402      	add	r2, r0
 80081c4:	4293      	cmp	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	d101      	bne.n	80081ce <memchr+0x12>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e003      	b.n	80081d6 <memchr+0x1a>
 80081ce:	7804      	ldrb	r4, [r0, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	428c      	cmp	r4, r1
 80081d4:	d1f6      	bne.n	80081c4 <memchr+0x8>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <memcpy>:
 80081d8:	440a      	add	r2, r1
 80081da:	4291      	cmp	r1, r2
 80081dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e0:	d100      	bne.n	80081e4 <memcpy+0xc>
 80081e2:	4770      	bx	lr
 80081e4:	b510      	push	{r4, lr}
 80081e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ea:	4291      	cmp	r1, r2
 80081ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f0:	d1f9      	bne.n	80081e6 <memcpy+0xe>
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <_Balloc>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	b976      	cbnz	r6, 800821c <_Balloc+0x28>
 80081fe:	2010      	movs	r0, #16
 8008200:	f7ff ffc2 	bl	8008188 <malloc>
 8008204:	4602      	mov	r2, r0
 8008206:	6260      	str	r0, [r4, #36]	; 0x24
 8008208:	b920      	cbnz	r0, 8008214 <_Balloc+0x20>
 800820a:	2166      	movs	r1, #102	; 0x66
 800820c:	4b17      	ldr	r3, [pc, #92]	; (800826c <_Balloc+0x78>)
 800820e:	4818      	ldr	r0, [pc, #96]	; (8008270 <_Balloc+0x7c>)
 8008210:	f000 ff2c 	bl	800906c <__assert_func>
 8008214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008218:	6006      	str	r6, [r0, #0]
 800821a:	60c6      	str	r6, [r0, #12]
 800821c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800821e:	68f3      	ldr	r3, [r6, #12]
 8008220:	b183      	cbz	r3, 8008244 <_Balloc+0x50>
 8008222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800822a:	b9b8      	cbnz	r0, 800825c <_Balloc+0x68>
 800822c:	2101      	movs	r1, #1
 800822e:	fa01 f605 	lsl.w	r6, r1, r5
 8008232:	1d72      	adds	r2, r6, #5
 8008234:	4620      	mov	r0, r4
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	f000 fc94 	bl	8008b64 <_calloc_r>
 800823c:	b160      	cbz	r0, 8008258 <_Balloc+0x64>
 800823e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008242:	e00e      	b.n	8008262 <_Balloc+0x6e>
 8008244:	2221      	movs	r2, #33	; 0x21
 8008246:	2104      	movs	r1, #4
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fc8b 	bl	8008b64 <_calloc_r>
 800824e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008250:	60f0      	str	r0, [r6, #12]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e4      	bne.n	8008222 <_Balloc+0x2e>
 8008258:	2000      	movs	r0, #0
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	6802      	ldr	r2, [r0, #0]
 800825e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008262:	2300      	movs	r3, #0
 8008264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008268:	e7f7      	b.n	800825a <_Balloc+0x66>
 800826a:	bf00      	nop
 800826c:	0800ab9e 	.word	0x0800ab9e
 8008270:	0800ac9c 	.word	0x0800ac9c

08008274 <_Bfree>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	b976      	cbnz	r6, 800829c <_Bfree+0x28>
 800827e:	2010      	movs	r0, #16
 8008280:	f7ff ff82 	bl	8008188 <malloc>
 8008284:	4602      	mov	r2, r0
 8008286:	6268      	str	r0, [r5, #36]	; 0x24
 8008288:	b920      	cbnz	r0, 8008294 <_Bfree+0x20>
 800828a:	218a      	movs	r1, #138	; 0x8a
 800828c:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <_Bfree+0x3c>)
 800828e:	4809      	ldr	r0, [pc, #36]	; (80082b4 <_Bfree+0x40>)
 8008290:	f000 feec 	bl	800906c <__assert_func>
 8008294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008298:	6006      	str	r6, [r0, #0]
 800829a:	60c6      	str	r6, [r0, #12]
 800829c:	b13c      	cbz	r4, 80082ae <_Bfree+0x3a>
 800829e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a0:	6862      	ldr	r2, [r4, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082a8:	6021      	str	r1, [r4, #0]
 80082aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	0800ab9e 	.word	0x0800ab9e
 80082b4:	0800ac9c 	.word	0x0800ac9c

080082b8 <__multadd>:
 80082b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082bc:	4607      	mov	r7, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	461e      	mov	r6, r3
 80082c2:	2000      	movs	r0, #0
 80082c4:	690d      	ldr	r5, [r1, #16]
 80082c6:	f101 0c14 	add.w	ip, r1, #20
 80082ca:	f8dc 3000 	ldr.w	r3, [ip]
 80082ce:	3001      	adds	r0, #1
 80082d0:	b299      	uxth	r1, r3
 80082d2:	fb02 6101 	mla	r1, r2, r1, r6
 80082d6:	0c1e      	lsrs	r6, r3, #16
 80082d8:	0c0b      	lsrs	r3, r1, #16
 80082da:	fb02 3306 	mla	r3, r2, r6, r3
 80082de:	b289      	uxth	r1, r1
 80082e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082e4:	4285      	cmp	r5, r0
 80082e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ea:	f84c 1b04 	str.w	r1, [ip], #4
 80082ee:	dcec      	bgt.n	80082ca <__multadd+0x12>
 80082f0:	b30e      	cbz	r6, 8008336 <__multadd+0x7e>
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc19      	bgt.n	800832c <__multadd+0x74>
 80082f8:	6861      	ldr	r1, [r4, #4]
 80082fa:	4638      	mov	r0, r7
 80082fc:	3101      	adds	r1, #1
 80082fe:	f7ff ff79 	bl	80081f4 <_Balloc>
 8008302:	4680      	mov	r8, r0
 8008304:	b928      	cbnz	r0, 8008312 <__multadd+0x5a>
 8008306:	4602      	mov	r2, r0
 8008308:	21b5      	movs	r1, #181	; 0xb5
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <__multadd+0x84>)
 800830c:	480c      	ldr	r0, [pc, #48]	; (8008340 <__multadd+0x88>)
 800830e:	f000 fead 	bl	800906c <__assert_func>
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	f104 010c 	add.w	r1, r4, #12
 8008318:	3202      	adds	r2, #2
 800831a:	0092      	lsls	r2, r2, #2
 800831c:	300c      	adds	r0, #12
 800831e:	f7ff ff5b 	bl	80081d8 <memcpy>
 8008322:	4621      	mov	r1, r4
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff ffa5 	bl	8008274 <_Bfree>
 800832a:	4644      	mov	r4, r8
 800832c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008330:	3501      	adds	r5, #1
 8008332:	615e      	str	r6, [r3, #20]
 8008334:	6125      	str	r5, [r4, #16]
 8008336:	4620      	mov	r0, r4
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	0800ac10 	.word	0x0800ac10
 8008340:	0800ac9c 	.word	0x0800ac9c

08008344 <__s2b>:
 8008344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008348:	4615      	mov	r5, r2
 800834a:	2209      	movs	r2, #9
 800834c:	461f      	mov	r7, r3
 800834e:	3308      	adds	r3, #8
 8008350:	460c      	mov	r4, r1
 8008352:	fb93 f3f2 	sdiv	r3, r3, r2
 8008356:	4606      	mov	r6, r0
 8008358:	2201      	movs	r2, #1
 800835a:	2100      	movs	r1, #0
 800835c:	429a      	cmp	r2, r3
 800835e:	db09      	blt.n	8008374 <__s2b+0x30>
 8008360:	4630      	mov	r0, r6
 8008362:	f7ff ff47 	bl	80081f4 <_Balloc>
 8008366:	b940      	cbnz	r0, 800837a <__s2b+0x36>
 8008368:	4602      	mov	r2, r0
 800836a:	21ce      	movs	r1, #206	; 0xce
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <__s2b+0x8c>)
 800836e:	4819      	ldr	r0, [pc, #100]	; (80083d4 <__s2b+0x90>)
 8008370:	f000 fe7c 	bl	800906c <__assert_func>
 8008374:	0052      	lsls	r2, r2, #1
 8008376:	3101      	adds	r1, #1
 8008378:	e7f0      	b.n	800835c <__s2b+0x18>
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	2d09      	cmp	r5, #9
 800837e:	6143      	str	r3, [r0, #20]
 8008380:	f04f 0301 	mov.w	r3, #1
 8008384:	6103      	str	r3, [r0, #16]
 8008386:	dd16      	ble.n	80083b6 <__s2b+0x72>
 8008388:	f104 0909 	add.w	r9, r4, #9
 800838c:	46c8      	mov	r8, r9
 800838e:	442c      	add	r4, r5
 8008390:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008394:	4601      	mov	r1, r0
 8008396:	220a      	movs	r2, #10
 8008398:	4630      	mov	r0, r6
 800839a:	3b30      	subs	r3, #48	; 0x30
 800839c:	f7ff ff8c 	bl	80082b8 <__multadd>
 80083a0:	45a0      	cmp	r8, r4
 80083a2:	d1f5      	bne.n	8008390 <__s2b+0x4c>
 80083a4:	f1a5 0408 	sub.w	r4, r5, #8
 80083a8:	444c      	add	r4, r9
 80083aa:	1b2d      	subs	r5, r5, r4
 80083ac:	1963      	adds	r3, r4, r5
 80083ae:	42bb      	cmp	r3, r7
 80083b0:	db04      	blt.n	80083bc <__s2b+0x78>
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	2509      	movs	r5, #9
 80083b8:	340a      	adds	r4, #10
 80083ba:	e7f6      	b.n	80083aa <__s2b+0x66>
 80083bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083c0:	4601      	mov	r1, r0
 80083c2:	220a      	movs	r2, #10
 80083c4:	4630      	mov	r0, r6
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	f7ff ff76 	bl	80082b8 <__multadd>
 80083cc:	e7ee      	b.n	80083ac <__s2b+0x68>
 80083ce:	bf00      	nop
 80083d0:	0800ac10 	.word	0x0800ac10
 80083d4:	0800ac9c 	.word	0x0800ac9c

080083d8 <__hi0bits>:
 80083d8:	0c02      	lsrs	r2, r0, #16
 80083da:	0412      	lsls	r2, r2, #16
 80083dc:	4603      	mov	r3, r0
 80083de:	b9ca      	cbnz	r2, 8008414 <__hi0bits+0x3c>
 80083e0:	0403      	lsls	r3, r0, #16
 80083e2:	2010      	movs	r0, #16
 80083e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083e8:	bf04      	itt	eq
 80083ea:	021b      	lsleq	r3, r3, #8
 80083ec:	3008      	addeq	r0, #8
 80083ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083f2:	bf04      	itt	eq
 80083f4:	011b      	lsleq	r3, r3, #4
 80083f6:	3004      	addeq	r0, #4
 80083f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083fc:	bf04      	itt	eq
 80083fe:	009b      	lsleq	r3, r3, #2
 8008400:	3002      	addeq	r0, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	db05      	blt.n	8008412 <__hi0bits+0x3a>
 8008406:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800840a:	f100 0001 	add.w	r0, r0, #1
 800840e:	bf08      	it	eq
 8008410:	2020      	moveq	r0, #32
 8008412:	4770      	bx	lr
 8008414:	2000      	movs	r0, #0
 8008416:	e7e5      	b.n	80083e4 <__hi0bits+0xc>

08008418 <__lo0bits>:
 8008418:	6803      	ldr	r3, [r0, #0]
 800841a:	4602      	mov	r2, r0
 800841c:	f013 0007 	ands.w	r0, r3, #7
 8008420:	d00b      	beq.n	800843a <__lo0bits+0x22>
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	d421      	bmi.n	800846a <__lo0bits+0x52>
 8008426:	0798      	lsls	r0, r3, #30
 8008428:	bf49      	itett	mi
 800842a:	085b      	lsrmi	r3, r3, #1
 800842c:	089b      	lsrpl	r3, r3, #2
 800842e:	2001      	movmi	r0, #1
 8008430:	6013      	strmi	r3, [r2, #0]
 8008432:	bf5c      	itt	pl
 8008434:	2002      	movpl	r0, #2
 8008436:	6013      	strpl	r3, [r2, #0]
 8008438:	4770      	bx	lr
 800843a:	b299      	uxth	r1, r3
 800843c:	b909      	cbnz	r1, 8008442 <__lo0bits+0x2a>
 800843e:	2010      	movs	r0, #16
 8008440:	0c1b      	lsrs	r3, r3, #16
 8008442:	b2d9      	uxtb	r1, r3
 8008444:	b909      	cbnz	r1, 800844a <__lo0bits+0x32>
 8008446:	3008      	adds	r0, #8
 8008448:	0a1b      	lsrs	r3, r3, #8
 800844a:	0719      	lsls	r1, r3, #28
 800844c:	bf04      	itt	eq
 800844e:	091b      	lsreq	r3, r3, #4
 8008450:	3004      	addeq	r0, #4
 8008452:	0799      	lsls	r1, r3, #30
 8008454:	bf04      	itt	eq
 8008456:	089b      	lsreq	r3, r3, #2
 8008458:	3002      	addeq	r0, #2
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	d403      	bmi.n	8008466 <__lo0bits+0x4e>
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	f100 0001 	add.w	r0, r0, #1
 8008464:	d003      	beq.n	800846e <__lo0bits+0x56>
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	4770      	bx	lr
 800846a:	2000      	movs	r0, #0
 800846c:	4770      	bx	lr
 800846e:	2020      	movs	r0, #32
 8008470:	4770      	bx	lr
	...

08008474 <__i2b>:
 8008474:	b510      	push	{r4, lr}
 8008476:	460c      	mov	r4, r1
 8008478:	2101      	movs	r1, #1
 800847a:	f7ff febb 	bl	80081f4 <_Balloc>
 800847e:	4602      	mov	r2, r0
 8008480:	b928      	cbnz	r0, 800848e <__i2b+0x1a>
 8008482:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <__i2b+0x24>)
 8008488:	4804      	ldr	r0, [pc, #16]	; (800849c <__i2b+0x28>)
 800848a:	f000 fdef 	bl	800906c <__assert_func>
 800848e:	2301      	movs	r3, #1
 8008490:	6144      	str	r4, [r0, #20]
 8008492:	6103      	str	r3, [r0, #16]
 8008494:	bd10      	pop	{r4, pc}
 8008496:	bf00      	nop
 8008498:	0800ac10 	.word	0x0800ac10
 800849c:	0800ac9c 	.word	0x0800ac9c

080084a0 <__multiply>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	4691      	mov	r9, r2
 80084a6:	690a      	ldr	r2, [r1, #16]
 80084a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084ac:	460c      	mov	r4, r1
 80084ae:	429a      	cmp	r2, r3
 80084b0:	bfbe      	ittt	lt
 80084b2:	460b      	movlt	r3, r1
 80084b4:	464c      	movlt	r4, r9
 80084b6:	4699      	movlt	r9, r3
 80084b8:	6927      	ldr	r7, [r4, #16]
 80084ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	eb07 060a 	add.w	r6, r7, sl
 80084c6:	42b3      	cmp	r3, r6
 80084c8:	b085      	sub	sp, #20
 80084ca:	bfb8      	it	lt
 80084cc:	3101      	addlt	r1, #1
 80084ce:	f7ff fe91 	bl	80081f4 <_Balloc>
 80084d2:	b930      	cbnz	r0, 80084e2 <__multiply+0x42>
 80084d4:	4602      	mov	r2, r0
 80084d6:	f240 115d 	movw	r1, #349	; 0x15d
 80084da:	4b43      	ldr	r3, [pc, #268]	; (80085e8 <__multiply+0x148>)
 80084dc:	4843      	ldr	r0, [pc, #268]	; (80085ec <__multiply+0x14c>)
 80084de:	f000 fdc5 	bl	800906c <__assert_func>
 80084e2:	f100 0514 	add.w	r5, r0, #20
 80084e6:	462b      	mov	r3, r5
 80084e8:	2200      	movs	r2, #0
 80084ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084ee:	4543      	cmp	r3, r8
 80084f0:	d321      	bcc.n	8008536 <__multiply+0x96>
 80084f2:	f104 0314 	add.w	r3, r4, #20
 80084f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084fa:	f109 0314 	add.w	r3, r9, #20
 80084fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008502:	9202      	str	r2, [sp, #8]
 8008504:	1b3a      	subs	r2, r7, r4
 8008506:	3a15      	subs	r2, #21
 8008508:	f022 0203 	bic.w	r2, r2, #3
 800850c:	3204      	adds	r2, #4
 800850e:	f104 0115 	add.w	r1, r4, #21
 8008512:	428f      	cmp	r7, r1
 8008514:	bf38      	it	cc
 8008516:	2204      	movcc	r2, #4
 8008518:	9201      	str	r2, [sp, #4]
 800851a:	9a02      	ldr	r2, [sp, #8]
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	429a      	cmp	r2, r3
 8008520:	d80c      	bhi.n	800853c <__multiply+0x9c>
 8008522:	2e00      	cmp	r6, #0
 8008524:	dd03      	ble.n	800852e <__multiply+0x8e>
 8008526:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800852a:	2b00      	cmp	r3, #0
 800852c:	d059      	beq.n	80085e2 <__multiply+0x142>
 800852e:	6106      	str	r6, [r0, #16]
 8008530:	b005      	add	sp, #20
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	f843 2b04 	str.w	r2, [r3], #4
 800853a:	e7d8      	b.n	80084ee <__multiply+0x4e>
 800853c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	d023      	beq.n	800858e <__multiply+0xee>
 8008546:	46a9      	mov	r9, r5
 8008548:	f04f 0c00 	mov.w	ip, #0
 800854c:	f104 0e14 	add.w	lr, r4, #20
 8008550:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008554:	f8d9 1000 	ldr.w	r1, [r9]
 8008558:	fa1f fb82 	uxth.w	fp, r2
 800855c:	b289      	uxth	r1, r1
 800855e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008562:	4461      	add	r1, ip
 8008564:	f8d9 c000 	ldr.w	ip, [r9]
 8008568:	0c12      	lsrs	r2, r2, #16
 800856a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800856e:	fb0a c202 	mla	r2, sl, r2, ip
 8008572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008576:	b289      	uxth	r1, r1
 8008578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800857c:	4577      	cmp	r7, lr
 800857e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008582:	f849 1b04 	str.w	r1, [r9], #4
 8008586:	d8e3      	bhi.n	8008550 <__multiply+0xb0>
 8008588:	9a01      	ldr	r2, [sp, #4]
 800858a:	f845 c002 	str.w	ip, [r5, r2]
 800858e:	9a03      	ldr	r2, [sp, #12]
 8008590:	3304      	adds	r3, #4
 8008592:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008596:	f1b9 0f00 	cmp.w	r9, #0
 800859a:	d020      	beq.n	80085de <__multiply+0x13e>
 800859c:	46ae      	mov	lr, r5
 800859e:	f04f 0a00 	mov.w	sl, #0
 80085a2:	6829      	ldr	r1, [r5, #0]
 80085a4:	f104 0c14 	add.w	ip, r4, #20
 80085a8:	f8bc b000 	ldrh.w	fp, [ip]
 80085ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085b0:	b289      	uxth	r1, r1
 80085b2:	fb09 220b 	mla	r2, r9, fp, r2
 80085b6:	4492      	add	sl, r2
 80085b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085bc:	f84e 1b04 	str.w	r1, [lr], #4
 80085c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085c4:	f8be 1000 	ldrh.w	r1, [lr]
 80085c8:	0c12      	lsrs	r2, r2, #16
 80085ca:	fb09 1102 	mla	r1, r9, r2, r1
 80085ce:	4567      	cmp	r7, ip
 80085d0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085d8:	d8e6      	bhi.n	80085a8 <__multiply+0x108>
 80085da:	9a01      	ldr	r2, [sp, #4]
 80085dc:	50a9      	str	r1, [r5, r2]
 80085de:	3504      	adds	r5, #4
 80085e0:	e79b      	b.n	800851a <__multiply+0x7a>
 80085e2:	3e01      	subs	r6, #1
 80085e4:	e79d      	b.n	8008522 <__multiply+0x82>
 80085e6:	bf00      	nop
 80085e8:	0800ac10 	.word	0x0800ac10
 80085ec:	0800ac9c 	.word	0x0800ac9c

080085f0 <__pow5mult>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	4615      	mov	r5, r2
 80085f6:	f012 0203 	ands.w	r2, r2, #3
 80085fa:	4606      	mov	r6, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	d007      	beq.n	8008610 <__pow5mult+0x20>
 8008600:	4c25      	ldr	r4, [pc, #148]	; (8008698 <__pow5mult+0xa8>)
 8008602:	3a01      	subs	r2, #1
 8008604:	2300      	movs	r3, #0
 8008606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800860a:	f7ff fe55 	bl	80082b8 <__multadd>
 800860e:	4607      	mov	r7, r0
 8008610:	10ad      	asrs	r5, r5, #2
 8008612:	d03d      	beq.n	8008690 <__pow5mult+0xa0>
 8008614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008616:	b97c      	cbnz	r4, 8008638 <__pow5mult+0x48>
 8008618:	2010      	movs	r0, #16
 800861a:	f7ff fdb5 	bl	8008188 <malloc>
 800861e:	4602      	mov	r2, r0
 8008620:	6270      	str	r0, [r6, #36]	; 0x24
 8008622:	b928      	cbnz	r0, 8008630 <__pow5mult+0x40>
 8008624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008628:	4b1c      	ldr	r3, [pc, #112]	; (800869c <__pow5mult+0xac>)
 800862a:	481d      	ldr	r0, [pc, #116]	; (80086a0 <__pow5mult+0xb0>)
 800862c:	f000 fd1e 	bl	800906c <__assert_func>
 8008630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008634:	6004      	str	r4, [r0, #0]
 8008636:	60c4      	str	r4, [r0, #12]
 8008638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800863c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008640:	b94c      	cbnz	r4, 8008656 <__pow5mult+0x66>
 8008642:	f240 2171 	movw	r1, #625	; 0x271
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff ff14 	bl	8008474 <__i2b>
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	f8c8 0008 	str.w	r0, [r8, #8]
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	f04f 0900 	mov.w	r9, #0
 800865a:	07eb      	lsls	r3, r5, #31
 800865c:	d50a      	bpl.n	8008674 <__pow5mult+0x84>
 800865e:	4639      	mov	r1, r7
 8008660:	4622      	mov	r2, r4
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ff1c 	bl	80084a0 <__multiply>
 8008668:	4680      	mov	r8, r0
 800866a:	4639      	mov	r1, r7
 800866c:	4630      	mov	r0, r6
 800866e:	f7ff fe01 	bl	8008274 <_Bfree>
 8008672:	4647      	mov	r7, r8
 8008674:	106d      	asrs	r5, r5, #1
 8008676:	d00b      	beq.n	8008690 <__pow5mult+0xa0>
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	b938      	cbnz	r0, 800868c <__pow5mult+0x9c>
 800867c:	4622      	mov	r2, r4
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ff0d 	bl	80084a0 <__multiply>
 8008686:	6020      	str	r0, [r4, #0]
 8008688:	f8c0 9000 	str.w	r9, [r0]
 800868c:	4604      	mov	r4, r0
 800868e:	e7e4      	b.n	800865a <__pow5mult+0x6a>
 8008690:	4638      	mov	r0, r7
 8008692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008696:	bf00      	nop
 8008698:	0800ade8 	.word	0x0800ade8
 800869c:	0800ab9e 	.word	0x0800ab9e
 80086a0:	0800ac9c 	.word	0x0800ac9c

080086a4 <__lshift>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	460c      	mov	r4, r1
 80086aa:	4607      	mov	r7, r0
 80086ac:	4691      	mov	r9, r2
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	6849      	ldr	r1, [r1, #4]
 80086b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086bc:	f108 0601 	add.w	r6, r8, #1
 80086c0:	42b3      	cmp	r3, r6
 80086c2:	db0b      	blt.n	80086dc <__lshift+0x38>
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7ff fd95 	bl	80081f4 <_Balloc>
 80086ca:	4605      	mov	r5, r0
 80086cc:	b948      	cbnz	r0, 80086e2 <__lshift+0x3e>
 80086ce:	4602      	mov	r2, r0
 80086d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086d4:	4b29      	ldr	r3, [pc, #164]	; (800877c <__lshift+0xd8>)
 80086d6:	482a      	ldr	r0, [pc, #168]	; (8008780 <__lshift+0xdc>)
 80086d8:	f000 fcc8 	bl	800906c <__assert_func>
 80086dc:	3101      	adds	r1, #1
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	e7ee      	b.n	80086c0 <__lshift+0x1c>
 80086e2:	2300      	movs	r3, #0
 80086e4:	f100 0114 	add.w	r1, r0, #20
 80086e8:	f100 0210 	add.w	r2, r0, #16
 80086ec:	4618      	mov	r0, r3
 80086ee:	4553      	cmp	r3, sl
 80086f0:	db37      	blt.n	8008762 <__lshift+0xbe>
 80086f2:	6920      	ldr	r0, [r4, #16]
 80086f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f8:	f104 0314 	add.w	r3, r4, #20
 80086fc:	f019 091f 	ands.w	r9, r9, #31
 8008700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008708:	d02f      	beq.n	800876a <__lshift+0xc6>
 800870a:	468a      	mov	sl, r1
 800870c:	f04f 0c00 	mov.w	ip, #0
 8008710:	f1c9 0e20 	rsb	lr, r9, #32
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	fa02 f209 	lsl.w	r2, r2, r9
 800871a:	ea42 020c 	orr.w	r2, r2, ip
 800871e:	f84a 2b04 	str.w	r2, [sl], #4
 8008722:	f853 2b04 	ldr.w	r2, [r3], #4
 8008726:	4298      	cmp	r0, r3
 8008728:	fa22 fc0e 	lsr.w	ip, r2, lr
 800872c:	d8f2      	bhi.n	8008714 <__lshift+0x70>
 800872e:	1b03      	subs	r3, r0, r4
 8008730:	3b15      	subs	r3, #21
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	3304      	adds	r3, #4
 8008738:	f104 0215 	add.w	r2, r4, #21
 800873c:	4290      	cmp	r0, r2
 800873e:	bf38      	it	cc
 8008740:	2304      	movcc	r3, #4
 8008742:	f841 c003 	str.w	ip, [r1, r3]
 8008746:	f1bc 0f00 	cmp.w	ip, #0
 800874a:	d001      	beq.n	8008750 <__lshift+0xac>
 800874c:	f108 0602 	add.w	r6, r8, #2
 8008750:	3e01      	subs	r6, #1
 8008752:	4638      	mov	r0, r7
 8008754:	4621      	mov	r1, r4
 8008756:	612e      	str	r6, [r5, #16]
 8008758:	f7ff fd8c 	bl	8008274 <_Bfree>
 800875c:	4628      	mov	r0, r5
 800875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008762:	f842 0f04 	str.w	r0, [r2, #4]!
 8008766:	3301      	adds	r3, #1
 8008768:	e7c1      	b.n	80086ee <__lshift+0x4a>
 800876a:	3904      	subs	r1, #4
 800876c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008770:	4298      	cmp	r0, r3
 8008772:	f841 2f04 	str.w	r2, [r1, #4]!
 8008776:	d8f9      	bhi.n	800876c <__lshift+0xc8>
 8008778:	e7ea      	b.n	8008750 <__lshift+0xac>
 800877a:	bf00      	nop
 800877c:	0800ac10 	.word	0x0800ac10
 8008780:	0800ac9c 	.word	0x0800ac9c

08008784 <__mcmp>:
 8008784:	4603      	mov	r3, r0
 8008786:	690a      	ldr	r2, [r1, #16]
 8008788:	6900      	ldr	r0, [r0, #16]
 800878a:	b530      	push	{r4, r5, lr}
 800878c:	1a80      	subs	r0, r0, r2
 800878e:	d10d      	bne.n	80087ac <__mcmp+0x28>
 8008790:	3314      	adds	r3, #20
 8008792:	3114      	adds	r1, #20
 8008794:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008798:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800879c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087a4:	4295      	cmp	r5, r2
 80087a6:	d002      	beq.n	80087ae <__mcmp+0x2a>
 80087a8:	d304      	bcc.n	80087b4 <__mcmp+0x30>
 80087aa:	2001      	movs	r0, #1
 80087ac:	bd30      	pop	{r4, r5, pc}
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	d3f4      	bcc.n	800879c <__mcmp+0x18>
 80087b2:	e7fb      	b.n	80087ac <__mcmp+0x28>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e7f8      	b.n	80087ac <__mcmp+0x28>
	...

080087bc <__mdiff>:
 80087bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	460d      	mov	r5, r1
 80087c2:	4607      	mov	r7, r0
 80087c4:	4611      	mov	r1, r2
 80087c6:	4628      	mov	r0, r5
 80087c8:	4614      	mov	r4, r2
 80087ca:	f7ff ffdb 	bl	8008784 <__mcmp>
 80087ce:	1e06      	subs	r6, r0, #0
 80087d0:	d111      	bne.n	80087f6 <__mdiff+0x3a>
 80087d2:	4631      	mov	r1, r6
 80087d4:	4638      	mov	r0, r7
 80087d6:	f7ff fd0d 	bl	80081f4 <_Balloc>
 80087da:	4602      	mov	r2, r0
 80087dc:	b928      	cbnz	r0, 80087ea <__mdiff+0x2e>
 80087de:	f240 2132 	movw	r1, #562	; 0x232
 80087e2:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <__mdiff+0x110>)
 80087e4:	483a      	ldr	r0, [pc, #232]	; (80088d0 <__mdiff+0x114>)
 80087e6:	f000 fc41 	bl	800906c <__assert_func>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087f0:	4610      	mov	r0, r2
 80087f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	bfa4      	itt	ge
 80087f8:	4623      	movge	r3, r4
 80087fa:	462c      	movge	r4, r5
 80087fc:	4638      	mov	r0, r7
 80087fe:	6861      	ldr	r1, [r4, #4]
 8008800:	bfa6      	itte	ge
 8008802:	461d      	movge	r5, r3
 8008804:	2600      	movge	r6, #0
 8008806:	2601      	movlt	r6, #1
 8008808:	f7ff fcf4 	bl	80081f4 <_Balloc>
 800880c:	4602      	mov	r2, r0
 800880e:	b918      	cbnz	r0, 8008818 <__mdiff+0x5c>
 8008810:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008814:	4b2d      	ldr	r3, [pc, #180]	; (80088cc <__mdiff+0x110>)
 8008816:	e7e5      	b.n	80087e4 <__mdiff+0x28>
 8008818:	f102 0814 	add.w	r8, r2, #20
 800881c:	46c2      	mov	sl, r8
 800881e:	f04f 0c00 	mov.w	ip, #0
 8008822:	6927      	ldr	r7, [r4, #16]
 8008824:	60c6      	str	r6, [r0, #12]
 8008826:	692e      	ldr	r6, [r5, #16]
 8008828:	f104 0014 	add.w	r0, r4, #20
 800882c:	f105 0914 	add.w	r9, r5, #20
 8008830:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008838:	3410      	adds	r4, #16
 800883a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800883e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008842:	fa1f f18b 	uxth.w	r1, fp
 8008846:	448c      	add	ip, r1
 8008848:	b299      	uxth	r1, r3
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	ebac 0101 	sub.w	r1, ip, r1
 8008850:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008854:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008858:	b289      	uxth	r1, r1
 800885a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800885e:	454e      	cmp	r6, r9
 8008860:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008864:	f84a 3b04 	str.w	r3, [sl], #4
 8008868:	d8e7      	bhi.n	800883a <__mdiff+0x7e>
 800886a:	1b73      	subs	r3, r6, r5
 800886c:	3b15      	subs	r3, #21
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	3515      	adds	r5, #21
 8008874:	3304      	adds	r3, #4
 8008876:	42ae      	cmp	r6, r5
 8008878:	bf38      	it	cc
 800887a:	2304      	movcc	r3, #4
 800887c:	4418      	add	r0, r3
 800887e:	4443      	add	r3, r8
 8008880:	461e      	mov	r6, r3
 8008882:	4605      	mov	r5, r0
 8008884:	4575      	cmp	r5, lr
 8008886:	d30e      	bcc.n	80088a6 <__mdiff+0xea>
 8008888:	f10e 0103 	add.w	r1, lr, #3
 800888c:	1a09      	subs	r1, r1, r0
 800888e:	f021 0103 	bic.w	r1, r1, #3
 8008892:	3803      	subs	r0, #3
 8008894:	4586      	cmp	lr, r0
 8008896:	bf38      	it	cc
 8008898:	2100      	movcc	r1, #0
 800889a:	4419      	add	r1, r3
 800889c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80088a0:	b18b      	cbz	r3, 80088c6 <__mdiff+0x10a>
 80088a2:	6117      	str	r7, [r2, #16]
 80088a4:	e7a4      	b.n	80087f0 <__mdiff+0x34>
 80088a6:	f855 8b04 	ldr.w	r8, [r5], #4
 80088aa:	fa1f f188 	uxth.w	r1, r8
 80088ae:	4461      	add	r1, ip
 80088b0:	140c      	asrs	r4, r1, #16
 80088b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088b6:	b289      	uxth	r1, r1
 80088b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80088c0:	f846 1b04 	str.w	r1, [r6], #4
 80088c4:	e7de      	b.n	8008884 <__mdiff+0xc8>
 80088c6:	3f01      	subs	r7, #1
 80088c8:	e7e8      	b.n	800889c <__mdiff+0xe0>
 80088ca:	bf00      	nop
 80088cc:	0800ac10 	.word	0x0800ac10
 80088d0:	0800ac9c 	.word	0x0800ac9c

080088d4 <__ulp>:
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <__ulp+0x48>)
 80088d6:	400b      	ands	r3, r1
 80088d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd02      	ble.n	80088e6 <__ulp+0x12>
 80088e0:	2000      	movs	r0, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	4770      	bx	lr
 80088e6:	425b      	negs	r3, r3
 80088e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80088ec:	f04f 0000 	mov.w	r0, #0
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088f8:	da04      	bge.n	8008904 <__ulp+0x30>
 80088fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088fe:	fa43 f102 	asr.w	r1, r3, r2
 8008902:	4770      	bx	lr
 8008904:	f1a2 0314 	sub.w	r3, r2, #20
 8008908:	2b1e      	cmp	r3, #30
 800890a:	bfd6      	itet	le
 800890c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008910:	2301      	movgt	r3, #1
 8008912:	fa22 f303 	lsrle.w	r3, r2, r3
 8008916:	4618      	mov	r0, r3
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	7ff00000 	.word	0x7ff00000

08008920 <__b2d>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	6907      	ldr	r7, [r0, #16]
 8008926:	f100 0914 	add.w	r9, r0, #20
 800892a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800892e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008932:	f1a7 0804 	sub.w	r8, r7, #4
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff fd4e 	bl	80083d8 <__hi0bits>
 800893c:	f1c0 0320 	rsb	r3, r0, #32
 8008940:	280a      	cmp	r0, #10
 8008942:	600b      	str	r3, [r1, #0]
 8008944:	491f      	ldr	r1, [pc, #124]	; (80089c4 <__b2d+0xa4>)
 8008946:	dc17      	bgt.n	8008978 <__b2d+0x58>
 8008948:	45c1      	cmp	r9, r8
 800894a:	bf28      	it	cs
 800894c:	2200      	movcs	r2, #0
 800894e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008952:	fa26 f30c 	lsr.w	r3, r6, ip
 8008956:	bf38      	it	cc
 8008958:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800895c:	ea43 0501 	orr.w	r5, r3, r1
 8008960:	f100 0315 	add.w	r3, r0, #21
 8008964:	fa06 f303 	lsl.w	r3, r6, r3
 8008968:	fa22 f20c 	lsr.w	r2, r2, ip
 800896c:	ea43 0402 	orr.w	r4, r3, r2
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008978:	45c1      	cmp	r9, r8
 800897a:	bf2e      	itee	cs
 800897c:	2200      	movcs	r2, #0
 800897e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008982:	f1a7 0808 	subcc.w	r8, r7, #8
 8008986:	f1b0 030b 	subs.w	r3, r0, #11
 800898a:	d016      	beq.n	80089ba <__b2d+0x9a>
 800898c:	f1c3 0720 	rsb	r7, r3, #32
 8008990:	fa22 f107 	lsr.w	r1, r2, r7
 8008994:	45c8      	cmp	r8, r9
 8008996:	fa06 f603 	lsl.w	r6, r6, r3
 800899a:	ea46 0601 	orr.w	r6, r6, r1
 800899e:	bf94      	ite	ls
 80089a0:	2100      	movls	r1, #0
 80089a2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80089a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80089aa:	fa02 f003 	lsl.w	r0, r2, r3
 80089ae:	40f9      	lsrs	r1, r7
 80089b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80089b4:	ea40 0401 	orr.w	r4, r0, r1
 80089b8:	e7da      	b.n	8008970 <__b2d+0x50>
 80089ba:	4614      	mov	r4, r2
 80089bc:	ea46 0501 	orr.w	r5, r6, r1
 80089c0:	e7d6      	b.n	8008970 <__b2d+0x50>
 80089c2:	bf00      	nop
 80089c4:	3ff00000 	.word	0x3ff00000

080089c8 <__d2b>:
 80089c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089cc:	2101      	movs	r1, #1
 80089ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80089d2:	4690      	mov	r8, r2
 80089d4:	461d      	mov	r5, r3
 80089d6:	f7ff fc0d 	bl	80081f4 <_Balloc>
 80089da:	4604      	mov	r4, r0
 80089dc:	b930      	cbnz	r0, 80089ec <__d2b+0x24>
 80089de:	4602      	mov	r2, r0
 80089e0:	f240 310a 	movw	r1, #778	; 0x30a
 80089e4:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <__d2b+0xb0>)
 80089e6:	4825      	ldr	r0, [pc, #148]	; (8008a7c <__d2b+0xb4>)
 80089e8:	f000 fb40 	bl	800906c <__assert_func>
 80089ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80089f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80089f4:	bb2d      	cbnz	r5, 8008a42 <__d2b+0x7a>
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f1b8 0300 	subs.w	r3, r8, #0
 80089fc:	d026      	beq.n	8008a4c <__d2b+0x84>
 80089fe:	4668      	mov	r0, sp
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	f7ff fd09 	bl	8008418 <__lo0bits>
 8008a06:	9900      	ldr	r1, [sp, #0]
 8008a08:	b1f0      	cbz	r0, 8008a48 <__d2b+0x80>
 8008a0a:	9a01      	ldr	r2, [sp, #4]
 8008a0c:	f1c0 0320 	rsb	r3, r0, #32
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	430b      	orrs	r3, r1
 8008a16:	40c2      	lsrs	r2, r0
 8008a18:	6163      	str	r3, [r4, #20]
 8008a1a:	9201      	str	r2, [sp, #4]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bf14      	ite	ne
 8008a22:	2102      	movne	r1, #2
 8008a24:	2101      	moveq	r1, #1
 8008a26:	61a3      	str	r3, [r4, #24]
 8008a28:	6121      	str	r1, [r4, #16]
 8008a2a:	b1c5      	cbz	r5, 8008a5e <__d2b+0x96>
 8008a2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a30:	4405      	add	r5, r0
 8008a32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a36:	603d      	str	r5, [r7, #0]
 8008a38:	6030      	str	r0, [r6, #0]
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	b002      	add	sp, #8
 8008a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a46:	e7d6      	b.n	80089f6 <__d2b+0x2e>
 8008a48:	6161      	str	r1, [r4, #20]
 8008a4a:	e7e7      	b.n	8008a1c <__d2b+0x54>
 8008a4c:	a801      	add	r0, sp, #4
 8008a4e:	f7ff fce3 	bl	8008418 <__lo0bits>
 8008a52:	2101      	movs	r1, #1
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	6121      	str	r1, [r4, #16]
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	3020      	adds	r0, #32
 8008a5c:	e7e5      	b.n	8008a2a <__d2b+0x62>
 8008a5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008a62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a66:	6038      	str	r0, [r7, #0]
 8008a68:	6918      	ldr	r0, [r3, #16]
 8008a6a:	f7ff fcb5 	bl	80083d8 <__hi0bits>
 8008a6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008a72:	6031      	str	r1, [r6, #0]
 8008a74:	e7e1      	b.n	8008a3a <__d2b+0x72>
 8008a76:	bf00      	nop
 8008a78:	0800ac10 	.word	0x0800ac10
 8008a7c:	0800ac9c 	.word	0x0800ac9c

08008a80 <__ratio>:
 8008a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4688      	mov	r8, r1
 8008a86:	4669      	mov	r1, sp
 8008a88:	4681      	mov	r9, r0
 8008a8a:	f7ff ff49 	bl	8008920 <__b2d>
 8008a8e:	460f      	mov	r7, r1
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	4640      	mov	r0, r8
 8008a96:	a901      	add	r1, sp, #4
 8008a98:	f7ff ff42 	bl	8008920 <__b2d>
 8008a9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008aa0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008aa4:	468b      	mov	fp, r1
 8008aa6:	eba3 0c02 	sub.w	ip, r3, r2
 8008aaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfd5      	itete	le
 8008ab8:	460a      	movle	r2, r1
 8008aba:	462a      	movgt	r2, r5
 8008abc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ac0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ac4:	bfd8      	it	le
 8008ac6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008aca:	465b      	mov	r3, fp
 8008acc:	4602      	mov	r2, r0
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f7f7 fedf 	bl	8000894 <__aeabi_ddiv>
 8008ad6:	b003      	add	sp, #12
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008adc <__copybits>:
 8008adc:	3901      	subs	r1, #1
 8008ade:	b570      	push	{r4, r5, r6, lr}
 8008ae0:	1149      	asrs	r1, r1, #5
 8008ae2:	6914      	ldr	r4, [r2, #16]
 8008ae4:	3101      	adds	r1, #1
 8008ae6:	f102 0314 	add.w	r3, r2, #20
 8008aea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008aee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008af2:	1f05      	subs	r5, r0, #4
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d30c      	bcc.n	8008b12 <__copybits+0x36>
 8008af8:	1aa3      	subs	r3, r4, r2
 8008afa:	3b11      	subs	r3, #17
 8008afc:	f023 0303 	bic.w	r3, r3, #3
 8008b00:	3211      	adds	r2, #17
 8008b02:	42a2      	cmp	r2, r4
 8008b04:	bf88      	it	hi
 8008b06:	2300      	movhi	r3, #0
 8008b08:	4418      	add	r0, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4288      	cmp	r0, r1
 8008b0e:	d305      	bcc.n	8008b1c <__copybits+0x40>
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b16:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b1a:	e7eb      	b.n	8008af4 <__copybits+0x18>
 8008b1c:	f840 3b04 	str.w	r3, [r0], #4
 8008b20:	e7f4      	b.n	8008b0c <__copybits+0x30>

08008b22 <__any_on>:
 8008b22:	f100 0214 	add.w	r2, r0, #20
 8008b26:	6900      	ldr	r0, [r0, #16]
 8008b28:	114b      	asrs	r3, r1, #5
 8008b2a:	4298      	cmp	r0, r3
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	db11      	blt.n	8008b54 <__any_on+0x32>
 8008b30:	dd0a      	ble.n	8008b48 <__any_on+0x26>
 8008b32:	f011 011f 	ands.w	r1, r1, #31
 8008b36:	d007      	beq.n	8008b48 <__any_on+0x26>
 8008b38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b3c:	fa24 f001 	lsr.w	r0, r4, r1
 8008b40:	fa00 f101 	lsl.w	r1, r0, r1
 8008b44:	428c      	cmp	r4, r1
 8008b46:	d10b      	bne.n	8008b60 <__any_on+0x3e>
 8008b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d803      	bhi.n	8008b58 <__any_on+0x36>
 8008b50:	2000      	movs	r0, #0
 8008b52:	bd10      	pop	{r4, pc}
 8008b54:	4603      	mov	r3, r0
 8008b56:	e7f7      	b.n	8008b48 <__any_on+0x26>
 8008b58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	d0f5      	beq.n	8008b4c <__any_on+0x2a>
 8008b60:	2001      	movs	r0, #1
 8008b62:	e7f6      	b.n	8008b52 <__any_on+0x30>

08008b64 <_calloc_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	fba1 5402 	umull	r5, r4, r1, r2
 8008b6a:	b934      	cbnz	r4, 8008b7a <_calloc_r+0x16>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f000 f875 	bl	8008c5c <_malloc_r>
 8008b72:	4606      	mov	r6, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <_calloc_r+0x1e>
 8008b76:	4630      	mov	r0, r6
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	220c      	movs	r2, #12
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	6002      	str	r2, [r0, #0]
 8008b80:	e7f9      	b.n	8008b76 <_calloc_r+0x12>
 8008b82:	462a      	mov	r2, r5
 8008b84:	4621      	mov	r1, r4
 8008b86:	f7fc fbf3 	bl	8005370 <memset>
 8008b8a:	e7f4      	b.n	8008b76 <_calloc_r+0x12>

08008b8c <_free_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4605      	mov	r5, r0
 8008b90:	2900      	cmp	r1, #0
 8008b92:	d040      	beq.n	8008c16 <_free_r+0x8a>
 8008b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b98:	1f0c      	subs	r4, r1, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfb8      	it	lt
 8008b9e:	18e4      	addlt	r4, r4, r3
 8008ba0:	f000 faae 	bl	8009100 <__malloc_lock>
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	; (8008c18 <_free_r+0x8c>)
 8008ba6:	6813      	ldr	r3, [r2, #0]
 8008ba8:	b933      	cbnz	r3, 8008bb8 <_free_r+0x2c>
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	6014      	str	r4, [r2, #0]
 8008bae:	4628      	mov	r0, r5
 8008bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb4:	f000 baaa 	b.w	800910c <__malloc_unlock>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d908      	bls.n	8008bce <_free_r+0x42>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	1821      	adds	r1, r4, r0
 8008bc0:	428b      	cmp	r3, r1
 8008bc2:	bf01      	itttt	eq
 8008bc4:	6819      	ldreq	r1, [r3, #0]
 8008bc6:	685b      	ldreq	r3, [r3, #4]
 8008bc8:	1809      	addeq	r1, r1, r0
 8008bca:	6021      	streq	r1, [r4, #0]
 8008bcc:	e7ed      	b.n	8008baa <_free_r+0x1e>
 8008bce:	461a      	mov	r2, r3
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	b10b      	cbz	r3, 8008bd8 <_free_r+0x4c>
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d9fa      	bls.n	8008bce <_free_r+0x42>
 8008bd8:	6811      	ldr	r1, [r2, #0]
 8008bda:	1850      	adds	r0, r2, r1
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d10b      	bne.n	8008bf8 <_free_r+0x6c>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	4401      	add	r1, r0
 8008be4:	1850      	adds	r0, r2, r1
 8008be6:	4283      	cmp	r3, r0
 8008be8:	6011      	str	r1, [r2, #0]
 8008bea:	d1e0      	bne.n	8008bae <_free_r+0x22>
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4401      	add	r1, r0
 8008bf2:	6011      	str	r1, [r2, #0]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	e7da      	b.n	8008bae <_free_r+0x22>
 8008bf8:	d902      	bls.n	8008c00 <_free_r+0x74>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	e7d6      	b.n	8008bae <_free_r+0x22>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	6054      	str	r4, [r2, #4]
 8008c14:	e7cb      	b.n	8008bae <_free_r+0x22>
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000ae0 	.word	0x20000ae0

08008c1c <sbrk_aligned>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4e0e      	ldr	r6, [pc, #56]	; (8008c58 <sbrk_aligned+0x3c>)
 8008c20:	460c      	mov	r4, r1
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	4605      	mov	r5, r0
 8008c26:	b911      	cbnz	r1, 8008c2e <sbrk_aligned+0x12>
 8008c28:	f000 f9ee 	bl	8009008 <_sbrk_r>
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f9e9 	bl	8009008 <_sbrk_r>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d00a      	beq.n	8008c50 <sbrk_aligned+0x34>
 8008c3a:	1cc4      	adds	r4, r0, #3
 8008c3c:	f024 0403 	bic.w	r4, r4, #3
 8008c40:	42a0      	cmp	r0, r4
 8008c42:	d007      	beq.n	8008c54 <sbrk_aligned+0x38>
 8008c44:	1a21      	subs	r1, r4, r0
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f9de 	bl	8009008 <_sbrk_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d101      	bne.n	8008c54 <sbrk_aligned+0x38>
 8008c50:	f04f 34ff 	mov.w	r4, #4294967295
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	20000ae4 	.word	0x20000ae4

08008c5c <_malloc_r>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	1ccd      	adds	r5, r1, #3
 8008c62:	f025 0503 	bic.w	r5, r5, #3
 8008c66:	3508      	adds	r5, #8
 8008c68:	2d0c      	cmp	r5, #12
 8008c6a:	bf38      	it	cc
 8008c6c:	250c      	movcc	r5, #12
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	4607      	mov	r7, r0
 8008c72:	db01      	blt.n	8008c78 <_malloc_r+0x1c>
 8008c74:	42a9      	cmp	r1, r5
 8008c76:	d905      	bls.n	8008c84 <_malloc_r+0x28>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	4e2e      	ldr	r6, [pc, #184]	; (8008d40 <_malloc_r+0xe4>)
 8008c86:	f000 fa3b 	bl	8009100 <__malloc_lock>
 8008c8a:	6833      	ldr	r3, [r6, #0]
 8008c8c:	461c      	mov	r4, r3
 8008c8e:	bb34      	cbnz	r4, 8008cde <_malloc_r+0x82>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff ffc2 	bl	8008c1c <sbrk_aligned>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	d14d      	bne.n	8008d3a <_malloc_r+0xde>
 8008c9e:	6834      	ldr	r4, [r6, #0]
 8008ca0:	4626      	mov	r6, r4
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d140      	bne.n	8008d28 <_malloc_r+0xcc>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4638      	mov	r0, r7
 8008cac:	eb04 0803 	add.w	r8, r4, r3
 8008cb0:	f000 f9aa 	bl	8009008 <_sbrk_r>
 8008cb4:	4580      	cmp	r8, r0
 8008cb6:	d13a      	bne.n	8008d2e <_malloc_r+0xd2>
 8008cb8:	6821      	ldr	r1, [r4, #0]
 8008cba:	3503      	adds	r5, #3
 8008cbc:	1a6d      	subs	r5, r5, r1
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	4638      	mov	r0, r7
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff ffa5 	bl	8008c1c <sbrk_aligned>
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d02b      	beq.n	8008d2e <_malloc_r+0xd2>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	442b      	add	r3, r5
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e00e      	b.n	8008cfc <_malloc_r+0xa0>
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	1b52      	subs	r2, r2, r5
 8008ce2:	d41e      	bmi.n	8008d22 <_malloc_r+0xc6>
 8008ce4:	2a0b      	cmp	r2, #11
 8008ce6:	d916      	bls.n	8008d16 <_malloc_r+0xba>
 8008ce8:	1961      	adds	r1, r4, r5
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	6025      	str	r5, [r4, #0]
 8008cee:	bf18      	it	ne
 8008cf0:	6059      	strne	r1, [r3, #4]
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	bf08      	it	eq
 8008cf6:	6031      	streq	r1, [r6, #0]
 8008cf8:	5162      	str	r2, [r4, r5]
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f104 060b 	add.w	r6, r4, #11
 8008d02:	f000 fa03 	bl	800910c <__malloc_unlock>
 8008d06:	f026 0607 	bic.w	r6, r6, #7
 8008d0a:	1d23      	adds	r3, r4, #4
 8008d0c:	1af2      	subs	r2, r6, r3
 8008d0e:	d0b6      	beq.n	8008c7e <_malloc_r+0x22>
 8008d10:	1b9b      	subs	r3, r3, r6
 8008d12:	50a3      	str	r3, [r4, r2]
 8008d14:	e7b3      	b.n	8008c7e <_malloc_r+0x22>
 8008d16:	6862      	ldr	r2, [r4, #4]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	bf0c      	ite	eq
 8008d1c:	6032      	streq	r2, [r6, #0]
 8008d1e:	605a      	strne	r2, [r3, #4]
 8008d20:	e7ec      	b.n	8008cfc <_malloc_r+0xa0>
 8008d22:	4623      	mov	r3, r4
 8008d24:	6864      	ldr	r4, [r4, #4]
 8008d26:	e7b2      	b.n	8008c8e <_malloc_r+0x32>
 8008d28:	4634      	mov	r4, r6
 8008d2a:	6876      	ldr	r6, [r6, #4]
 8008d2c:	e7b9      	b.n	8008ca2 <_malloc_r+0x46>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	4638      	mov	r0, r7
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f000 f9ea 	bl	800910c <__malloc_unlock>
 8008d38:	e7a1      	b.n	8008c7e <_malloc_r+0x22>
 8008d3a:	6025      	str	r5, [r4, #0]
 8008d3c:	e7de      	b.n	8008cfc <_malloc_r+0xa0>
 8008d3e:	bf00      	nop
 8008d40:	20000ae0 	.word	0x20000ae0

08008d44 <__ssputs_r>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	688e      	ldr	r6, [r1, #8]
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	429e      	cmp	r6, r3
 8008d4e:	460c      	mov	r4, r1
 8008d50:	4690      	mov	r8, r2
 8008d52:	461f      	mov	r7, r3
 8008d54:	d838      	bhi.n	8008dc8 <__ssputs_r+0x84>
 8008d56:	898a      	ldrh	r2, [r1, #12]
 8008d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d5c:	d032      	beq.n	8008dc4 <__ssputs_r+0x80>
 8008d5e:	6825      	ldr	r5, [r4, #0]
 8008d60:	6909      	ldr	r1, [r1, #16]
 8008d62:	3301      	adds	r3, #1
 8008d64:	eba5 0901 	sub.w	r9, r5, r1
 8008d68:	6965      	ldr	r5, [r4, #20]
 8008d6a:	444b      	add	r3, r9
 8008d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d74:	106d      	asrs	r5, r5, #1
 8008d76:	429d      	cmp	r5, r3
 8008d78:	bf38      	it	cc
 8008d7a:	461d      	movcc	r5, r3
 8008d7c:	0553      	lsls	r3, r2, #21
 8008d7e:	d531      	bpl.n	8008de4 <__ssputs_r+0xa0>
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7ff ff6b 	bl	8008c5c <_malloc_r>
 8008d86:	4606      	mov	r6, r0
 8008d88:	b950      	cbnz	r0, 8008da0 <__ssputs_r+0x5c>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	f8ca 3000 	str.w	r3, [sl]
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	464a      	mov	r2, r9
 8008da2:	6921      	ldr	r1, [r4, #16]
 8008da4:	f7ff fa18 	bl	80081d8 <memcpy>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	6126      	str	r6, [r4, #16]
 8008db6:	444e      	add	r6, r9
 8008db8:	6026      	str	r6, [r4, #0]
 8008dba:	463e      	mov	r6, r7
 8008dbc:	6165      	str	r5, [r4, #20]
 8008dbe:	eba5 0509 	sub.w	r5, r5, r9
 8008dc2:	60a5      	str	r5, [r4, #8]
 8008dc4:	42be      	cmp	r6, r7
 8008dc6:	d900      	bls.n	8008dca <__ssputs_r+0x86>
 8008dc8:	463e      	mov	r6, r7
 8008dca:	4632      	mov	r2, r6
 8008dcc:	4641      	mov	r1, r8
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	f000 f97c 	bl	80090cc <memmove>
 8008dd4:	68a3      	ldr	r3, [r4, #8]
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	1b9b      	subs	r3, r3, r6
 8008dda:	60a3      	str	r3, [r4, #8]
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	4433      	add	r3, r6
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	e7db      	b.n	8008d9c <__ssputs_r+0x58>
 8008de4:	462a      	mov	r2, r5
 8008de6:	f000 f997 	bl	8009118 <_realloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d1e1      	bne.n	8008db4 <__ssputs_r+0x70>
 8008df0:	4650      	mov	r0, sl
 8008df2:	6921      	ldr	r1, [r4, #16]
 8008df4:	f7ff feca 	bl	8008b8c <_free_r>
 8008df8:	e7c7      	b.n	8008d8a <__ssputs_r+0x46>
	...

08008dfc <_svfiprintf_r>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	4698      	mov	r8, r3
 8008e02:	898b      	ldrh	r3, [r1, #12]
 8008e04:	4607      	mov	r7, r0
 8008e06:	061b      	lsls	r3, r3, #24
 8008e08:	460d      	mov	r5, r1
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	b09d      	sub	sp, #116	; 0x74
 8008e0e:	d50e      	bpl.n	8008e2e <_svfiprintf_r+0x32>
 8008e10:	690b      	ldr	r3, [r1, #16]
 8008e12:	b963      	cbnz	r3, 8008e2e <_svfiprintf_r+0x32>
 8008e14:	2140      	movs	r1, #64	; 0x40
 8008e16:	f7ff ff21 	bl	8008c5c <_malloc_r>
 8008e1a:	6028      	str	r0, [r5, #0]
 8008e1c:	6128      	str	r0, [r5, #16]
 8008e1e:	b920      	cbnz	r0, 8008e2a <_svfiprintf_r+0x2e>
 8008e20:	230c      	movs	r3, #12
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e0d1      	b.n	8008fce <_svfiprintf_r+0x1d2>
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	616b      	str	r3, [r5, #20]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9309      	str	r3, [sp, #36]	; 0x24
 8008e32:	2320      	movs	r3, #32
 8008e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e38:	2330      	movs	r3, #48	; 0x30
 8008e3a:	f04f 0901 	mov.w	r9, #1
 8008e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fe8 <_svfiprintf_r+0x1ec>
 8008e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	469a      	mov	sl, r3
 8008e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e52:	b10a      	cbz	r2, 8008e58 <_svfiprintf_r+0x5c>
 8008e54:	2a25      	cmp	r2, #37	; 0x25
 8008e56:	d1f9      	bne.n	8008e4c <_svfiprintf_r+0x50>
 8008e58:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5c:	d00b      	beq.n	8008e76 <_svfiprintf_r+0x7a>
 8008e5e:	465b      	mov	r3, fp
 8008e60:	4622      	mov	r2, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff ff6d 	bl	8008d44 <__ssputs_r>
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f000 80aa 	beq.w	8008fc4 <_svfiprintf_r+0x1c8>
 8008e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e72:	445a      	add	r2, fp
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80a2 	beq.w	8008fc4 <_svfiprintf_r+0x1c8>
 8008e80:	2300      	movs	r3, #0
 8008e82:	f04f 32ff 	mov.w	r2, #4294967295
 8008e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8a:	f10a 0a01 	add.w	sl, sl, #1
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	9307      	str	r3, [sp, #28]
 8008e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e96:	931a      	str	r3, [sp, #104]	; 0x68
 8008e98:	4654      	mov	r4, sl
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea0:	4851      	ldr	r0, [pc, #324]	; (8008fe8 <_svfiprintf_r+0x1ec>)
 8008ea2:	f7ff f98b 	bl	80081bc <memchr>
 8008ea6:	9a04      	ldr	r2, [sp, #16]
 8008ea8:	b9d8      	cbnz	r0, 8008ee2 <_svfiprintf_r+0xe6>
 8008eaa:	06d0      	lsls	r0, r2, #27
 8008eac:	bf44      	itt	mi
 8008eae:	2320      	movmi	r3, #32
 8008eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb4:	0711      	lsls	r1, r2, #28
 8008eb6:	bf44      	itt	mi
 8008eb8:	232b      	movmi	r3, #43	; 0x2b
 8008eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec4:	d015      	beq.n	8008ef2 <_svfiprintf_r+0xf6>
 8008ec6:	4654      	mov	r4, sl
 8008ec8:	2000      	movs	r0, #0
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	9a07      	ldr	r2, [sp, #28]
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed6:	3b30      	subs	r3, #48	; 0x30
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d94e      	bls.n	8008f7a <_svfiprintf_r+0x17e>
 8008edc:	b1b0      	cbz	r0, 8008f0c <_svfiprintf_r+0x110>
 8008ede:	9207      	str	r2, [sp, #28]
 8008ee0:	e014      	b.n	8008f0c <_svfiprintf_r+0x110>
 8008ee2:	eba0 0308 	sub.w	r3, r0, r8
 8008ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	46a2      	mov	sl, r4
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	e7d2      	b.n	8008e98 <_svfiprintf_r+0x9c>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	1d19      	adds	r1, r3, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	9103      	str	r1, [sp, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bfbb      	ittet	lt
 8008efe:	425b      	neglt	r3, r3
 8008f00:	f042 0202 	orrlt.w	r2, r2, #2
 8008f04:	9307      	strge	r3, [sp, #28]
 8008f06:	9307      	strlt	r3, [sp, #28]
 8008f08:	bfb8      	it	lt
 8008f0a:	9204      	strlt	r2, [sp, #16]
 8008f0c:	7823      	ldrb	r3, [r4, #0]
 8008f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f10:	d10c      	bne.n	8008f2c <_svfiprintf_r+0x130>
 8008f12:	7863      	ldrb	r3, [r4, #1]
 8008f14:	2b2a      	cmp	r3, #42	; 0x2a
 8008f16:	d135      	bne.n	8008f84 <_svfiprintf_r+0x188>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	3402      	adds	r4, #2
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9203      	str	r2, [sp, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfb8      	it	lt
 8008f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008fec <_svfiprintf_r+0x1f0>
 8008f30:	2203      	movs	r2, #3
 8008f32:	4650      	mov	r0, sl
 8008f34:	7821      	ldrb	r1, [r4, #0]
 8008f36:	f7ff f941 	bl	80081bc <memchr>
 8008f3a:	b140      	cbz	r0, 8008f4e <_svfiprintf_r+0x152>
 8008f3c:	2340      	movs	r3, #64	; 0x40
 8008f3e:	eba0 000a 	sub.w	r0, r0, sl
 8008f42:	fa03 f000 	lsl.w	r0, r3, r0
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	3401      	adds	r4, #1
 8008f4a:	4303      	orrs	r3, r0
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f52:	2206      	movs	r2, #6
 8008f54:	4826      	ldr	r0, [pc, #152]	; (8008ff0 <_svfiprintf_r+0x1f4>)
 8008f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f5a:	f7ff f92f 	bl	80081bc <memchr>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d038      	beq.n	8008fd4 <_svfiprintf_r+0x1d8>
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <_svfiprintf_r+0x1f8>)
 8008f64:	bb1b      	cbnz	r3, 8008fae <_svfiprintf_r+0x1b2>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	3307      	adds	r3, #7
 8008f6a:	f023 0307 	bic.w	r3, r3, #7
 8008f6e:	3308      	adds	r3, #8
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f74:	4433      	add	r3, r6
 8008f76:	9309      	str	r3, [sp, #36]	; 0x24
 8008f78:	e767      	b.n	8008e4a <_svfiprintf_r+0x4e>
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f82:	e7a5      	b.n	8008ed0 <_svfiprintf_r+0xd4>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f04f 0c0a 	mov.w	ip, #10
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f96:	3a30      	subs	r2, #48	; 0x30
 8008f98:	2a09      	cmp	r2, #9
 8008f9a:	d903      	bls.n	8008fa4 <_svfiprintf_r+0x1a8>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0c5      	beq.n	8008f2c <_svfiprintf_r+0x130>
 8008fa0:	9105      	str	r1, [sp, #20]
 8008fa2:	e7c3      	b.n	8008f2c <_svfiprintf_r+0x130>
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fac:	e7f0      	b.n	8008f90 <_svfiprintf_r+0x194>
 8008fae:	ab03      	add	r3, sp, #12
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	4b10      	ldr	r3, [pc, #64]	; (8008ff8 <_svfiprintf_r+0x1fc>)
 8008fb8:	a904      	add	r1, sp, #16
 8008fba:	f7fc fa7f 	bl	80054bc <_printf_float>
 8008fbe:	1c42      	adds	r2, r0, #1
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	d1d6      	bne.n	8008f72 <_svfiprintf_r+0x176>
 8008fc4:	89ab      	ldrh	r3, [r5, #12]
 8008fc6:	065b      	lsls	r3, r3, #25
 8008fc8:	f53f af2c 	bmi.w	8008e24 <_svfiprintf_r+0x28>
 8008fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fce:	b01d      	add	sp, #116	; 0x74
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	ab03      	add	r3, sp, #12
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4638      	mov	r0, r7
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <_svfiprintf_r+0x1fc>)
 8008fde:	a904      	add	r1, sp, #16
 8008fe0:	f7fc fd08 	bl	80059f4 <_printf_i>
 8008fe4:	e7eb      	b.n	8008fbe <_svfiprintf_r+0x1c2>
 8008fe6:	bf00      	nop
 8008fe8:	0800adf4 	.word	0x0800adf4
 8008fec:	0800adfa 	.word	0x0800adfa
 8008ff0:	0800adfe 	.word	0x0800adfe
 8008ff4:	080054bd 	.word	0x080054bd
 8008ff8:	08008d45 	.word	0x08008d45

08008ffc <nan>:
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	4901      	ldr	r1, [pc, #4]	; (8009004 <nan+0x8>)
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	7ff80000 	.word	0x7ff80000

08009008 <_sbrk_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	2300      	movs	r3, #0
 800900c:	4d05      	ldr	r5, [pc, #20]	; (8009024 <_sbrk_r+0x1c>)
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f9 fac4 	bl	80025a0 <_sbrk>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_sbrk_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_sbrk_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20000ae8 	.word	0x20000ae8

08009028 <strncmp>:
 8009028:	4603      	mov	r3, r0
 800902a:	b510      	push	{r4, lr}
 800902c:	b172      	cbz	r2, 800904c <strncmp+0x24>
 800902e:	3901      	subs	r1, #1
 8009030:	1884      	adds	r4, r0, r2
 8009032:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009036:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800903a:	4290      	cmp	r0, r2
 800903c:	d101      	bne.n	8009042 <strncmp+0x1a>
 800903e:	42a3      	cmp	r3, r4
 8009040:	d101      	bne.n	8009046 <strncmp+0x1e>
 8009042:	1a80      	subs	r0, r0, r2
 8009044:	bd10      	pop	{r4, pc}
 8009046:	2800      	cmp	r0, #0
 8009048:	d1f3      	bne.n	8009032 <strncmp+0xa>
 800904a:	e7fa      	b.n	8009042 <strncmp+0x1a>
 800904c:	4610      	mov	r0, r2
 800904e:	e7f9      	b.n	8009044 <strncmp+0x1c>

08009050 <__ascii_wctomb>:
 8009050:	4603      	mov	r3, r0
 8009052:	4608      	mov	r0, r1
 8009054:	b141      	cbz	r1, 8009068 <__ascii_wctomb+0x18>
 8009056:	2aff      	cmp	r2, #255	; 0xff
 8009058:	d904      	bls.n	8009064 <__ascii_wctomb+0x14>
 800905a:	228a      	movs	r2, #138	; 0x8a
 800905c:	f04f 30ff 	mov.w	r0, #4294967295
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	4770      	bx	lr
 8009064:	2001      	movs	r0, #1
 8009066:	700a      	strb	r2, [r1, #0]
 8009068:	4770      	bx	lr
	...

0800906c <__assert_func>:
 800906c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800906e:	4614      	mov	r4, r2
 8009070:	461a      	mov	r2, r3
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <__assert_func+0x2c>)
 8009074:	4605      	mov	r5, r0
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68d8      	ldr	r0, [r3, #12]
 800907a:	b14c      	cbz	r4, 8009090 <__assert_func+0x24>
 800907c:	4b07      	ldr	r3, [pc, #28]	; (800909c <__assert_func+0x30>)
 800907e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009082:	9100      	str	r1, [sp, #0]
 8009084:	462b      	mov	r3, r5
 8009086:	4906      	ldr	r1, [pc, #24]	; (80090a0 <__assert_func+0x34>)
 8009088:	f000 f80e 	bl	80090a8 <fiprintf>
 800908c:	f000 fa8a 	bl	80095a4 <abort>
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <__assert_func+0x38>)
 8009092:	461c      	mov	r4, r3
 8009094:	e7f3      	b.n	800907e <__assert_func+0x12>
 8009096:	bf00      	nop
 8009098:	20000014 	.word	0x20000014
 800909c:	0800ae05 	.word	0x0800ae05
 80090a0:	0800ae12 	.word	0x0800ae12
 80090a4:	0800ae40 	.word	0x0800ae40

080090a8 <fiprintf>:
 80090a8:	b40e      	push	{r1, r2, r3}
 80090aa:	b503      	push	{r0, r1, lr}
 80090ac:	4601      	mov	r1, r0
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	4805      	ldr	r0, [pc, #20]	; (80090c8 <fiprintf+0x20>)
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	6800      	ldr	r0, [r0, #0]
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	f000 f883 	bl	80091c4 <_vfiprintf_r>
 80090be:	b002      	add	sp, #8
 80090c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c4:	b003      	add	sp, #12
 80090c6:	4770      	bx	lr
 80090c8:	20000014 	.word	0x20000014

080090cc <memmove>:
 80090cc:	4288      	cmp	r0, r1
 80090ce:	b510      	push	{r4, lr}
 80090d0:	eb01 0402 	add.w	r4, r1, r2
 80090d4:	d902      	bls.n	80090dc <memmove+0x10>
 80090d6:	4284      	cmp	r4, r0
 80090d8:	4623      	mov	r3, r4
 80090da:	d807      	bhi.n	80090ec <memmove+0x20>
 80090dc:	1e43      	subs	r3, r0, #1
 80090de:	42a1      	cmp	r1, r4
 80090e0:	d008      	beq.n	80090f4 <memmove+0x28>
 80090e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ea:	e7f8      	b.n	80090de <memmove+0x12>
 80090ec:	4601      	mov	r1, r0
 80090ee:	4402      	add	r2, r0
 80090f0:	428a      	cmp	r2, r1
 80090f2:	d100      	bne.n	80090f6 <memmove+0x2a>
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090fe:	e7f7      	b.n	80090f0 <memmove+0x24>

08009100 <__malloc_lock>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__malloc_lock+0x8>)
 8009102:	f000 bc0b 	b.w	800991c <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	20000aec 	.word	0x20000aec

0800910c <__malloc_unlock>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__malloc_unlock+0x8>)
 800910e:	f000 bc06 	b.w	800991e <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	20000aec 	.word	0x20000aec

08009118 <_realloc_r>:
 8009118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911c:	4680      	mov	r8, r0
 800911e:	4614      	mov	r4, r2
 8009120:	460e      	mov	r6, r1
 8009122:	b921      	cbnz	r1, 800912e <_realloc_r+0x16>
 8009124:	4611      	mov	r1, r2
 8009126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	f7ff bd97 	b.w	8008c5c <_malloc_r>
 800912e:	b92a      	cbnz	r2, 800913c <_realloc_r+0x24>
 8009130:	f7ff fd2c 	bl	8008b8c <_free_r>
 8009134:	4625      	mov	r5, r4
 8009136:	4628      	mov	r0, r5
 8009138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913c:	f000 fc56 	bl	80099ec <_malloc_usable_size_r>
 8009140:	4284      	cmp	r4, r0
 8009142:	4607      	mov	r7, r0
 8009144:	d802      	bhi.n	800914c <_realloc_r+0x34>
 8009146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800914a:	d812      	bhi.n	8009172 <_realloc_r+0x5a>
 800914c:	4621      	mov	r1, r4
 800914e:	4640      	mov	r0, r8
 8009150:	f7ff fd84 	bl	8008c5c <_malloc_r>
 8009154:	4605      	mov	r5, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	d0ed      	beq.n	8009136 <_realloc_r+0x1e>
 800915a:	42bc      	cmp	r4, r7
 800915c:	4622      	mov	r2, r4
 800915e:	4631      	mov	r1, r6
 8009160:	bf28      	it	cs
 8009162:	463a      	movcs	r2, r7
 8009164:	f7ff f838 	bl	80081d8 <memcpy>
 8009168:	4631      	mov	r1, r6
 800916a:	4640      	mov	r0, r8
 800916c:	f7ff fd0e 	bl	8008b8c <_free_r>
 8009170:	e7e1      	b.n	8009136 <_realloc_r+0x1e>
 8009172:	4635      	mov	r5, r6
 8009174:	e7df      	b.n	8009136 <_realloc_r+0x1e>

08009176 <__sfputc_r>:
 8009176:	6893      	ldr	r3, [r2, #8]
 8009178:	b410      	push	{r4}
 800917a:	3b01      	subs	r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	6093      	str	r3, [r2, #8]
 8009180:	da07      	bge.n	8009192 <__sfputc_r+0x1c>
 8009182:	6994      	ldr	r4, [r2, #24]
 8009184:	42a3      	cmp	r3, r4
 8009186:	db01      	blt.n	800918c <__sfputc_r+0x16>
 8009188:	290a      	cmp	r1, #10
 800918a:	d102      	bne.n	8009192 <__sfputc_r+0x1c>
 800918c:	bc10      	pop	{r4}
 800918e:	f000 b949 	b.w	8009424 <__swbuf_r>
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	1c58      	adds	r0, r3, #1
 8009196:	6010      	str	r0, [r2, #0]
 8009198:	7019      	strb	r1, [r3, #0]
 800919a:	4608      	mov	r0, r1
 800919c:	bc10      	pop	{r4}
 800919e:	4770      	bx	lr

080091a0 <__sfputs_r>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	4614      	mov	r4, r2
 80091a8:	18d5      	adds	r5, r2, r3
 80091aa:	42ac      	cmp	r4, r5
 80091ac:	d101      	bne.n	80091b2 <__sfputs_r+0x12>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e007      	b.n	80091c2 <__sfputs_r+0x22>
 80091b2:	463a      	mov	r2, r7
 80091b4:	4630      	mov	r0, r6
 80091b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ba:	f7ff ffdc 	bl	8009176 <__sfputc_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d1f3      	bne.n	80091aa <__sfputs_r+0xa>
 80091c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091c4 <_vfiprintf_r>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	460d      	mov	r5, r1
 80091ca:	4614      	mov	r4, r2
 80091cc:	4698      	mov	r8, r3
 80091ce:	4606      	mov	r6, r0
 80091d0:	b09d      	sub	sp, #116	; 0x74
 80091d2:	b118      	cbz	r0, 80091dc <_vfiprintf_r+0x18>
 80091d4:	6983      	ldr	r3, [r0, #24]
 80091d6:	b90b      	cbnz	r3, 80091dc <_vfiprintf_r+0x18>
 80091d8:	f000 fb02 	bl	80097e0 <__sinit>
 80091dc:	4b89      	ldr	r3, [pc, #548]	; (8009404 <_vfiprintf_r+0x240>)
 80091de:	429d      	cmp	r5, r3
 80091e0:	d11b      	bne.n	800921a <_vfiprintf_r+0x56>
 80091e2:	6875      	ldr	r5, [r6, #4]
 80091e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d405      	bmi.n	80091f6 <_vfiprintf_r+0x32>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	059a      	lsls	r2, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_vfiprintf_r+0x32>
 80091f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091f2:	f000 fb93 	bl	800991c <__retarget_lock_acquire_recursive>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	d501      	bpl.n	8009200 <_vfiprintf_r+0x3c>
 80091fc:	692b      	ldr	r3, [r5, #16]
 80091fe:	b9eb      	cbnz	r3, 800923c <_vfiprintf_r+0x78>
 8009200:	4629      	mov	r1, r5
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f960 	bl	80094c8 <__swsetup_r>
 8009208:	b1c0      	cbz	r0, 800923c <_vfiprintf_r+0x78>
 800920a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800920c:	07dc      	lsls	r4, r3, #31
 800920e:	d50e      	bpl.n	800922e <_vfiprintf_r+0x6a>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	b01d      	add	sp, #116	; 0x74
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	4b7b      	ldr	r3, [pc, #492]	; (8009408 <_vfiprintf_r+0x244>)
 800921c:	429d      	cmp	r5, r3
 800921e:	d101      	bne.n	8009224 <_vfiprintf_r+0x60>
 8009220:	68b5      	ldr	r5, [r6, #8]
 8009222:	e7df      	b.n	80091e4 <_vfiprintf_r+0x20>
 8009224:	4b79      	ldr	r3, [pc, #484]	; (800940c <_vfiprintf_r+0x248>)
 8009226:	429d      	cmp	r5, r3
 8009228:	bf08      	it	eq
 800922a:	68f5      	ldreq	r5, [r6, #12]
 800922c:	e7da      	b.n	80091e4 <_vfiprintf_r+0x20>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	0598      	lsls	r0, r3, #22
 8009232:	d4ed      	bmi.n	8009210 <_vfiprintf_r+0x4c>
 8009234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009236:	f000 fb72 	bl	800991e <__retarget_lock_release_recursive>
 800923a:	e7e9      	b.n	8009210 <_vfiprintf_r+0x4c>
 800923c:	2300      	movs	r3, #0
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	2320      	movs	r3, #32
 8009242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009246:	2330      	movs	r3, #48	; 0x30
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009250:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009410 <_vfiprintf_r+0x24c>
 8009254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009258:	4623      	mov	r3, r4
 800925a:	469a      	mov	sl, r3
 800925c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009260:	b10a      	cbz	r2, 8009266 <_vfiprintf_r+0xa2>
 8009262:	2a25      	cmp	r2, #37	; 0x25
 8009264:	d1f9      	bne.n	800925a <_vfiprintf_r+0x96>
 8009266:	ebba 0b04 	subs.w	fp, sl, r4
 800926a:	d00b      	beq.n	8009284 <_vfiprintf_r+0xc0>
 800926c:	465b      	mov	r3, fp
 800926e:	4622      	mov	r2, r4
 8009270:	4629      	mov	r1, r5
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ff94 	bl	80091a0 <__sfputs_r>
 8009278:	3001      	adds	r0, #1
 800927a:	f000 80aa 	beq.w	80093d2 <_vfiprintf_r+0x20e>
 800927e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009280:	445a      	add	r2, fp
 8009282:	9209      	str	r2, [sp, #36]	; 0x24
 8009284:	f89a 3000 	ldrb.w	r3, [sl]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80a2 	beq.w	80093d2 <_vfiprintf_r+0x20e>
 800928e:	2300      	movs	r3, #0
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009298:	f10a 0a01 	add.w	sl, sl, #1
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a4:	931a      	str	r3, [sp, #104]	; 0x68
 80092a6:	4654      	mov	r4, sl
 80092a8:	2205      	movs	r2, #5
 80092aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ae:	4858      	ldr	r0, [pc, #352]	; (8009410 <_vfiprintf_r+0x24c>)
 80092b0:	f7fe ff84 	bl	80081bc <memchr>
 80092b4:	9a04      	ldr	r2, [sp, #16]
 80092b6:	b9d8      	cbnz	r0, 80092f0 <_vfiprintf_r+0x12c>
 80092b8:	06d1      	lsls	r1, r2, #27
 80092ba:	bf44      	itt	mi
 80092bc:	2320      	movmi	r3, #32
 80092be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c2:	0713      	lsls	r3, r2, #28
 80092c4:	bf44      	itt	mi
 80092c6:	232b      	movmi	r3, #43	; 0x2b
 80092c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092cc:	f89a 3000 	ldrb.w	r3, [sl]
 80092d0:	2b2a      	cmp	r3, #42	; 0x2a
 80092d2:	d015      	beq.n	8009300 <_vfiprintf_r+0x13c>
 80092d4:	4654      	mov	r4, sl
 80092d6:	2000      	movs	r0, #0
 80092d8:	f04f 0c0a 	mov.w	ip, #10
 80092dc:	9a07      	ldr	r2, [sp, #28]
 80092de:	4621      	mov	r1, r4
 80092e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e4:	3b30      	subs	r3, #48	; 0x30
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d94e      	bls.n	8009388 <_vfiprintf_r+0x1c4>
 80092ea:	b1b0      	cbz	r0, 800931a <_vfiprintf_r+0x156>
 80092ec:	9207      	str	r2, [sp, #28]
 80092ee:	e014      	b.n	800931a <_vfiprintf_r+0x156>
 80092f0:	eba0 0308 	sub.w	r3, r0, r8
 80092f4:	fa09 f303 	lsl.w	r3, r9, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	46a2      	mov	sl, r4
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	e7d2      	b.n	80092a6 <_vfiprintf_r+0xe2>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	1d19      	adds	r1, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	9103      	str	r1, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbb      	ittet	lt
 800930c:	425b      	neglt	r3, r3
 800930e:	f042 0202 	orrlt.w	r2, r2, #2
 8009312:	9307      	strge	r3, [sp, #28]
 8009314:	9307      	strlt	r3, [sp, #28]
 8009316:	bfb8      	it	lt
 8009318:	9204      	strlt	r2, [sp, #16]
 800931a:	7823      	ldrb	r3, [r4, #0]
 800931c:	2b2e      	cmp	r3, #46	; 0x2e
 800931e:	d10c      	bne.n	800933a <_vfiprintf_r+0x176>
 8009320:	7863      	ldrb	r3, [r4, #1]
 8009322:	2b2a      	cmp	r3, #42	; 0x2a
 8009324:	d135      	bne.n	8009392 <_vfiprintf_r+0x1ce>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	3402      	adds	r4, #2
 800932a:	1d1a      	adds	r2, r3, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	9203      	str	r2, [sp, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	bfb8      	it	lt
 8009334:	f04f 33ff 	movlt.w	r3, #4294967295
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009414 <_vfiprintf_r+0x250>
 800933e:	2203      	movs	r2, #3
 8009340:	4650      	mov	r0, sl
 8009342:	7821      	ldrb	r1, [r4, #0]
 8009344:	f7fe ff3a 	bl	80081bc <memchr>
 8009348:	b140      	cbz	r0, 800935c <_vfiprintf_r+0x198>
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	eba0 000a 	sub.w	r0, r0, sl
 8009350:	fa03 f000 	lsl.w	r0, r3, r0
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	3401      	adds	r4, #1
 8009358:	4303      	orrs	r3, r0
 800935a:	9304      	str	r3, [sp, #16]
 800935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009360:	2206      	movs	r2, #6
 8009362:	482d      	ldr	r0, [pc, #180]	; (8009418 <_vfiprintf_r+0x254>)
 8009364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009368:	f7fe ff28 	bl	80081bc <memchr>
 800936c:	2800      	cmp	r0, #0
 800936e:	d03f      	beq.n	80093f0 <_vfiprintf_r+0x22c>
 8009370:	4b2a      	ldr	r3, [pc, #168]	; (800941c <_vfiprintf_r+0x258>)
 8009372:	bb1b      	cbnz	r3, 80093bc <_vfiprintf_r+0x1f8>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	3307      	adds	r3, #7
 8009378:	f023 0307 	bic.w	r3, r3, #7
 800937c:	3308      	adds	r3, #8
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	443b      	add	r3, r7
 8009384:	9309      	str	r3, [sp, #36]	; 0x24
 8009386:	e767      	b.n	8009258 <_vfiprintf_r+0x94>
 8009388:	460c      	mov	r4, r1
 800938a:	2001      	movs	r0, #1
 800938c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009390:	e7a5      	b.n	80092de <_vfiprintf_r+0x11a>
 8009392:	2300      	movs	r3, #0
 8009394:	f04f 0c0a 	mov.w	ip, #10
 8009398:	4619      	mov	r1, r3
 800939a:	3401      	adds	r4, #1
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	4620      	mov	r0, r4
 80093a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a4:	3a30      	subs	r2, #48	; 0x30
 80093a6:	2a09      	cmp	r2, #9
 80093a8:	d903      	bls.n	80093b2 <_vfiprintf_r+0x1ee>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c5      	beq.n	800933a <_vfiprintf_r+0x176>
 80093ae:	9105      	str	r1, [sp, #20]
 80093b0:	e7c3      	b.n	800933a <_vfiprintf_r+0x176>
 80093b2:	4604      	mov	r4, r0
 80093b4:	2301      	movs	r3, #1
 80093b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ba:	e7f0      	b.n	800939e <_vfiprintf_r+0x1da>
 80093bc:	ab03      	add	r3, sp, #12
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	462a      	mov	r2, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	4b16      	ldr	r3, [pc, #88]	; (8009420 <_vfiprintf_r+0x25c>)
 80093c6:	a904      	add	r1, sp, #16
 80093c8:	f7fc f878 	bl	80054bc <_printf_float>
 80093cc:	4607      	mov	r7, r0
 80093ce:	1c78      	adds	r0, r7, #1
 80093d0:	d1d6      	bne.n	8009380 <_vfiprintf_r+0x1bc>
 80093d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d4:	07d9      	lsls	r1, r3, #31
 80093d6:	d405      	bmi.n	80093e4 <_vfiprintf_r+0x220>
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	059a      	lsls	r2, r3, #22
 80093dc:	d402      	bmi.n	80093e4 <_vfiprintf_r+0x220>
 80093de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e0:	f000 fa9d 	bl	800991e <__retarget_lock_release_recursive>
 80093e4:	89ab      	ldrh	r3, [r5, #12]
 80093e6:	065b      	lsls	r3, r3, #25
 80093e8:	f53f af12 	bmi.w	8009210 <_vfiprintf_r+0x4c>
 80093ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ee:	e711      	b.n	8009214 <_vfiprintf_r+0x50>
 80093f0:	ab03      	add	r3, sp, #12
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	462a      	mov	r2, r5
 80093f6:	4630      	mov	r0, r6
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <_vfiprintf_r+0x25c>)
 80093fa:	a904      	add	r1, sp, #16
 80093fc:	f7fc fafa 	bl	80059f4 <_printf_i>
 8009400:	e7e4      	b.n	80093cc <_vfiprintf_r+0x208>
 8009402:	bf00      	nop
 8009404:	0800ae64 	.word	0x0800ae64
 8009408:	0800ae84 	.word	0x0800ae84
 800940c:	0800ae44 	.word	0x0800ae44
 8009410:	0800adf4 	.word	0x0800adf4
 8009414:	0800adfa 	.word	0x0800adfa
 8009418:	0800adfe 	.word	0x0800adfe
 800941c:	080054bd 	.word	0x080054bd
 8009420:	080091a1 	.word	0x080091a1

08009424 <__swbuf_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4614      	mov	r4, r2
 800942a:	4605      	mov	r5, r0
 800942c:	b118      	cbz	r0, 8009436 <__swbuf_r+0x12>
 800942e:	6983      	ldr	r3, [r0, #24]
 8009430:	b90b      	cbnz	r3, 8009436 <__swbuf_r+0x12>
 8009432:	f000 f9d5 	bl	80097e0 <__sinit>
 8009436:	4b21      	ldr	r3, [pc, #132]	; (80094bc <__swbuf_r+0x98>)
 8009438:	429c      	cmp	r4, r3
 800943a:	d12b      	bne.n	8009494 <__swbuf_r+0x70>
 800943c:	686c      	ldr	r4, [r5, #4]
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	071a      	lsls	r2, r3, #28
 8009446:	d52f      	bpl.n	80094a8 <__swbuf_r+0x84>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	b36b      	cbz	r3, 80094a8 <__swbuf_r+0x84>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	b2f6      	uxtb	r6, r6
 8009452:	1ac0      	subs	r0, r0, r3
 8009454:	6963      	ldr	r3, [r4, #20]
 8009456:	4637      	mov	r7, r6
 8009458:	4283      	cmp	r3, r0
 800945a:	dc04      	bgt.n	8009466 <__swbuf_r+0x42>
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f92a 	bl	80096b8 <_fflush_r>
 8009464:	bb30      	cbnz	r0, 80094b4 <__swbuf_r+0x90>
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	3001      	adds	r0, #1
 800946a:	3b01      	subs	r3, #1
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	701e      	strb	r6, [r3, #0]
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	4283      	cmp	r3, r0
 800947a:	d004      	beq.n	8009486 <__swbuf_r+0x62>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	07db      	lsls	r3, r3, #31
 8009480:	d506      	bpl.n	8009490 <__swbuf_r+0x6c>
 8009482:	2e0a      	cmp	r6, #10
 8009484:	d104      	bne.n	8009490 <__swbuf_r+0x6c>
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f915 	bl	80096b8 <_fflush_r>
 800948e:	b988      	cbnz	r0, 80094b4 <__swbuf_r+0x90>
 8009490:	4638      	mov	r0, r7
 8009492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <__swbuf_r+0x9c>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d101      	bne.n	800949e <__swbuf_r+0x7a>
 800949a:	68ac      	ldr	r4, [r5, #8]
 800949c:	e7cf      	b.n	800943e <__swbuf_r+0x1a>
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <__swbuf_r+0xa0>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	bf08      	it	eq
 80094a4:	68ec      	ldreq	r4, [r5, #12]
 80094a6:	e7ca      	b.n	800943e <__swbuf_r+0x1a>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 f80c 	bl	80094c8 <__swsetup_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d0cb      	beq.n	800944c <__swbuf_r+0x28>
 80094b4:	f04f 37ff 	mov.w	r7, #4294967295
 80094b8:	e7ea      	b.n	8009490 <__swbuf_r+0x6c>
 80094ba:	bf00      	nop
 80094bc:	0800ae64 	.word	0x0800ae64
 80094c0:	0800ae84 	.word	0x0800ae84
 80094c4:	0800ae44 	.word	0x0800ae44

080094c8 <__swsetup_r>:
 80094c8:	4b32      	ldr	r3, [pc, #200]	; (8009594 <__swsetup_r+0xcc>)
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	681d      	ldr	r5, [r3, #0]
 80094ce:	4606      	mov	r6, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	b125      	cbz	r5, 80094de <__swsetup_r+0x16>
 80094d4:	69ab      	ldr	r3, [r5, #24]
 80094d6:	b913      	cbnz	r3, 80094de <__swsetup_r+0x16>
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f981 	bl	80097e0 <__sinit>
 80094de:	4b2e      	ldr	r3, [pc, #184]	; (8009598 <__swsetup_r+0xd0>)
 80094e0:	429c      	cmp	r4, r3
 80094e2:	d10f      	bne.n	8009504 <__swsetup_r+0x3c>
 80094e4:	686c      	ldr	r4, [r5, #4]
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ec:	0719      	lsls	r1, r3, #28
 80094ee:	d42c      	bmi.n	800954a <__swsetup_r+0x82>
 80094f0:	06dd      	lsls	r5, r3, #27
 80094f2:	d411      	bmi.n	8009518 <__swsetup_r+0x50>
 80094f4:	2309      	movs	r3, #9
 80094f6:	6033      	str	r3, [r6, #0]
 80094f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	e03e      	b.n	8009582 <__swsetup_r+0xba>
 8009504:	4b25      	ldr	r3, [pc, #148]	; (800959c <__swsetup_r+0xd4>)
 8009506:	429c      	cmp	r4, r3
 8009508:	d101      	bne.n	800950e <__swsetup_r+0x46>
 800950a:	68ac      	ldr	r4, [r5, #8]
 800950c:	e7eb      	b.n	80094e6 <__swsetup_r+0x1e>
 800950e:	4b24      	ldr	r3, [pc, #144]	; (80095a0 <__swsetup_r+0xd8>)
 8009510:	429c      	cmp	r4, r3
 8009512:	bf08      	it	eq
 8009514:	68ec      	ldreq	r4, [r5, #12]
 8009516:	e7e6      	b.n	80094e6 <__swsetup_r+0x1e>
 8009518:	0758      	lsls	r0, r3, #29
 800951a:	d512      	bpl.n	8009542 <__swsetup_r+0x7a>
 800951c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951e:	b141      	cbz	r1, 8009532 <__swsetup_r+0x6a>
 8009520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009524:	4299      	cmp	r1, r3
 8009526:	d002      	beq.n	800952e <__swsetup_r+0x66>
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff fb2f 	bl	8008b8c <_free_r>
 800952e:	2300      	movs	r3, #0
 8009530:	6363      	str	r3, [r4, #52]	; 0x34
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	2300      	movs	r3, #0
 800953c:	6063      	str	r3, [r4, #4]
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f043 0308 	orr.w	r3, r3, #8
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	b94b      	cbnz	r3, 8009562 <__swsetup_r+0x9a>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009558:	d003      	beq.n	8009562 <__swsetup_r+0x9a>
 800955a:	4621      	mov	r1, r4
 800955c:	4630      	mov	r0, r6
 800955e:	f000 fa05 	bl	800996c <__smakebuf_r>
 8009562:	89a0      	ldrh	r0, [r4, #12]
 8009564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009568:	f010 0301 	ands.w	r3, r0, #1
 800956c:	d00a      	beq.n	8009584 <__swsetup_r+0xbc>
 800956e:	2300      	movs	r3, #0
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	6963      	ldr	r3, [r4, #20]
 8009574:	425b      	negs	r3, r3
 8009576:	61a3      	str	r3, [r4, #24]
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	b943      	cbnz	r3, 800958e <__swsetup_r+0xc6>
 800957c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009580:	d1ba      	bne.n	80094f8 <__swsetup_r+0x30>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	0781      	lsls	r1, r0, #30
 8009586:	bf58      	it	pl
 8009588:	6963      	ldrpl	r3, [r4, #20]
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	e7f4      	b.n	8009578 <__swsetup_r+0xb0>
 800958e:	2000      	movs	r0, #0
 8009590:	e7f7      	b.n	8009582 <__swsetup_r+0xba>
 8009592:	bf00      	nop
 8009594:	20000014 	.word	0x20000014
 8009598:	0800ae64 	.word	0x0800ae64
 800959c:	0800ae84 	.word	0x0800ae84
 80095a0:	0800ae44 	.word	0x0800ae44

080095a4 <abort>:
 80095a4:	2006      	movs	r0, #6
 80095a6:	b508      	push	{r3, lr}
 80095a8:	f000 fa50 	bl	8009a4c <raise>
 80095ac:	2001      	movs	r0, #1
 80095ae:	f7f8 ff83 	bl	80024b8 <_exit>
	...

080095b4 <__sflush_r>:
 80095b4:	898a      	ldrh	r2, [r1, #12]
 80095b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b8:	4605      	mov	r5, r0
 80095ba:	0710      	lsls	r0, r2, #28
 80095bc:	460c      	mov	r4, r1
 80095be:	d457      	bmi.n	8009670 <__sflush_r+0xbc>
 80095c0:	684b      	ldr	r3, [r1, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dc04      	bgt.n	80095d0 <__sflush_r+0x1c>
 80095c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dc01      	bgt.n	80095d0 <__sflush_r+0x1c>
 80095cc:	2000      	movs	r0, #0
 80095ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	d0fa      	beq.n	80095cc <__sflush_r+0x18>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095dc:	682f      	ldr	r7, [r5, #0]
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	d032      	beq.n	8009648 <__sflush_r+0x94>
 80095e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	075a      	lsls	r2, r3, #29
 80095e8:	d505      	bpl.n	80095f6 <__sflush_r+0x42>
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	1ac0      	subs	r0, r0, r3
 80095ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095f0:	b10b      	cbz	r3, 80095f6 <__sflush_r+0x42>
 80095f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095f4:	1ac0      	subs	r0, r0, r3
 80095f6:	2300      	movs	r3, #0
 80095f8:	4602      	mov	r2, r0
 80095fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fc:	4628      	mov	r0, r5
 80095fe:	6a21      	ldr	r1, [r4, #32]
 8009600:	47b0      	blx	r6
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	d106      	bne.n	8009616 <__sflush_r+0x62>
 8009608:	6829      	ldr	r1, [r5, #0]
 800960a:	291d      	cmp	r1, #29
 800960c:	d82c      	bhi.n	8009668 <__sflush_r+0xb4>
 800960e:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <__sflush_r+0x100>)
 8009610:	40ca      	lsrs	r2, r1
 8009612:	07d6      	lsls	r6, r2, #31
 8009614:	d528      	bpl.n	8009668 <__sflush_r+0xb4>
 8009616:	2200      	movs	r2, #0
 8009618:	6062      	str	r2, [r4, #4]
 800961a:	6922      	ldr	r2, [r4, #16]
 800961c:	04d9      	lsls	r1, r3, #19
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	d504      	bpl.n	800962c <__sflush_r+0x78>
 8009622:	1c42      	adds	r2, r0, #1
 8009624:	d101      	bne.n	800962a <__sflush_r+0x76>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	b903      	cbnz	r3, 800962c <__sflush_r+0x78>
 800962a:	6560      	str	r0, [r4, #84]	; 0x54
 800962c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800962e:	602f      	str	r7, [r5, #0]
 8009630:	2900      	cmp	r1, #0
 8009632:	d0cb      	beq.n	80095cc <__sflush_r+0x18>
 8009634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__sflush_r+0x8e>
 800963c:	4628      	mov	r0, r5
 800963e:	f7ff faa5 	bl	8008b8c <_free_r>
 8009642:	2000      	movs	r0, #0
 8009644:	6360      	str	r0, [r4, #52]	; 0x34
 8009646:	e7c2      	b.n	80095ce <__sflush_r+0x1a>
 8009648:	6a21      	ldr	r1, [r4, #32]
 800964a:	2301      	movs	r3, #1
 800964c:	4628      	mov	r0, r5
 800964e:	47b0      	blx	r6
 8009650:	1c41      	adds	r1, r0, #1
 8009652:	d1c7      	bne.n	80095e4 <__sflush_r+0x30>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0c4      	beq.n	80095e4 <__sflush_r+0x30>
 800965a:	2b1d      	cmp	r3, #29
 800965c:	d001      	beq.n	8009662 <__sflush_r+0xae>
 800965e:	2b16      	cmp	r3, #22
 8009660:	d101      	bne.n	8009666 <__sflush_r+0xb2>
 8009662:	602f      	str	r7, [r5, #0]
 8009664:	e7b2      	b.n	80095cc <__sflush_r+0x18>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	e7ae      	b.n	80095ce <__sflush_r+0x1a>
 8009670:	690f      	ldr	r7, [r1, #16]
 8009672:	2f00      	cmp	r7, #0
 8009674:	d0aa      	beq.n	80095cc <__sflush_r+0x18>
 8009676:	0793      	lsls	r3, r2, #30
 8009678:	bf18      	it	ne
 800967a:	2300      	movne	r3, #0
 800967c:	680e      	ldr	r6, [r1, #0]
 800967e:	bf08      	it	eq
 8009680:	694b      	ldreq	r3, [r1, #20]
 8009682:	1bf6      	subs	r6, r6, r7
 8009684:	600f      	str	r7, [r1, #0]
 8009686:	608b      	str	r3, [r1, #8]
 8009688:	2e00      	cmp	r6, #0
 800968a:	dd9f      	ble.n	80095cc <__sflush_r+0x18>
 800968c:	4633      	mov	r3, r6
 800968e:	463a      	mov	r2, r7
 8009690:	4628      	mov	r0, r5
 8009692:	6a21      	ldr	r1, [r4, #32]
 8009694:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009698:	47e0      	blx	ip
 800969a:	2800      	cmp	r0, #0
 800969c:	dc06      	bgt.n	80096ac <__sflush_r+0xf8>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	e790      	b.n	80095ce <__sflush_r+0x1a>
 80096ac:	4407      	add	r7, r0
 80096ae:	1a36      	subs	r6, r6, r0
 80096b0:	e7ea      	b.n	8009688 <__sflush_r+0xd4>
 80096b2:	bf00      	nop
 80096b4:	20400001 	.word	0x20400001

080096b8 <_fflush_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	690b      	ldr	r3, [r1, #16]
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	b913      	cbnz	r3, 80096c8 <_fflush_r+0x10>
 80096c2:	2500      	movs	r5, #0
 80096c4:	4628      	mov	r0, r5
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	b118      	cbz	r0, 80096d2 <_fflush_r+0x1a>
 80096ca:	6983      	ldr	r3, [r0, #24]
 80096cc:	b90b      	cbnz	r3, 80096d2 <_fflush_r+0x1a>
 80096ce:	f000 f887 	bl	80097e0 <__sinit>
 80096d2:	4b14      	ldr	r3, [pc, #80]	; (8009724 <_fflush_r+0x6c>)
 80096d4:	429c      	cmp	r4, r3
 80096d6:	d11b      	bne.n	8009710 <_fflush_r+0x58>
 80096d8:	686c      	ldr	r4, [r5, #4]
 80096da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0ef      	beq.n	80096c2 <_fflush_r+0xa>
 80096e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096e4:	07d0      	lsls	r0, r2, #31
 80096e6:	d404      	bmi.n	80096f2 <_fflush_r+0x3a>
 80096e8:	0599      	lsls	r1, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_fflush_r+0x3a>
 80096ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ee:	f000 f915 	bl	800991c <__retarget_lock_acquire_recursive>
 80096f2:	4628      	mov	r0, r5
 80096f4:	4621      	mov	r1, r4
 80096f6:	f7ff ff5d 	bl	80095b4 <__sflush_r>
 80096fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096fc:	4605      	mov	r5, r0
 80096fe:	07da      	lsls	r2, r3, #31
 8009700:	d4e0      	bmi.n	80096c4 <_fflush_r+0xc>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	059b      	lsls	r3, r3, #22
 8009706:	d4dd      	bmi.n	80096c4 <_fflush_r+0xc>
 8009708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800970a:	f000 f908 	bl	800991e <__retarget_lock_release_recursive>
 800970e:	e7d9      	b.n	80096c4 <_fflush_r+0xc>
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <_fflush_r+0x70>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <_fflush_r+0x62>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7df      	b.n	80096da <_fflush_r+0x22>
 800971a:	4b04      	ldr	r3, [pc, #16]	; (800972c <_fflush_r+0x74>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7da      	b.n	80096da <_fflush_r+0x22>
 8009724:	0800ae64 	.word	0x0800ae64
 8009728:	0800ae84 	.word	0x0800ae84
 800972c:	0800ae44 	.word	0x0800ae44

08009730 <std>:
 8009730:	2300      	movs	r3, #0
 8009732:	b510      	push	{r4, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	e9c0 3300 	strd	r3, r3, [r0]
 800973a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800973e:	6083      	str	r3, [r0, #8]
 8009740:	8181      	strh	r1, [r0, #12]
 8009742:	6643      	str	r3, [r0, #100]	; 0x64
 8009744:	81c2      	strh	r2, [r0, #14]
 8009746:	6183      	str	r3, [r0, #24]
 8009748:	4619      	mov	r1, r3
 800974a:	2208      	movs	r2, #8
 800974c:	305c      	adds	r0, #92	; 0x5c
 800974e:	f7fb fe0f 	bl	8005370 <memset>
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <std+0x38>)
 8009754:	6224      	str	r4, [r4, #32]
 8009756:	6263      	str	r3, [r4, #36]	; 0x24
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <std+0x3c>)
 800975a:	62a3      	str	r3, [r4, #40]	; 0x28
 800975c:	4b04      	ldr	r3, [pc, #16]	; (8009770 <std+0x40>)
 800975e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009760:	4b04      	ldr	r3, [pc, #16]	; (8009774 <std+0x44>)
 8009762:	6323      	str	r3, [r4, #48]	; 0x30
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	08009a85 	.word	0x08009a85
 800976c:	08009aa7 	.word	0x08009aa7
 8009770:	08009adf 	.word	0x08009adf
 8009774:	08009b03 	.word	0x08009b03

08009778 <_cleanup_r>:
 8009778:	4901      	ldr	r1, [pc, #4]	; (8009780 <_cleanup_r+0x8>)
 800977a:	f000 b8af 	b.w	80098dc <_fwalk_reent>
 800977e:	bf00      	nop
 8009780:	080096b9 	.word	0x080096b9

08009784 <__sfmoreglue>:
 8009784:	2268      	movs	r2, #104	; 0x68
 8009786:	b570      	push	{r4, r5, r6, lr}
 8009788:	1e4d      	subs	r5, r1, #1
 800978a:	4355      	muls	r5, r2
 800978c:	460e      	mov	r6, r1
 800978e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009792:	f7ff fa63 	bl	8008c5c <_malloc_r>
 8009796:	4604      	mov	r4, r0
 8009798:	b140      	cbz	r0, 80097ac <__sfmoreglue+0x28>
 800979a:	2100      	movs	r1, #0
 800979c:	e9c0 1600 	strd	r1, r6, [r0]
 80097a0:	300c      	adds	r0, #12
 80097a2:	60a0      	str	r0, [r4, #8]
 80097a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097a8:	f7fb fde2 	bl	8005370 <memset>
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <__sfp_lock_acquire>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__sfp_lock_acquire+0x8>)
 80097b2:	f000 b8b3 	b.w	800991c <__retarget_lock_acquire_recursive>
 80097b6:	bf00      	nop
 80097b8:	20000aed 	.word	0x20000aed

080097bc <__sfp_lock_release>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__sfp_lock_release+0x8>)
 80097be:	f000 b8ae 	b.w	800991e <__retarget_lock_release_recursive>
 80097c2:	bf00      	nop
 80097c4:	20000aed 	.word	0x20000aed

080097c8 <__sinit_lock_acquire>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__sinit_lock_acquire+0x8>)
 80097ca:	f000 b8a7 	b.w	800991c <__retarget_lock_acquire_recursive>
 80097ce:	bf00      	nop
 80097d0:	20000aee 	.word	0x20000aee

080097d4 <__sinit_lock_release>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sinit_lock_release+0x8>)
 80097d6:	f000 b8a2 	b.w	800991e <__retarget_lock_release_recursive>
 80097da:	bf00      	nop
 80097dc:	20000aee 	.word	0x20000aee

080097e0 <__sinit>:
 80097e0:	b510      	push	{r4, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	f7ff fff0 	bl	80097c8 <__sinit_lock_acquire>
 80097e8:	69a3      	ldr	r3, [r4, #24]
 80097ea:	b11b      	cbz	r3, 80097f4 <__sinit+0x14>
 80097ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f0:	f7ff bff0 	b.w	80097d4 <__sinit_lock_release>
 80097f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097f8:	6523      	str	r3, [r4, #80]	; 0x50
 80097fa:	4b13      	ldr	r3, [pc, #76]	; (8009848 <__sinit+0x68>)
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <__sinit+0x6c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	62a2      	str	r2, [r4, #40]	; 0x28
 8009802:	42a3      	cmp	r3, r4
 8009804:	bf08      	it	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	4620      	mov	r0, r4
 800980a:	bf08      	it	eq
 800980c:	61a3      	streq	r3, [r4, #24]
 800980e:	f000 f81f 	bl	8009850 <__sfp>
 8009812:	6060      	str	r0, [r4, #4]
 8009814:	4620      	mov	r0, r4
 8009816:	f000 f81b 	bl	8009850 <__sfp>
 800981a:	60a0      	str	r0, [r4, #8]
 800981c:	4620      	mov	r0, r4
 800981e:	f000 f817 	bl	8009850 <__sfp>
 8009822:	2200      	movs	r2, #0
 8009824:	2104      	movs	r1, #4
 8009826:	60e0      	str	r0, [r4, #12]
 8009828:	6860      	ldr	r0, [r4, #4]
 800982a:	f7ff ff81 	bl	8009730 <std>
 800982e:	2201      	movs	r2, #1
 8009830:	2109      	movs	r1, #9
 8009832:	68a0      	ldr	r0, [r4, #8]
 8009834:	f7ff ff7c 	bl	8009730 <std>
 8009838:	2202      	movs	r2, #2
 800983a:	2112      	movs	r1, #18
 800983c:	68e0      	ldr	r0, [r4, #12]
 800983e:	f7ff ff77 	bl	8009730 <std>
 8009842:	2301      	movs	r3, #1
 8009844:	61a3      	str	r3, [r4, #24]
 8009846:	e7d1      	b.n	80097ec <__sinit+0xc>
 8009848:	0800aa00 	.word	0x0800aa00
 800984c:	08009779 	.word	0x08009779

08009850 <__sfp>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	4607      	mov	r7, r0
 8009854:	f7ff ffac 	bl	80097b0 <__sfp_lock_acquire>
 8009858:	4b1e      	ldr	r3, [pc, #120]	; (80098d4 <__sfp+0x84>)
 800985a:	681e      	ldr	r6, [r3, #0]
 800985c:	69b3      	ldr	r3, [r6, #24]
 800985e:	b913      	cbnz	r3, 8009866 <__sfp+0x16>
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff ffbd 	bl	80097e0 <__sinit>
 8009866:	3648      	adds	r6, #72	; 0x48
 8009868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	d503      	bpl.n	8009878 <__sfp+0x28>
 8009870:	6833      	ldr	r3, [r6, #0]
 8009872:	b30b      	cbz	r3, 80098b8 <__sfp+0x68>
 8009874:	6836      	ldr	r6, [r6, #0]
 8009876:	e7f7      	b.n	8009868 <__sfp+0x18>
 8009878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800987c:	b9d5      	cbnz	r5, 80098b4 <__sfp+0x64>
 800987e:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <__sfp+0x88>)
 8009880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009884:	60e3      	str	r3, [r4, #12]
 8009886:	6665      	str	r5, [r4, #100]	; 0x64
 8009888:	f000 f847 	bl	800991a <__retarget_lock_init_recursive>
 800988c:	f7ff ff96 	bl	80097bc <__sfp_lock_release>
 8009890:	2208      	movs	r2, #8
 8009892:	4629      	mov	r1, r5
 8009894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800989c:	6025      	str	r5, [r4, #0]
 800989e:	61a5      	str	r5, [r4, #24]
 80098a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098a4:	f7fb fd64 	bl	8005370 <memset>
 80098a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098b0:	4620      	mov	r0, r4
 80098b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b4:	3468      	adds	r4, #104	; 0x68
 80098b6:	e7d9      	b.n	800986c <__sfp+0x1c>
 80098b8:	2104      	movs	r1, #4
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7ff ff62 	bl	8009784 <__sfmoreglue>
 80098c0:	4604      	mov	r4, r0
 80098c2:	6030      	str	r0, [r6, #0]
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1d5      	bne.n	8009874 <__sfp+0x24>
 80098c8:	f7ff ff78 	bl	80097bc <__sfp_lock_release>
 80098cc:	230c      	movs	r3, #12
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	e7ee      	b.n	80098b0 <__sfp+0x60>
 80098d2:	bf00      	nop
 80098d4:	0800aa00 	.word	0x0800aa00
 80098d8:	ffff0001 	.word	0xffff0001

080098dc <_fwalk_reent>:
 80098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	4606      	mov	r6, r0
 80098e2:	4688      	mov	r8, r1
 80098e4:	2700      	movs	r7, #0
 80098e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ee:	f1b9 0901 	subs.w	r9, r9, #1
 80098f2:	d505      	bpl.n	8009900 <_fwalk_reent+0x24>
 80098f4:	6824      	ldr	r4, [r4, #0]
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	d1f7      	bne.n	80098ea <_fwalk_reent+0xe>
 80098fa:	4638      	mov	r0, r7
 80098fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009900:	89ab      	ldrh	r3, [r5, #12]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d907      	bls.n	8009916 <_fwalk_reent+0x3a>
 8009906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800990a:	3301      	adds	r3, #1
 800990c:	d003      	beq.n	8009916 <_fwalk_reent+0x3a>
 800990e:	4629      	mov	r1, r5
 8009910:	4630      	mov	r0, r6
 8009912:	47c0      	blx	r8
 8009914:	4307      	orrs	r7, r0
 8009916:	3568      	adds	r5, #104	; 0x68
 8009918:	e7e9      	b.n	80098ee <_fwalk_reent+0x12>

0800991a <__retarget_lock_init_recursive>:
 800991a:	4770      	bx	lr

0800991c <__retarget_lock_acquire_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_release_recursive>:
 800991e:	4770      	bx	lr

08009920 <__swhatbuf_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	460e      	mov	r6, r1
 8009924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009928:	4614      	mov	r4, r2
 800992a:	2900      	cmp	r1, #0
 800992c:	461d      	mov	r5, r3
 800992e:	b096      	sub	sp, #88	; 0x58
 8009930:	da08      	bge.n	8009944 <__swhatbuf_r+0x24>
 8009932:	2200      	movs	r2, #0
 8009934:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	061a      	lsls	r2, r3, #24
 800993c:	d410      	bmi.n	8009960 <__swhatbuf_r+0x40>
 800993e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009942:	e00e      	b.n	8009962 <__swhatbuf_r+0x42>
 8009944:	466a      	mov	r2, sp
 8009946:	f000 f903 	bl	8009b50 <_fstat_r>
 800994a:	2800      	cmp	r0, #0
 800994c:	dbf1      	blt.n	8009932 <__swhatbuf_r+0x12>
 800994e:	9a01      	ldr	r2, [sp, #4]
 8009950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009958:	425a      	negs	r2, r3
 800995a:	415a      	adcs	r2, r3
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	e7ee      	b.n	800993e <__swhatbuf_r+0x1e>
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	2000      	movs	r0, #0
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	b016      	add	sp, #88	; 0x58
 8009968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800996c <__smakebuf_r>:
 800996c:	898b      	ldrh	r3, [r1, #12]
 800996e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009970:	079d      	lsls	r5, r3, #30
 8009972:	4606      	mov	r6, r0
 8009974:	460c      	mov	r4, r1
 8009976:	d507      	bpl.n	8009988 <__smakebuf_r+0x1c>
 8009978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	2301      	movs	r3, #1
 8009982:	6163      	str	r3, [r4, #20]
 8009984:	b002      	add	sp, #8
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	466a      	mov	r2, sp
 800998a:	ab01      	add	r3, sp, #4
 800998c:	f7ff ffc8 	bl	8009920 <__swhatbuf_r>
 8009990:	9900      	ldr	r1, [sp, #0]
 8009992:	4605      	mov	r5, r0
 8009994:	4630      	mov	r0, r6
 8009996:	f7ff f961 	bl	8008c5c <_malloc_r>
 800999a:	b948      	cbnz	r0, 80099b0 <__smakebuf_r+0x44>
 800999c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a0:	059a      	lsls	r2, r3, #22
 80099a2:	d4ef      	bmi.n	8009984 <__smakebuf_r+0x18>
 80099a4:	f023 0303 	bic.w	r3, r3, #3
 80099a8:	f043 0302 	orr.w	r3, r3, #2
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	e7e3      	b.n	8009978 <__smakebuf_r+0xc>
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <__smakebuf_r+0x7c>)
 80099b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	6020      	str	r0, [r4, #0]
 80099b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	6120      	str	r0, [r4, #16]
 80099c2:	6163      	str	r3, [r4, #20]
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	b15b      	cbz	r3, 80099e0 <__smakebuf_r+0x74>
 80099c8:	4630      	mov	r0, r6
 80099ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ce:	f000 f8d1 	bl	8009b74 <_isatty_r>
 80099d2:	b128      	cbz	r0, 80099e0 <__smakebuf_r+0x74>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	f043 0301 	orr.w	r3, r3, #1
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	89a0      	ldrh	r0, [r4, #12]
 80099e2:	4305      	orrs	r5, r0
 80099e4:	81a5      	strh	r5, [r4, #12]
 80099e6:	e7cd      	b.n	8009984 <__smakebuf_r+0x18>
 80099e8:	08009779 	.word	0x08009779

080099ec <_malloc_usable_size_r>:
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f18      	subs	r0, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfbc      	itt	lt
 80099f6:	580b      	ldrlt	r3, [r1, r0]
 80099f8:	18c0      	addlt	r0, r0, r3
 80099fa:	4770      	bx	lr

080099fc <_raise_r>:
 80099fc:	291f      	cmp	r1, #31
 80099fe:	b538      	push	{r3, r4, r5, lr}
 8009a00:	4604      	mov	r4, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	d904      	bls.n	8009a10 <_raise_r+0x14>
 8009a06:	2316      	movs	r3, #22
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a12:	b112      	cbz	r2, 8009a1a <_raise_r+0x1e>
 8009a14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a18:	b94b      	cbnz	r3, 8009a2e <_raise_r+0x32>
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 f830 	bl	8009a80 <_getpid_r>
 8009a20:	462a      	mov	r2, r5
 8009a22:	4601      	mov	r1, r0
 8009a24:	4620      	mov	r0, r4
 8009a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2a:	f000 b817 	b.w	8009a5c <_kill_r>
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d00a      	beq.n	8009a48 <_raise_r+0x4c>
 8009a32:	1c59      	adds	r1, r3, #1
 8009a34:	d103      	bne.n	8009a3e <_raise_r+0x42>
 8009a36:	2316      	movs	r3, #22
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	e7e7      	b.n	8009a0e <_raise_r+0x12>
 8009a3e:	2400      	movs	r4, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a46:	4798      	blx	r3
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e7e0      	b.n	8009a0e <_raise_r+0x12>

08009a4c <raise>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <raise+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f7ff bfd3 	b.w	80099fc <_raise_r>
 8009a56:	bf00      	nop
 8009a58:	20000014 	.word	0x20000014

08009a5c <_kill_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4d06      	ldr	r5, [pc, #24]	; (8009a7c <_kill_r+0x20>)
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f7f8 fd15 	bl	8002498 <_kill>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	d102      	bne.n	8009a78 <_kill_r+0x1c>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b103      	cbz	r3, 8009a78 <_kill_r+0x1c>
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000ae8 	.word	0x20000ae8

08009a80 <_getpid_r>:
 8009a80:	f7f8 bd03 	b.w	800248a <_getpid>

08009a84 <__sread>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	460c      	mov	r4, r1
 8009a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8c:	f000 f894 	bl	8009bb8 <_read_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	bfab      	itete	ge
 8009a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a96:	89a3      	ldrhlt	r3, [r4, #12]
 8009a98:	181b      	addge	r3, r3, r0
 8009a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a9e:	bfac      	ite	ge
 8009aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aa2:	81a3      	strhlt	r3, [r4, #12]
 8009aa4:	bd10      	pop	{r4, pc}

08009aa6 <__swrite>:
 8009aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aaa:	461f      	mov	r7, r3
 8009aac:	898b      	ldrh	r3, [r1, #12]
 8009aae:	4605      	mov	r5, r0
 8009ab0:	05db      	lsls	r3, r3, #23
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	d505      	bpl.n	8009ac4 <__swrite+0x1e>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	2200      	movs	r2, #0
 8009abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac0:	f000 f868 	bl	8009b94 <_lseek_r>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	f000 b817 	b.w	8009b0c <_write_r>

08009ade <__sseek>:
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae6:	f000 f855 	bl	8009b94 <_lseek_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	bf15      	itete	ne
 8009af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009afa:	81a3      	strheq	r3, [r4, #12]
 8009afc:	bf18      	it	ne
 8009afe:	81a3      	strhne	r3, [r4, #12]
 8009b00:	bd10      	pop	{r4, pc}

08009b02 <__sclose>:
 8009b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b06:	f000 b813 	b.w	8009b30 <_close_r>
	...

08009b0c <_write_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	2200      	movs	r2, #0
 8009b16:	4d05      	ldr	r5, [pc, #20]	; (8009b2c <_write_r+0x20>)
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f8 fcf3 	bl	8002506 <_write>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_write_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_write_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20000ae8 	.word	0x20000ae8

08009b30 <_close_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	2300      	movs	r3, #0
 8009b34:	4d05      	ldr	r5, [pc, #20]	; (8009b4c <_close_r+0x1c>)
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f8 fcff 	bl	800253e <_close>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_close_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_close_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20000ae8 	.word	0x20000ae8

08009b50 <_fstat_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	2300      	movs	r3, #0
 8009b54:	4d06      	ldr	r5, [pc, #24]	; (8009b70 <_fstat_r+0x20>)
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	f7f8 fcf9 	bl	8002554 <_fstat>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d102      	bne.n	8009b6c <_fstat_r+0x1c>
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	b103      	cbz	r3, 8009b6c <_fstat_r+0x1c>
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000ae8 	.word	0x20000ae8

08009b74 <_isatty_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	2300      	movs	r3, #0
 8009b78:	4d05      	ldr	r5, [pc, #20]	; (8009b90 <_isatty_r+0x1c>)
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f8 fcf7 	bl	8002572 <_isatty>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_isatty_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_isatty_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20000ae8 	.word	0x20000ae8

08009b94 <_lseek_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4d05      	ldr	r5, [pc, #20]	; (8009bb4 <_lseek_r+0x20>)
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f8 fcef 	bl	8002586 <_lseek>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_lseek_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_lseek_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20000ae8 	.word	0x20000ae8

08009bb8 <_read_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4d05      	ldr	r5, [pc, #20]	; (8009bd8 <_read_r+0x20>)
 8009bc4:	602a      	str	r2, [r5, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f7f8 fc80 	bl	80024cc <_read>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_read_r+0x1e>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_read_r+0x1e>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	20000ae8 	.word	0x20000ae8

08009bdc <trunc>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009be2:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8009be6:	2a13      	cmp	r2, #19
 8009be8:	4603      	mov	r3, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	dc10      	bgt.n	8009c10 <trunc+0x34>
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	bfb3      	iteet	lt
 8009bf2:	2000      	movlt	r0, #0
 8009bf4:	2000      	movge	r0, #0
 8009bf6:	4b10      	ldrge	r3, [pc, #64]	; (8009c38 <trunc+0x5c>)
 8009bf8:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8009bfc:	bfa4      	itt	ge
 8009bfe:	fa43 f202 	asrge.w	r2, r3, r2
 8009c02:	ea24 0102 	bicge.w	r1, r4, r2
 8009c06:	4603      	mov	r3, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c10:	2a33      	cmp	r2, #51	; 0x33
 8009c12:	dd07      	ble.n	8009c24 <trunc+0x48>
 8009c14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009c18:	d1f7      	bne.n	8009c0a <trunc+0x2e>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	f7f6 fb59 	bl	80002d4 <__adddf3>
 8009c22:	e7f0      	b.n	8009c06 <trunc+0x2a>
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295
 8009c28:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8009c2c:	fa22 f505 	lsr.w	r5, r2, r5
 8009c30:	ea20 0005 	bic.w	r0, r0, r5
 8009c34:	e7e7      	b.n	8009c06 <trunc+0x2a>
 8009c36:	bf00      	nop
 8009c38:	000fffff 	.word	0x000fffff

08009c3c <_init>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr

08009c48 <_fini>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr
